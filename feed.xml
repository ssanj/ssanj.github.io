<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 06 Jul 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Write Html Test Reports in ScalaTest While Retaining Console Output</title>
    <link>http://blog.ssanj.net/posts/2016-07-06-write-html-test-reports-with-scalatest-while-retaining-console-output.html</link>
    <description><![CDATA[<p>If you are using <a href="http://www.scalatest.org">ScalaTest</a> with <a href="http://www.scala-sbt.org">SBT</a> and need to write out Html reports for your tests, add the following incantation to your build.sbt:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">testOptions in Test += Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-h&quot;</span>, <span class="st">&quot;target/test-reports&quot;</span>)</code></pre></div>
<p>The above will write out Html reports to your <strong>target/test-reports</strong> directory.</p>
<p>Unfortunately this stops the writing of any test successes or failures to the console. You just get a message of the type: “x Tests Failed”. You have to then rummage around the Html reports to figure out what happened. Not ideal.</p>
<p>To get both the console output and the Html output for your tests, add the following incantation to your build.sbt:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">testOptions in Test ++= Seq(Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-o&quot;</span>), Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-h&quot;</span>, <span class="st">&quot;target/test-reports&quot;</span>))</code></pre></div>
<p>Read the <a href="http://www.scalatest.org/user_guide/using_the_runner">full list of ScalaTest options</a> for more configurations.</p>
<p>If you get the following NoClassDefFoundError error when generating reports:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[error] (test:executeTests) java.<span class="fu">lang</span>.<span class="fu">NoClassDefFoundError</span>: org/pegdown/PegDownProcessor</code></pre></div>
<p>add the pegdown library to your dependencies:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">  <span class="st">&quot;org.pegdown&quot;</span>    %  <span class="st">&quot;pegdown&quot;</span>     % <span class="st">&quot;1.6.0&quot;</span>  % <span class="st">&quot;test&quot;</span></code></pre></div>
<p>Now you can have the best of both worlds!</p>]]></description>
    <pubDate>Wed, 06 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-07-06-write-html-test-reports-with-scalatest-while-retaining-console-output.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Run ScalaCheck from ScalaTest and Generate HTML Reports</title>
    <link>http://blog.ssanj.net/posts/2016-07-06-how-to-run-scalacheck-from-scalatest-and-generate-html-reports.html</link>
    <description><![CDATA[<p>It would seem that ScalaCheck does not have a way to generate HTML output for tests, as <a href="http://scalatest.org">ScalaTest</a> or <a href="http://etorreborre.github.io/specs2">Specs2</a> does. In order to get some of this functionality I decided to run ScalaCheck through ScalaTest and get the HTML reporting for free.</p>
<h2 id="the-problem">The Problem</h2>
<p>Reading the <a href="http://www.scalatest.org/user_guide/property_based_testing">ScalaTest documentation for Property-Based Testing</a> left me a little baffled as to which classes to use as there didn’t seem to be a full example of a property-based specification in the documentation. This is quite unusual given the high quality of ScalaTest documentation.</p>
<h2 id="example">Example</h2>
<p>In any event <a href="https://github.com/oscarrenalias/scalacheck-cookbook/blob/master/markdown/scalacheck-integration.md">I managed to find a working example</a> and it turned out it was quite straightforward.</p>
<p>I thought I’d use a simple example in ScalaCheck and then discuss how to convert that example into ScalaTest’s property-based tests.</p>
<p>I’ve taken the example from the <a href="http://scalacheck.org/#quickstart">Quick Start section of the ScalaCheck website</a> (and fixed the broken property):</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Properties</span>
<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Prop</span>.<span class="fu">forAll</span>

<span class="kw">object</span> StringProp <span class="kw">extends</span> Properties(<span class="st">&quot;String&quot;</span>) {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) = forAll { (a: String, b: String) =&gt;
    (a+b).<span class="fu">startsWith</span>(a)
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) = forAll { (a: String, b: String) =&gt;
    (a+b).<span class="fu">length</span> &gt;= a.<span class="fu">length</span> &amp;&amp; (a+b).<span class="fu">length</span> &gt;= b.<span class="fu">length</span>
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) = forAll { (a: String, b: String, c: String) =&gt;
    (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) == b
  }
}</code></pre></div>
<p>You can run this by issuing a <strong>test</strong> command in SBT:</p>
<pre class="terminal scrollx"><code>[info] + String.substring: OK, passed 100 tests.
[info] + String.startsWith: OK, passed 100 tests.
[info] + String.concatenate: OK, passed 100 tests.</code></pre>
<p>Errors are displayed as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] ! String.<span class="fu">concatenate</span>: Falsified after <span class="dv">0</span> passed tests.
[info] &gt; ARG_0: <span class="st">&quot;&quot;</span>
[info] &gt; ARG_1: <span class="st">&quot;&quot;</span></code></pre></div>
<p>How can we convert the above property test into ScalaTest property test?</p>
<p>ScalaTest has two flavours of property-based testing:</p>
<ol style="list-style-type: decimal">
<li>The ScalaTest Style (Generator-Driven)</li>
<li>ScalaCheck Style</li>
</ol>
<p>Here are some guidelines on how to convert the above example to the ScalaTest style:</p>
<ol style="list-style-type: decimal">
<li>Extend PropSpec</li>
<li>Extend PropertyChecks</li>
<li>Extend Matchers (or other matching DSL)</li>
<li>Convert each property assignment to a property method</li>
<li>Convert each Boolean operation/Prop to a match</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalatest</span>.{Matchers, PropSpec}
<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">prop</span>.<span class="fu">PropertyChecks</span>

<span class="kw">final</span> <span class="kw">class</span> StringSpec <span class="kw">extends</span> PropSpec <span class="kw">with</span> PropertyChecks <span class="kw">with</span> Matchers {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) {
    forAll { (a: String, b: String) =&gt;
      (a+b) should <span class="fu">startWith</span> (a)
    }
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) {
    forAll { (a: String, b: String) =&gt;
      (a+b).<span class="fu">length</span> <span class="fu">should</span> (be &gt;= a.<span class="fu">length</span>)
      (a+b).<span class="fu">length</span> <span class="fu">should</span> (be &gt;= b.<span class="fu">length</span>)
    }
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) {
    forAll { (a: String, b: String, c: String) =&gt;
      (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) should <span class="fu">be</span> (b)
    }
  }
}</code></pre></div>
<p>Running the above gives us:</p>
<pre class="terminal scrollx"><code>[info] StringSpec:
[info] - startsWith
[info] - concatenate
[info] - substring</code></pre>
<p>Errors are displayed as:</p>
<pre class="terminal scrollx"><code>[info] - concatenate *** FAILED ***
[info]   TestFailedException was thrown during property evaluation.
[info]     Message: 0 was not greater than 0
[info]     Location: (StringSpec.scala:16)
[info]     Occurred when passed generated values (
[info]       arg0 = &quot;&quot;,
[info]       arg1 = &quot;&quot;
[info]     )</code></pre>
<p>In ScalaCheck any property that returns a Boolean is automatically converted into a Prop and then evaluated when executed. When using the ScalaTest flavour of property-based testing, you need to use matchers instead of Boolean properties.</p>
<p>Here are some guidelines on how to convert the example to the ScalaCheck style:</p>
<ol style="list-style-type: decimal">
<li>Extend PropSpec</li>
<li>Extend Checkers</li>
<li>Convert each property assignment to a property method</li>
<li>Wrap the outer forAll method call with the check method.</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Prop</span>

<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">PropSpec</span>
<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">prop</span>.<span class="fu">Checkers</span>

<span class="kw">final</span> <span class="kw">class</span> StringCheck <span class="kw">extends</span> PropSpec <span class="kw">with</span> Checkers {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String) =&gt;
      (a+b).<span class="fu">startsWith</span>(a)
    })
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String) =&gt;
      (a+b).<span class="fu">length</span> &gt;= a.<span class="fu">length</span> &amp;&amp; (a+b).<span class="fu">length</span> &gt;= b.<span class="fu">length</span>
    })
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String, c: String) =&gt;
      (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) == b
    })
  }
}</code></pre></div>
<p>Running the above gives us:</p>
<pre class="terminal scrollx"><code>[info] StringCheck:
[info] - startsWith
[info] - concatenate
[info] - substring</code></pre>
<p>Errors as displayed as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] StringCheck:
[info] - String.<span class="fu">startsWith</span>
[info] - concatenate *** FAILED ***
[info]   GeneratorDrivenPropertyCheckFailedException was thrown during property evaluation.
[info]    (StringCheck.<span class="fu">scala</span>:<span class="dv">17</span>)
[info]     Falsified after <span class="dv">0</span> successful property evaluations.
[info]     Location: (StringCheck.<span class="fu">scala</span>:<span class="dv">17</span>)
[info]     Occurred when passed generated <span class="fu">values</span> (
[info]       arg0 = <span class="st">&quot;&quot;</span>,
[info]       arg1 = <span class="st">&quot;&quot;</span>
[info]     )
[info] - substring</code></pre></div>
<p>As you can see, this style is much closer to the default ScalaCheck property style as properties can be left as Boolean expressions.</p>
<p>The digram below outlines the two different styles and some of the basic methods provided by each of the traits.</p>
<div class="figure">
<img src="/images/scalatest_scalacheck_summary_of_different_property-based_testing_styles.png" alt="Summary of the different property-based testing styles" />
<p class="caption">Summary of the different property-based testing styles</p>
</div>
<h2 id="html-output">HTML Output</h2>
<ol style="list-style-type: decimal">
<li>StringSpec has the following HTML output:</li>
</ol>
<div class="figure">
<img src="/images/scalacheck_scalatest_stringspec.jpg" alt="StringSpec" />
<p class="caption">StringSpec</p>
</div>
<ol start="2" style="list-style-type: decimal">
<li>StringCheck has the following HTML output:</li>
</ol>
<div class="figure">
<img src="/images/scalacheck_scalatest_stringcheck.jpg" alt="StringCheck" />
<p class="caption">StringCheck</p>
</div>
<p>The output is identical irrespective of the property-based style used.</p>
<h2 id="caveats-with-imports">Caveats with Imports</h2>
<p>If you use ScalaCheck version 0.13.x with ScalaTest 2.2.x you’ll run into an IncompatibleClassChangeError:</p>
<pre class="terminal scrollx"><code>[info] Exception encountered when attempting to run a suite with class name: org.scalatest.DeferredAbortedSuite *** ABORTED ***
[info]   java.lang.IncompatibleClassChangeError: Implementing class
[info]   at java.lang.ClassLoader.defineClass1(Native Method)
[info]   at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
[info]   at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
[info]   at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
[info]   at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
[info]   at java.net.URLClassLoader$1.run(URLClassLoader.java:368)
[info]   at java.net.URLClassLoader$1.run(URLClassLoader.java:362)
[info]   at java.security.AccessController.doPrivileged(Native Method)
[info]   at java.net.URLClassLoader.findClass(URLClassLoader.java:361)
[info]   at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
[info]   ...</code></pre>
<p>To solve this ensure that you use ScalaCheck version 0.12.x with ScalaTest 2.2.x</p>
<p>The examples use the following combination:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">libraryDependencies ++= Seq(
  <span class="st">&quot;org.scalatest&quot;</span>  %% <span class="st">&quot;scalatest&quot;</span>   % <span class="st">&quot;2.2.6&quot;</span>  % <span class="st">&quot;test&quot;</span>,
  <span class="st">&quot;org.scalacheck&quot;</span> %% <span class="st">&quot;scalacheck&quot;</span>  % <span class="st">&quot;1.12.5&quot;</span> % <span class="st">&quot;test&quot;</span>
)</code></pre></div>
<p>The full <a href="https://github.com/ssanj/scalacheck-on-scalatest">source</a> can be found on Github.</p>]]></description>
    <pubDate>Wed, 06 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-07-06-how-to-run-scalacheck-from-scalatest-and-generate-html-reports.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Scalaz Try Operations</title>
    <link>http://blog.ssanj.net/posts/2016-06-28-scalaz-try-operations.html</link>
    <description><![CDATA[<p>If you are looking to use scalaz to get some additional functionality for your vanilla <code>scala.util.Try</code> class, then you’ve got a couple of options. This can be confusing at first because you might not know which import to use.</p>
<h2 id="functions-that-accept-a-try-instance">1. Functions that accept a Try instance</h2>
<p>To import only functions that must be supplied a Try instance use:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">std</span>.`try`.<span class="fu">_</span></code></pre></div>
<p>This will give you functions of the form:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> cata[A, B](t: Try[A])(success: A =&gt; B, failure: Throwable =&gt; B): B

<span class="kw">def</span> toDisjunction[A](t: Try[A]): Throwable \/ A

<span class="kw">def</span> fromDisjunction[T &lt;: Throwable, A](d: T \/ A): Try[A]

<span class="kw">def</span> toValidation[A](t: Try[A]): Validation[Throwable, A]

<span class="kw">def</span> toValidationNel[A](t: Try[A]) : ValidationNel[Throwable, A]

<span class="kw">def</span> fromValidation[T &lt;: Throwable, A](v: Validation[T, A]) : Try[A]</code></pre></div>
<p>Example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">cata</span>(<span class="fu">Try</span>(..))(..)</code></pre></div>
<h2 id="functions-that-are-added-to-your-try-instance">2. Functions that are added to your Try instance</h2>
<p>To get a pimped up version of Try use:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">syntax</span>.<span class="fu">std</span>.`try`.<span class="fu">_</span></code></pre></div>
<p>This will give you functions directly on your Try instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">def</span> cata[B](success: A =&gt; B, failure: Throwable =&gt; B): B

<span class="kw">final</span> <span class="kw">def</span> toDisjunction: Throwable \/ A

<span class="kw">final</span> <span class="kw">def</span> toValidation: Validation[Throwable, A]

<span class="kw">final</span> <span class="kw">def</span> toValidationNel: ValidationNel[Throwable, A]</code></pre></div>
<p>Example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">Try</span>(..).<span class="fu">cata</span>(..)</code></pre></div>]]></description>
    <pubDate>Tue, 28 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-06-28-scalaz-try-operations.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Property-based Testing Patterns</title>
    <link>http://blog.ssanj.net/posts/2016-06-26-property-based-testing-patterns.html</link>
    <description><![CDATA[<p>In his <a href="http://lambdajam.yowconference.com.au/archive-2015/">LambdaJam 2015</a> presentation on <a href="http://blog.charleso.org/property-testing-preso/yowlj2015.html#1">How I learned to stop unit testing and love property-based testing</a>, <a href="https://twitter.com/charlesofarrell">Charles O’Farrell</a> covers some standard patterns you should use with property-based testing. These patterns turned out to be somewhat of a guiding light for me when writing property-based tests with <a href="https://www.scalacheck.org/">Scalacheck</a>.</p>
<p>I found some of the names of the patterns hard to remember so I’ve renamed them below to make it easier for me to recall the pattern they refer to. I’ve also included the alternate names each pattern is referred to by, so feel free to learn the name that most resonates with you. The images used are from the <a href="http://fsharpforfunandprofit.com/">F# for fun and profit</a> (FFP) blog and is where most of these patterns originate from.</p>
<h2 id="round-trippingsymmetrythere-and-back-again">1. Round-tripping/Symmetry/There and back again</h2>
<p>The basic premise is that you convert some value to another value and then convert it back to the original value. Serialization is a typical example. Parsing text to an object and then writing out the object back to the original text would be another.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_round_tripping.png" alt="Round-tripping" />
<p class="caption">Round-tripping</p>
</div>
<p>One thing to keep in mind is that the conversions can’t be lossy. If you loose information one way, then you can’t introduce it back when going the other way.</p>
<p>For example if you are trimming spaces in some text before converting it to an object, when converting back from the object, you will not know whether there were extra spaces in the input or not.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Name(value: String)
<span class="kw">val</span> input = <span class="st">&quot; Tom Jones &quot;</span>
Name(input.<span class="fu">trim</span>).<span class="fu">value</span> == input <span class="co">//fails</span></code></pre></div>
<p>One way to get around this is to always convert the input to a form that does not lose any information when converted back from the previous output. In the above example it could be that you trim the input text when checking for equality. That way you never have to worry about reintroducing spaces. This could lead to some false assumptions though.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> input = <span class="st">&quot; Tom Jones &quot;</span>
Name(input.<span class="fu">trim</span>).<span class="fu">value</span> == input.<span class="fu">trim</span> <span class="co">//passes</span></code></pre></div>
<h2 id="commutativitydifferent-paths-same-destination">2. Commutativity/Different paths, same destination</h2>
<p>The basic premise is that changing the order of some operations should not change the final result.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_commutativity.png" alt="Commutativity" />
<p class="caption">Commutativity</p>
</div>
<p>An example would be adding the same value to every element of a List and then sorting it should be the same as sorting the list and then adding the value to each element.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">numbers.<span class="fu">sorted</span>.<span class="fu">map</span>(_ + <span class="dv">10</span>) == numbers.<span class="fu">map</span>(_ + <span class="dv">10</span>).<span class="fu">sorted</span></code></pre></div>
<h2 id="invariantssome-things-never-change">3. Invariants/Some things never change</h2>
<p>The basic premise is that with these properties, performing some kind of operation does not change a given property of the test subject.</p>
<p>Common invariants include:</p>
<ol style="list-style-type: decimal">
<li>The size of a list should not change after a map operation.</li>
<li>The contents of a list should not change after a sort operation.</li>
<li>The height or depth of something in proportion to size (eg. after balancing trees).</li>
</ol>
<div class="figure">
<img src="/images/property_based_testing_patterns_invariant.png" alt="Invariants" />
<p class="caption">Invariants</p>
</div>
<h2 id="idempotencethe-more-things-change-the-more-they-stay-the-same">4. Idempotence/The more things change, the more they stay the same</h2>
<p>Basically performing an operation once should be the same as performing an operation twice. An example would be sorting a list more than once should be the same as sorting the list once.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_idempotence.png" alt="Idempotence" />
<p class="caption">Idempotence</p>
</div>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">numbers.<span class="fu">sorted</span> == numbers.<span class="fu">sorted</span>.<span class="fu">sorted</span>.<span class="fu">sorted</span></code></pre></div>
<h2 id="inductionsolve-a-smaller-problem-first">5. Induction/Solve a smaller problem first</h2>
<p>FFP explains it as:</p>
<blockquote>
<p>These kinds of properties are based on “structural induction” – that is, if a large thing can be broken into smaller parts, and some property is true for these smaller parts, then you can often prove that the property is true for a large thing as well.</p>
</blockquote>
<blockquote>
<p>In the diagram below, we can see that the four-item list can be partitioned into an item plus a three-item list, which in turn can be partitioned into an item plus a two-item list. If we can prove the property holds for two-item list, then we can infer that it holds for the three-item list, and for the four-item list as well.</p>
</blockquote>
<blockquote>
<p>Induction properties are often naturally applicable to recursive structures (such as lists and trees).</p>
</blockquote>
<div class="figure">
<img src="/images/property_based_testing_patterns_induction.png" alt="Induction" />
<p class="caption">Induction</p>
</div>
<h2 id="blackbox-testinghard-to-prove-easy-to-verify">6. Blackbox Testing/Hard to prove, easy to verify</h2>
<p>These are properties that are hard to compute but easy to verify. An example would be calculating the nth prime number. It’s easy to verify the answer if you already know the nth prime. In the example below, finding a valid route through a maze is hard - verifying it is easy.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_blackbox_testing.png" alt="Blackbox Testing" />
<p class="caption">Blackbox Testing</p>
</div>
<h2 id="comparison-with-another-implementationtest-oracle">7. Comparison with another implementation/Test Oracle</h2>
<p>The premise is that you verify your property by running the same test against another implementation of the algorithm. An example is to compare the result of a parallel or concurrent algorithm with the result of a linear, single-threaded version. Another example could be verifying your shiny new json parser against an existing parser implementation for the same inputs.</p>
<h2 id="something-to-keep-in-mind">Something to keep in mind</h2>
<p>In addition to the above patterns, the properties you choose should actually fail if there are errors. This sounds too obvious to be mentioned but here’s an example that should fail but doesn’t:</p>
<p>Given a sort implementation for a list that returns the original list unchanged:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">list.<span class="fu">sort</span> == list.<span class="fu">sort</span>.<span class="fu">sort</span>
list.<span class="fu">sort</span>.<span class="fu">length</span> == list.<span class="fu">length</span></code></pre></div>
<p>The above properties pass.</p>
<p>The following property correctly fails the above implementation because it ensures that each element in the list should be greater than or equal to the preceding element:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">list.<span class="fu">sort</span>.<span class="fu">sliding</span>(<span class="dv">2</span>).<span class="fu">toList</span>.<span class="fu">forall</span> { <span class="kw">case</span> List(f, s) =&gt; f &lt;= s }</code></pre></div>
<p>Property-based testing requires that you think a lot more about your code. You need to identify the properties that are true and false for it. The result is a lot more confidence in your code than had you just unit tested it.</p>
<p>Some additional resources:</p>
<ul>
<li><a href="https://yow.eventer.com/yow-lambda-jam-2015-1305/practical-property-based-testing-by-charles-o-farrell-1884">Practical Property-Based Testing - Charles O’Farrell</a></li>
<li><a href="http://functional.tv/post/97738967579/scala-by-the-bay-2014-i-dream-of-genning-scalacheck-beyo">I Dream of Genning ScalaCheck Beyond the Basics - Kelsey Gilmore-Innis</a></li>
<li><a href="http://fsharpforfunandprofit.com/posts/property-based-testing">An Introduction to Property-Based Testing - FFP</a></li>
<li><a href="http://fsharpforfunandprofit.com/posts/property-based-testing-2">Choosing properties for Property-Based Testing - FFP</a></li>
<li><a href="http://research.microsoft.com/en-us/projects/pex/patterns.pdf">Testing patterns</a></li>
<li><a href="http://www.infoq.com/presentations/testing-techniques-case-study">Testing the Hard Stuff and Staying Sane - John Hughes</a></li>
</ul>]]></description>
    <pubDate>Sun, 26 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-06-26-property-based-testing-patterns.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Information Sated</title>
    <link>http://blog.ssanj.net/posts/2016-04-19-information-sated.html</link>
    <description><![CDATA[<p>I have a compulsion to read as many articles or to gather as much information as I can. I speed read through the current article because there are many more waiting to be read. Along the way I miss the point completely. I don’t enjoy the act of reading. Neither do I contemplate deeply the content I do read. I just file anything of interest in a todo list and never look at it again. Then I’m off again, collecting information instead of seeking knowledge.</p>
<p>More recently I’ve decided to stop overindulging in information. I’ve decided to read a very few articles a week. I read them slowly, and thoughtfully. I try to ponder about any questions raised. I try to incorporate any good habits into my daily routine. The end result has been very enjoyable. I no longer have the need to rush to the next article or titbit of information. I am information sated.</p>]]></description>
    <pubDate>Tue, 19 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-19-information-sated.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Dash Version</title>
    <link>http://blog.ssanj.net/posts/2016-04-19-dash-version.html</link>
    <description><![CDATA[<p>One of the most irksome aspects of installing a new JDK or JRE is navigating the Oracle download site. Yurg! It’s always been confusing and user-non-friendly. Another annoying aspect is that, the Java updater shows up at the most inconvenient times. Mostly this just means that you don’t update at the point there is a new JDK. A few weeks later you wonder how many versions behind you are.</p>
<p>To solve these problems, I created <a href="http://java.dashversion.com">Java Dash Version</a>. The name is a play on <strong>java -version</strong>, which displays the version of your installed JDK. It provides the following features:</p>
<ol style="list-style-type: decimal">
<li>Simple page displaying the latest version of the Oracle JDK.</li>
<li>A download link that takes you straight to the download page. No more faffing around looking for the downloads page.</li>
<li>A link to the release notes. It currently supports public and BPR (Bundled Patch Release) versions.</li>
<li>A <a href="http://java.dashversion.com/api">REST API</a> to return the latest version.</li>
</ol>
<div class="figure">
<img src="/images/java-dash-version-com.png" alt="Showing the latest Java Version" />
<p class="caption">Showing the latest Java Version</p>
</div>
<p>Example json payload:</p>
<div class="sourceCode"><pre class="sourceCode json scrollx"><code class="sourceCode json"><span class="fu">{</span><span class="dt">&quot;versions&quot;</span><span class="fu">:</span><span class="ot">[</span><span class="fu">{</span><span class="dt">&quot;version_number&quot;</span><span class="fu">:</span><span class="st">&quot;77&quot;</span><span class="fu">,</span><span class="dt">&quot;version_string&quot;</span><span class="fu">:</span><span class="st">&quot;1.8.0_77&quot;</span><span class="fu">,</span><span class="dt">&quot;download_url&quot;</span><span class="fu">:</span><span class="st">&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;</span><span class="fu">}</span><span class="ot">]</span><span class="fu">}</span></code></pre></div>
<p>In addition on Mac OSX, I have a <a href="https://getbitbar.com">Bitbar</a> <a href="https://getbitbar.com/plugins/Dev/Java/java_version.12h.py">Java plugin</a> that displays the your currently installed Java version and allows you to click-through to the latest version on Dash Version.</p>
<div class="figure">
<img src="/images/bitbar-java-dash-version-plugin.jpg" alt="Bitbar Java Plugin" />
<p class="caption">Bitbar Java Plugin</p>
</div>
<p>While I currently only support Java, in the future I plan to support additional languages and frameworks. My hope is that <a href="http://java.dashversion.com">Dash Version</a> will become your first port-of-call to find out the latest version of any language or framework.</p>
<div class="figure">
<img src="/images/dash-version-com.png" alt="Only Java is Currently Supported" />
<p class="caption">Only Java is Currently Supported</p>
</div>
<p>Give it a whirl and let me know what you think.</p>]]></description>
    <pubDate>Tue, 19 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-19-dash-version.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Twitter in Small Doses</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-twitter-in-small-doses.html</link>
    <description><![CDATA[<p>I’ve been guilty of checking Twitter almost habitually at every free moment. It’s like I expect something new and interesting to be happen every five minutes - it doesn’t.</p>
<p>Recently I tried limiting my Twitter exposure to set times during the day: once in the morning, once at lunch and once after work. I found that this really reduced the mental stress of constantly processing mostly useless information on Twitter. It also helped me to focus more on the few tweets I did care about and respond to them thoughtfully, instead of replying with smart-arse comments. Another benefit was that <a href="http://sanj.ink/posts/2014-09-14-do-less-achieve-more.html">I was able to concentrate deeper on the actual work</a> I had to do because I wasn’t constantly context-switching with Twitter.</p>
<p>It became clear that nothing happening on Twitter is all that important. This again made it much easier to stay way from it.</p>
<p>If you are habitually checking Twitter or some other form of social media, try and give yourself a schedule of when you can check for updates. You’ll soon realise that while these mediums maybe useful sometimes, more often than not, they are a complete waste of time.</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-twitter-in-small-doses.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Everyday Escapism</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-everyday-escapism.html</link>
    <description><![CDATA[<p>I recently read <a href="https://medium.com/the-coffeelicious/reading-fiction-as-meditation-9a6bb42d9f82#.u6elxf69u">Reading Fiction as Meditation</a>. It spoke about escapism - escaping from your daily grind and giving your mind a break. It got me thinking about other things that could give you the same effect. Here’s an interesting quote from the article:</p>
<blockquote>
<p>I’ve seen too much online about “how to read more quickly.” Bollocks. It’s not a competition. It’s relaxation: an act of escapism. I mean, who goes to a cinema and asks them to put the film on fast forward with subtitles so they can watch it faster?</p>
</blockquote>
<p>I came up with the following list of mundane tasks that could provide you with that daily dose of escapism - if you let it. And what I mean by that is that you have to only focus on the task and cut out all other distractions like watching TV, reading Twitter, listening to a podcast etc while doing these tasks.</p>
<ul>
<li>Ironing your clothes</li>
<li>Washing the dishes</li>
<li>Cooking a meal (frozen dinners do not count as cooking!)</li>
<li>Going for a walk</li>
<li>Cleaning (your house, car etc)</li>
<li>Sketching in a journal</li>
<li>Playing an instrument</li>
<li>Playing with your children</li>
<li>Having a relaxing brew</li>
<li>Having a cat nap</li>
</ul>
<p>What others can you think of?</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-everyday-escapism.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Be Thankful for the Gift of Life</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-be-thankful-for-the-gift-of-life.html</link>
    <description><![CDATA[<p>It’s easy to complain. It’s easy to think your life is really hard. It isn’t. It could be so much worse.</p>
<p>You could have cancer. You could be homeless. You could have lost one or more of your senses. You could be unemployed. You could be depressed. You could be an addict. You could live in a war zone. You could be dead. Chances are, you could be worse off in a lot of ways than you are now.</p>
<p>Your life is good. It’s a gift. Be thankful. Enjoy it.</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-be-thankful-for-the-gift-of-life.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Automatically Insert Scala Package with Scoggle</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-automatically-insert-scala-package-with-scoggle.html</link>
    <description><![CDATA[<p>When using Sublime Text for Scala development I found myself constantly hand-crafting the package path of every Scala file I created. While this was annoying, once I spent the two seconds to convert the file path to a dotted path and type it in, I completely forgot about it - until the next time.</p>
<p>Sometime last week I started wondering if I could use the <a href="https://github.com/ssanj/Scoggle">Scoggle</a> code base to implement this new functionality. I knew I had all the necessary information to make this possible in Scoggle, but thought it belonged in its own Sublime plugin.</p>
<p>A couple of days ago, I decided to simply add it into Scoggle as a supplementary feature. The results have been great! I no longer have to hand-craft package paths! Have a look at it in action below.</p>
<div class="figure">
<img src="/images/scoggle_sublime_text_plugin_insert_package.gif" alt="Inserting a package through Scoggle" />
<p class="caption">Inserting a package through Scoggle</p>
</div>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-automatically-insert-scala-package-with-scoggle.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

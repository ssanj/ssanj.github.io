<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 16 Oct 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Output in Scala REPL is Truncated</title>
    <link>http://blog.ssanj.net/posts/2016-10-16-output-in-scala-repl-is-truncated.html</link>
    <description><![CDATA[<p>The scala REPL truncates long output that exceeds a certain set limit. Take the example below of displaying the members of a Traversable:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">ru.<span class="fu">typeOf</span>[Traversable[_]].<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res46: String =
<span class="kw">override</span> <span class="kw">def</span> seq: Traversable[A]
<span class="kw">override</span> <span class="kw">def</span> companion: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">GenericCompanion</span>[Traversable]
<span class="kw">def</span> $init$(): Unit
<span class="kw">def</span> transpose[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[CC[B] @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> flatten[B &lt;: &lt;?&gt;](<span class="kw">implicit</span> asTraversable: &lt;?&gt;): CC[B]
<span class="kw">def</span> unzip3[A1 &lt;: &lt;?&gt;, A2 &lt;: &lt;?&gt;, A3 &lt;: &lt;?&gt;](<span class="kw">implicit</span> asTriple: &lt;?&gt;): (CC[A1], CC[A2], CC[A3])
<span class="kw">def</span> unzip[A1 &lt;: &lt;?&gt;, A2 &lt;: &lt;?&gt;](<span class="kw">implicit</span> asPair: &lt;?&gt;): (CC[A1], CC[A2])
<span class="kw">def</span> genericBuilder[B &lt;: &lt;?&gt;]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[B,CC[B]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> newBuilder: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[A,CC[A]]
<span class="kw">class</span> WithFilter <span class="kw">extends</span> FilterMonadic[A,Repr]
<span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">FilterMonadic</span>[A,Repr]
<span class="kw">def</span> <span class="fu">view</span>(f...</code></pre></div>
<p>The method list of Traversable has been truncated. How do we go about increasing this limit?</p>
<p>We can find out the <a href="http://stackoverflow.com/questions/9516567/settings-maxprintstring-for-scala-2-9-repl">current maximum printable String length</a> by going into <strong>:power</strong> mode and then accessing the <strong>vals.isettings</strong> variable:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">:power
vals.<span class="fu">isettings</span>

res50: scala.<span class="fu">tools</span>.<span class="fu">nsc</span>.<span class="fu">interpreter</span>.<span class="fu">ISettings</span> =

 ISettings {
   deprecation = <span class="kw">false</span>
  maxAutoprintCompletion = <span class="dv">250</span>
  maxPrintString = <span class="dv">800</span>
  unwrapStrings = <span class="kw">true</span>

 }</code></pre></div>
<p>The <strong>maxPrintString</strong> setting is at 800 characters. This means that any output over 800 characters is truncated within the REPL. To increase this limit, simply set a new <strong>maxPrintString</strong> value:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">vals.<span class="fu">isettings</span>.<span class="fu">maxPrintString</span> = Int.<span class="fu">MaxValue</span>
vals.<span class="fu">isettings</span>.<span class="fu">maxPrintString</span>: Int = <span class="dv">2147483647</span>

vals.<span class="fu">isettings</span>
res51: scala.<span class="fu">tools</span>.<span class="fu">nsc</span>.<span class="fu">interpreter</span>.<span class="fu">ISettings</span> =

 ISettings {
   deprecation = <span class="kw">false</span>
  maxAutoprintCompletion = <span class="dv">250</span>
  maxPrintString = <span class="dv">2147483647</span>
  unwrapStrings = <span class="kw">true</span>

 }</code></pre></div>
<p>Now if we interrogate the members of Traversable again, we get the full list:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; ru.<span class="fu">typeOf</span>[Traversable[_]].<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res53: String =
<span class="kw">override</span> <span class="kw">def</span> seq: Traversable[A]
<span class="kw">override</span> <span class="kw">def</span> companion: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">GenericCompanion</span>[Traversable]
<span class="kw">def</span> $init$(): Unit
<span class="kw">def</span> transpose[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[CC[B] @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> flatten[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[B]
<span class="kw">def</span> unzip3[A1, A2, A3](<span class="kw">implicit</span> asTriple: A =&gt; (A1, A2, A3)): (CC[A1], CC[A2], CC[A3])
<span class="kw">def</span> unzip[A1, A2](<span class="kw">implicit</span> asPair: A =&gt; (A1, A2)): (CC[A1], CC[A2])
<span class="kw">def</span> genericBuilder[B]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[B,CC[B]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> newBuilder: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[A,CC[A]]
<span class="kw">class</span> WithFilter <span class="kw">extends</span> FilterMonadic[A,Repr]
<span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">FilterMonadic</span>[A,Repr]
<span class="kw">def</span> <span class="fu">view</span>(from: Int,until: Int): scala.<span class="fu">collection</span>.<span class="fu">TraversableView</span>[A,Repr]
<span class="kw">def</span> view: scala.<span class="fu">collection</span>.<span class="fu">TraversableView</span>[A,Repr]
<span class="kw">def</span> stringPrefix: String
<span class="kw">override</span> <span class="kw">def</span> <span class="fu">toString</span>(): String
<span class="kw">override</span> <span class="kw">def</span> to[Col[_]](<span class="kw">implicit</span> cbf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Nothing,A,Col[A @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]]): Col[A @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> toStream: Stream[A]
<span class="kw">def</span> toIterator: Iterator[A]
<span class="kw">def</span> toTraversable: Traversable[A]
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B],start: Int,len: Int): Unit
<span class="kw">def</span> inits: Iterator[Repr]
<span class="kw">def</span> tails: Iterator[Repr]
<span class="kw">def</span> <span class="fu">splitAt</span>(n: Int): (Repr, Repr)
<span class="kw">def</span> <span class="fu">span</span>(p: A =&gt; Boolean): (Repr, Repr)
<span class="kw">def</span> <span class="fu">dropWhile</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> <span class="fu">takeWhile</span>(p: A =&gt; Boolean): Repr
<span class="kw">private</span>[<span class="kw">package</span> scala] <span class="kw">def</span> <span class="fu">sliceWithKnownBound</span>(from: Int,until: Int): Repr
<span class="kw">private</span>[<span class="kw">package</span> scala] <span class="kw">def</span> <span class="fu">sliceWithKnownDelta</span>(from: Int,until: Int,delta: Int): Repr
<span class="kw">def</span> <span class="fu">slice</span>(from: Int,until: Int): Repr
<span class="kw">def</span> <span class="fu">drop</span>(n: Int): Repr
<span class="kw">def</span> <span class="fu">take</span>(n: Int): Repr
<span class="kw">def</span> init: Repr
<span class="kw">def</span> lastOption: Option[A]
<span class="kw">def</span> last: A
<span class="kw">override</span> <span class="kw">def</span> tail: Repr
<span class="kw">def</span> headOption: Option[A]
<span class="kw">def</span> head: A
<span class="kw">def</span> scanRight[B, That](z: B)(op: (A, B) =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> scanLeft[B, That](z: B)(op: (B, A) =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> scan[B &gt;: A, That](z: B)(op: (B, B) =&gt; B)(<span class="kw">implicit</span> cbf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> <span class="fu">find</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">def</span> <span class="fu">exists</span>(p: A =&gt; Boolean): Boolean
<span class="kw">def</span> <span class="fu">forall</span>(p: A =&gt; Boolean): Boolean
<span class="kw">def</span> groupBy[K](f: A =&gt; K): scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Map</span>[K,Repr]
<span class="kw">def</span> <span class="fu">partition</span>(p: A =&gt; Boolean): (Repr, Repr)
<span class="kw">def</span> collect[B, That](pf: PartialFunction[A,B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> <span class="fu">filterNot</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> <span class="fu">filter</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> flatMap[B, That](f: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> map[B, That](f: A =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++:[B &gt;: A, That](that: Traversable[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++:[B &gt;: A, That](that: scala.<span class="fu">collection</span>.<span class="fu">TraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++[B &gt;: A, That](that: scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> hasDefiniteSize: Boolean
<span class="kw">def</span> isEmpty: Boolean
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> parCombiner: scala.<span class="fu">collection</span>.<span class="fu">parallel</span>.<span class="fu">Combiner</span>[A,scala.<span class="fu">collection</span>.<span class="fu">parallel</span>.<span class="fu">ParIterable</span>[A]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> <span class="fu">toCollection</span>(repr: Repr): Traversable[A]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> thisCollection: Traversable[A]
<span class="kw">final</span> <span class="kw">def</span> isTraversableAgain: Boolean
<span class="kw">def</span> repr: Repr
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">type</span> Self = Repr
<span class="kw">def</span> par: ParRepr
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder): StringBuilder
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder,sep: String): StringBuilder
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder,start: String,sep: String,end: String): StringBuilder
<span class="kw">def</span> mkString: String
<span class="kw">def</span> <span class="fu">mkString</span>(sep: String): String
<span class="kw">def</span> <span class="fu">mkString</span>(start: String,sep: String,end: String): String
<span class="kw">def</span> toMap[T, U](<span class="kw">implicit</span> ev: &lt;:&lt;[A,(T, U)]): scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Map</span>[T,U]
<span class="kw">def</span> toVector: Vector[A]
<span class="kw">def</span> toSet[B &gt;: A]: scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Set</span>[B]
<span class="kw">def</span> toBuffer[B &gt;: A]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Buffer</span>[B]
<span class="kw">def</span> toIndexedSeq: scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">IndexedSeq</span>[A]
<span class="kw">def</span> toSeq: Seq[A]
<span class="kw">def</span> toIterable: Iterable[A]
<span class="kw">def</span> toList: List[A]
<span class="kw">def</span> toArray[B &gt;: A](<span class="kw">implicit</span> evidence$<span class="dv">1</span>: scala.<span class="fu">reflect</span>.<span class="fu">ClassTag</span>[B]): Array[B]
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B]): Unit
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B],start: Int): Unit
<span class="kw">def</span> copyToBuffer[B &gt;: A](dest: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Buffer</span>[B]): Unit
<span class="kw">def</span> minBy[B](f: A =&gt; B)(<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> maxBy[B](f: A =&gt; B)(<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> max[B &gt;: A](<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> min[B &gt;: A](<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> product[B &gt;: A](<span class="kw">implicit</span> num: Numeric[B]): B
<span class="kw">def</span> sum[B &gt;: A](<span class="kw">implicit</span> num: Numeric[B]): B
<span class="kw">def</span> aggregate[B](z: =&gt; B)(seqop: (B, A) =&gt; B,combop: (B, B) =&gt; B): B
<span class="kw">def</span> fold[A1 &gt;: A](z: A1)(op: (A1, A1) =&gt; A1): A1
<span class="kw">def</span> reduceOption[A1 &gt;: A](op: (A1, A1) =&gt; A1): Option[A1]
<span class="kw">def</span> reduce[A1 &gt;: A](op: (A1, A1) =&gt; A1): A1
<span class="kw">def</span> reduceRightOption[B &gt;: A](op: (A, B) =&gt; B): Option[B]
<span class="kw">def</span> reduceLeftOption[B &gt;: A](op: (B, A) =&gt; B): Option[B]
<span class="kw">def</span> reduceRight[B &gt;: A](op: (A, B) =&gt; B): B
<span class="kw">def</span> reduceLeft[B &gt;: A](op: (B, A) =&gt; B): B
<span class="kw">def</span> foldRight[B](z: B)(op: (A, B) =&gt; B): B
<span class="kw">def</span> foldLeft[B](z: B)(op: (B, A) =&gt; B): B
<span class="kw">def</span> :\[B](z: B)(op: (A, B) =&gt; B): B
<span class="kw">def</span> /:[B](z: B)(op: (B, A) =&gt; B): B
<span class="kw">def</span> collectFirst[B](pf: PartialFunction[A,B]): Option[B]
<span class="kw">def</span> <span class="fu">count</span>(p: A =&gt; Boolean): Int
<span class="kw">def</span> nonEmpty: Boolean
<span class="kw">def</span> size: Int
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> reversed: List[A]
<span class="kw">final</span> <span class="kw">def</span> $asInstanceOf[T0](): T0
<span class="kw">final</span> <span class="kw">def</span> $isInstanceOf[T0](): Boolean
<span class="kw">final</span> <span class="kw">def</span> synchronized[T0](x$<span class="dv">1</span>: T0): T0
<span class="kw">final</span> <span class="kw">def</span> ##(): Int
<span class="kw">final</span> <span class="kw">def</span> !=(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> ==(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">ne</span>(x$<span class="dv">1</span>: AnyRef): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">eq</span>(x$<span class="dv">1</span>: AnyRef): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">notifyAll</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">notify</span>(): Unit
<span class="kw">protected</span>[<span class="kw">package</span> lang] <span class="kw">def</span> <span class="fu">clone</span>(): Object
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">getClass</span>(): Class[_]
<span class="kw">def</span> <span class="fu">hashCode</span>(): Int
<span class="kw">def</span> <span class="fu">equals</span>(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(x$<span class="dv">1</span>: Long): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(x$<span class="dv">1</span>: Long,x$<span class="dv">2</span>: Int): Unit
<span class="kw">protected</span>[<span class="kw">package</span> lang] <span class="kw">def</span> <span class="fu">finalize</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> asInstanceOf[T0]: T0
<span class="kw">final</span> <span class="kw">def</span> isInstanceOf[T0]: Boolean
<span class="kw">def</span> foreach[U](f: A =&gt; U): Unit</code></pre></div>
<p>An alternative is to set the <strong>scala.repl.maxprintstring</strong> JVM parameter externally when invoking the scala REPL:</p>
<pre class="command scrollx"><code>scala -Dscala.repl.maxprintstring=64000</code></pre>]]></description>
    <pubDate>Sun, 16 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-10-16-output-in-scala-repl-is-truncated.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Start Using the Scala Reflection Api</title>
    <link>http://blog.ssanj.net/posts/2016-10-15-how-to-start-using-the-scala-reflection-api.html</link>
    <description><![CDATA[<p>I’ve found learning the <a href="http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html#scala.reflect.api.package">scala reflection API</a> somewhat confusing. Having used Java reflection pretty easily back in the day, the Scala api seemed somewhat foreign.</p>
<p>So let’s start with a simple exercise to learn how to use the api.</p>
<h1 id="a-simple-exercise">A Simple Exercise</h1>
<p>How would we go about using the scala reflection api to find out what methods are declared on a type?</p>
<h2 id="import-the-reflection-universe">1. Import the reflection universe</h2>
<p>First, you need to import the reflection runtime universe:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">reflect</span>.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">_</span></code></pre></div>
<p>Most methods on the reflection api are centred around a <strong>Type</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span></code></pre></div>
<p><em>I’ll refer to Type as universe.Type from now on, to distinguish it from a normal type</em>.</p>
<h2 id="get-the-universe.type">2. Get the universe.Type</h2>
<p>To get the universe.Type of a type, you can use the <strong>typeOf</strong> api method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">typeOf[Option[_]]
res1: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = scala.<span class="fu">Option</span>[_]</code></pre></div>
<h2 id="get-the-declared-methods">3. Get the declared methods</h2>
<p>Now that we have a universe.Type for our type, we can get the methods defined on it by using the <strong>decls</strong> method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res1.<span class="fu">decls</span>
res9: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">MemberScope</span> = <span class="fu">SynchronizedOps</span>(constructor Option, method isEmpty, method isDefined, method get, method getOrElse, method orNull, method map, method fold, method flatMap, method flatten, method filter, method filterNot, method nonEmpty, method withFilter, <span class="kw">class</span> WithFilter, method contains, method exists, method forall, method foreach, method collect, method orElse, method iterator, method toList, method toRight, method toLeft)</code></pre></div>
<p>You might notice that <strong>decls</strong> returns a <strong>MemberScope</strong>. What’s that? It’s handy to realise that a <strong>MemberScope</strong> is a <strong>Traversable</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res9.<span class="fu">isInstanceOf</span>[Traversable[_]]
res12: Boolean = <span class="kw">true</span></code></pre></div>
<p>You can use the <a href="http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.collection.Traversable">methods available on any Traversable</a> instance to process the MemberScope.</p>
<p>For instance, we could easily format the list of method declarations like so:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res1.<span class="fu">decls</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res11: String =
<span class="kw">def</span> &lt;init&gt;(): Option[A]
<span class="kw">def</span> isEmpty: Boolean
<span class="kw">def</span> isDefined: Boolean
<span class="kw">def</span> get: A
<span class="kw">final</span> <span class="kw">def</span> getOrElse[B &gt;: A](default: =&gt; B): B
<span class="kw">final</span> <span class="kw">def</span> orNull[A1 &gt;: A](<span class="kw">implicit</span> ev: &lt;:&lt;[Null,A1]): A1
<span class="kw">final</span> <span class="kw">def</span> map[B](f: A =&gt; B): Option[B]
<span class="kw">final</span> <span class="kw">def</span> fold[B](ifEmpty: =&gt; B)(f: A =&gt; B): B
<span class="kw">final</span> <span class="kw">def</span> flatMap[B](f: A =&gt; Option[B]): Option[B]
<span class="kw">def</span> flatten[B &lt;: &lt;?&gt;](<span class="kw">implicit</span> ev: &lt;?&gt;): Option[B]
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">filter</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">filterNot</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">final</span> <span class="kw">def</span> nonEmpty: Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): Option.<span class="fu">this</span>.<span class="fu">WithFilter</span>
<span class="kw">class</span> WithFilter <span class="kw">extends</span> AnyRef
<span class="kw">final</span> <span class="kw">def</span> contains[A1 &lt;: &lt;?&gt;](elem: &lt;?&gt;): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">exists</span>(p: A =&gt; Boolean): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">forall</span>(p: A =&gt; Boolean): Boolean
<span class="kw">final</span> <span class="kw">def</span> foreach[U](f: A =&gt; U): Unit
<span class="kw">final</span> <span class="kw">def</span> collect[B](pf: PartialFunction[A,B]): Option[B]
<span class="kw">final</span> <span class="kw">def</span> orElse[B &gt;: A](alternative: =&gt; Option[B]): Option[B]
<span class="kw">def</span> iterator: Iterator[A]
<span class="kw">def</span> toList: List[A]
<span class="kw">final</span> <span class="kw">def</span> toRight[X](left: =&gt; X): Product <span class="kw">with</span> Serializable <span class="kw">with</span> scala.<span class="fu">util</span>.<span class="fu">Either</span>[X,A]
<span class="kw">final</span> <span class="kw">def</span> toLeft[X](right: =&gt; X): Product <span class="kw">with</span> Serializable <span class="kw">with</span> scala.<span class="fu">util</span>.<span class="fu">Either</span>[A,X]</code></pre></div>
<h1 id="other-useful-methods">Other useful methods</h1>
<p>Let’s use the reflection api to figure out what other methods are available on universe.Type. We use the <strong>members</strong> method to list methods defined either directly or indirectly on universe.Type:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">typeOf[Type]
res5: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = scala.<span class="fu">reflect</span>.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span>

res5.<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res7: String =
<span class="kw">final</span> <span class="kw">def</span> ##(): Int
<span class="kw">def</span> <span class="fu">contains</span>(sym: &lt;?&gt;): Boolean
<span class="kw">def</span> <span class="fu">exists</span>(p: &lt;?&gt;): Boolean
<span class="kw">def</span> <span class="fu">find</span>(p: &lt;?&gt;): Option[Types.<span class="fu">this</span>.<span class="fu">Type</span>]
<span class="kw">def</span> <span class="fu">foreach</span>(f: &lt;?&gt;): Unit
<span class="kw">def</span> <span class="fu">map</span>(f: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">substituteTypes</span>(from: &lt;?&gt;,to: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">substituteSymbols</span>(from: &lt;?&gt;,to: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">orElse</span>(alt: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> finalResultType: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> resultType: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> typeParams: List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]
<span class="kw">def</span> paramLists: List[List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]]
<span class="kw">def</span> paramss: List[List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]]
<span class="kw">def</span> typeArgs: List[Types.<span class="fu">this</span>.<span class="fu">Type</span>]
<span class="kw">def</span> dealias: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> widen: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> erasure: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">asSeenFrom</span>(pre: &lt;?&gt;,clazz: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">baseType</span>(clazz: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> baseClasses: List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]
<span class="kw">def</span> =:=(that: &lt;?&gt;): Boolean
<span class="kw">def</span> weak_&lt;:&lt;(that: &lt;?&gt;): Boolean
<span class="kw">def</span> &lt;:&lt;(that: &lt;?&gt;): Boolean
<span class="kw">def</span> etaExpand: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> normalize: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> typeConstructor: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> takesTypeArgs: Boolean
<span class="kw">def</span> companion: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> members: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> <span class="fu">member</span>(name: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> decls: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> declarations: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> <span class="fu">decl</span>(name: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> <span class="fu">declaration</span>(name: Types.<span class="fu">this</span>.<span class="fu">Name</span>): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> typeSymbol: Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> termSymbol: Types.<span class="fu">this</span>.<span class="fu">Symbol</span></code></pre></div>
<h1 id="getting-a-universe.type-from-an-instance">Getting a universe.Type from an Instance</h1>
<p>What if you have an instance of a type and want to get a universe.Type for that? It looks like there is no built in method to do that. The <a href="http://docs.scala-lang.org/overviews/reflection/symbols-trees-types.html">recommended way</a> is to write your own method for it:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> getType[T: TypeTag](obj: T) = typeOf[T]
getType: [T](obj: T)(<span class="kw">implicit</span> evidence$<span class="dv">1</span>: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">TypeTag</span>[T])reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span></code></pre></div>
<p>The scala compiler will supply our <strong>getType</strong> method with an implicit for <strong>TypeTag[T]</strong>.</p>
<p>So What is a <a href="http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html#scala.reflect.api.TypeTags">TypeTag</a>?</p>
<blockquote>
<p>A TypeTag[T] encapsulates the runtime type representation of some type T. Like scala.reflect.Manifest, the prime use case of TypeTags is to give access to erased types.</p>
</blockquote>
<p>As with Java, Scala generic types which are present at compile time are erased at runtime (erasure). TypeTags are a way of having access to that lost compile time information at runtime.</p>
<p>With <strong>getType</strong> we can now extract the universe.Type of an instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">getType</span>(List(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>))
res4: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = List[Int]</code></pre></div>
<p>Hopefully this has given you a taste for some of the information provided by the scala reflection api and a starting point to explore it further.</p>]]></description>
    <pubDate>Sat, 15 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-10-15-how-to-start-using-the-scala-reflection-api.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Ego is the Enemy - Ryan Holiday</title>
    <link>http://blog.ssanj.net/posts/2016-09-11-ego-is-the-enemy-ryan-holiday.html</link>
    <description><![CDATA[<p>Ideas from the book <a href="https://www.amazon.com/Ego-Enemy-Ryan-Holiday/dp/1591847818">Ego is the Enemy by Ryan Holiday</a>.</p>
<h2 id="aspire">Aspire</h2>
<ol style="list-style-type: decimal">
<li>Ask yourself: “Who do I want to be?” “What path will I take?”</li>
</ol>
<div>
<div class="quote">
The first principle is that you must not fool yourself—and you are the easiest person to fool.
</div>
<div class="attribution">
RICHARD FEYNMAN
</div>
</div>
<ol start="2" style="list-style-type: decimal">
<li>Believing in your greatness will kill your creativity.</li>
<li>Silence is the respite of the confident and the strong.</li>
<li>The greatest work and art comes from wrestling with the void, facing it instead of scrambling to make it go away.</li>
<li>You have to chose either to <strong>be</strong> somebody or to <strong>do</strong> something.</li>
</ol>
<div>
<div class="quote">
A man is worked upon by what he works on.
</div>
<div class="attribution">
Frederick Douglass
</div>
</div>
<ol start="6" style="list-style-type: decimal">
<li>What you choose to do with your time and what you choose to do for money works on you.</li>
<li>Think about this the next time you face a choice: Do I need this? Or is it really about ego?</li>
</ol>
<blockquote>
<p>The power of being a student is not just that it is an extended period of instruction, it also places the ego and ambition in someone else’s hands. There is a sort of ego ceiling imposed—one knows that he is not better than the “master” he apprentices under. Not even close. You defer to them, you subsume yourself. You cannot fake or bullshit them. An education can’t be “hacked”; there are no shortcuts besides hacking it every single day. If you don’t, they drop you.</p>
</blockquote>
<ol start="8" style="list-style-type: decimal">
<li>Each fighter, to become great, he said, needs to have someone better that they can learn from, someone lesser who they can teach, and someone equal that they can challenge themselves against.</li>
</ol>
<div>
<div class="quote">
<p>It is impossible to learn that which one thinks one already knows.</p>
</div>
<div class="attribution">
Epictetus
</div>
</div>
<ol start="9" style="list-style-type: decimal">
<li>You cannot get better if you’re convinced you are the best.</li>
</ol>
<blockquote>
<p>Passion typically masks a weakness. Its breathlessness and impetuousness and franticness are poor substitutes for discipline, for mastery, for strength and purpose and perseverance. The critical work that you want to do will require your deliberation and consideration. It’d be far better if you were intimidated by what lies ahead—humbled by its magnitude and determined to see it through regardless. Leave passion for the amateurs.</p>
</blockquote>
<ol start="10" style="list-style-type: decimal">
<li>Greatness comes from humble beginnings; it comes from grunt work. It means you’re the least important person in the room—until you change that with results.</li>
<li>Imagine if for every person you met, you thought of some way to help them, something you could do for them?</li>
<li>The canvas strategy is about helping yourself by helping others. The person who clears the path ultimately controls its direction, just as the canvas shapes the painting.</li>
<li>It doesn’t degrade you when others treat you poorly; it degrades them.</li>
</ol>
<div>
<div class="quote">
<p>A proud man is always looking down on things and people; and, of course, as long as you are looking down, you cannot see something that is above you.</p>
</div>
<div class="attribution">
C.S.LEWIS
</div>
</div>
<ol start="14" style="list-style-type: decimal">
<li>Pride blunts the very instrument we need to own in order to succeed: our mind.</li>
<li>Ask yourself: “What am I missing right now that a more humble person might see?” “What am I avoiding, or running from, with my bluster, franticness, and embellishments?”</li>
</ol>
<div>
<div class="quote">
<p>That on which you so pride yourself will be your ruin.</p>
</div>
<div class="attribution">
Montaigne
</div>
</div>
<ol start="16" style="list-style-type: decimal">
<li>Make your workmanship better than the material you work on.</li>
</ol>
<h2 id="success">Success</h2>
<ol style="list-style-type: decimal">
<li>We must remain focused on the execution and on executing with excellence.</li>
<li>We must shun the false crown and continue working on what got us here. Because that’s the only thing that will keep us here.</li>
</ol>
<div>
<div class="quote">
<p>One of the symptoms of approaching nervous breakdown is the belief that one’s work is terribly important.</p>
</div>
<div class="attribution">
BERTRAND RUSSELL
</div>
</div>
<ol start="3" style="list-style-type: decimal">
<li>It’s beginning to think that we’re better, that we’re special, that our problems and experiences are so incredibly different from everyone else’s that no one could possibly understand.</li>
</ol>
<div>
<div class="quote">
<p>Play for the name on the front of the jersey, and they’ll remember the name on the back.</p>
</div>
<div class="attribution">
Tony Adams
</div>
</div>
<div>
<div class="quote">
<p>It requires a strong constitution to withstand repeated attacks of prosperity.</p>
</div>
<div class="attribution">
James Basford
</div>
</div>
<h2 id="failure">Failure</h2>
<ol style="list-style-type: decimal">
<li>This moment is not your life. But it is a moment in your life.</li>
<li>Anyone can win. But not everyone is the best possible version of themselves.</li>
<li>Attempting to destroy something out of hate or ego often ensures that it will be preserved and disseminated forever.</li>
<li>What do you dislike? Whose name fills you with revulsion and rage? Now ask: Have these strong feelings really helped you accomplish anything?</li>
<li>Where has hatred and rage ever really gotten anyone?</li>
</ol>
<div>
<div class="quote">
I don’t like work — no man does — but I like what is in the work — the chance to find yourself.
</div>
<div class="attribution">
JOSEPH CONRAD
</div>
</div>]]></description>
    <pubDate>Sun, 11 Sep 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-09-11-ego-is-the-enemy-ryan-holiday.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Clone only a Single Branch</title>
    <link>http://blog.ssanj.net/posts/2016-08-29-git-clone-only-a-single-branch.html</link>
    <description><![CDATA[<p>Cloning a Git repository gives you all the branches by default. Sometimes you might just want a single branch. To do that use:</p>
<pre class="command scrollx"><code>git clone [url] -b [branch-name] --single-branch</code></pre>
<p>reference: <a href="http://stackoverflow.com/questions/4811434/clone-only-one-branch#14930421">so:clone-only-one-branch</a></p>]]></description>
    <pubDate>Mon, 29 Aug 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-08-29-git-clone-only-a-single-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to get a Job in any Economy</title>
    <link>http://blog.ssanj.net/posts/2016-08-28-how-to-get-job-in-any-economy.html</link>
    <description><![CDATA[<p>I recently watched <a href="https://youtu.be/gCVZIpxUEhg">Conan O’Brien in conversation with Harvard University President Drew Faust</a>. In it he answers a question about how make a name for yourself when starting out. He lists two main rules on how to get a job in any economy:</p>
<ol style="list-style-type: decimal">
<li>Work really hard.</li>
<li>Be easy to work with.</li>
</ol>
<p>He elaborates on point 2 with:</p>
<ul>
<li>Be someone people enjoy working with.</li>
<li>Be helpful.</li>
<li>Try to help the group (not just yourself).</li>
<li>Be kind.</li>
<li>Be nice.</li>
</ul>
<p>Great words to work by. :)</p>]]></description>
    <pubDate>Sun, 28 Aug 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-08-28-how-to-get-job-in-any-economy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to be a Great Programmer</title>
    <link>http://blog.ssanj.net/posts/2016-07-13-how-to-be-a-great-programmer.html</link>
    <description><![CDATA[<p><a href="https://twitter.com/kmett">Edward Kmett</a> recently retweeted this list of recommendations from <a href="https://twitter.com/ID_AA_Carmack">John Carmack</a> on how to be a great programmer:</p>
<div class="figure">
<img src="/images/rules_for_being_a_great_programmer_tweet_kmett.png" alt="Rules for being a great programmer" />
<p class="caption">Rules for being a great programmer</p>
</div>
<p>This is a great list to follow for sure.</p>
<p>I also added:</p>
<div class="figure">
<img src="/images/rules_for_being_a_great_programmer_tweet_reply.png" alt="Teach others" />
<p class="caption">Teach others</p>
</div>
<p>I created the mindmap below for easy reference:</p>
<div class="figure">
<img src="/images/rules_for_being_a_great_programmer.png" alt="Mindmap of the rules" />
<p class="caption">Mindmap of the rules</p>
</div>]]></description>
    <pubDate>Wed, 13 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-07-13-how-to-be-a-great-programmer.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Write Html Test Reports in ScalaTest While Retaining Console Output</title>
    <link>http://blog.ssanj.net/posts/2016-07-06-write-html-test-reports-with-scalatest-while-retaining-console-output.html</link>
    <description><![CDATA[<p>If you are using <a href="http://www.scalatest.org">ScalaTest</a> with <a href="http://www.scala-sbt.org">SBT</a> and need to write out Html reports for your tests, add the following incantation to your build.sbt:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">testOptions in Test += Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-h&quot;</span>, <span class="st">&quot;target/test-reports&quot;</span>)</code></pre></div>
<p>The above will write out Html reports to your <strong>target/test-reports</strong> directory.</p>
<p>Unfortunately this stops the writing of any test successes or failures to the console. You just get a message of the type: “x Tests Failed”. You have to then rummage around the Html reports to figure out what happened. Not ideal.</p>
<p>To get both the console output and the Html output for your tests, add the following incantation to your build.sbt:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">testOptions in Test ++= Seq(Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-o&quot;</span>), Tests.<span class="fu">Argument</span>(TestFrameworks.<span class="fu">ScalaTest</span>, <span class="st">&quot;-h&quot;</span>, <span class="st">&quot;target/test-reports&quot;</span>))</code></pre></div>
<p>Read the <a href="http://www.scalatest.org/user_guide/using_the_runner">full list of ScalaTest options</a> for more configurations.</p>
<p>If you get the following NoClassDefFoundError error when generating reports:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[error] (test:executeTests) java.<span class="fu">lang</span>.<span class="fu">NoClassDefFoundError</span>: org/pegdown/PegDownProcessor</code></pre></div>
<p>add the pegdown library to your dependencies:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">  <span class="st">&quot;org.pegdown&quot;</span>    %  <span class="st">&quot;pegdown&quot;</span>     % <span class="st">&quot;1.6.0&quot;</span>  % <span class="st">&quot;test&quot;</span></code></pre></div>
<p>Now you can have the best of both worlds!</p>]]></description>
    <pubDate>Wed, 06 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-07-06-write-html-test-reports-with-scalatest-while-retaining-console-output.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Run ScalaCheck from ScalaTest and Generate HTML Reports</title>
    <link>http://blog.ssanj.net/posts/2016-07-06-how-to-run-scalacheck-from-scalatest-and-generate-html-reports.html</link>
    <description><![CDATA[<p>It would seem that ScalaCheck does not have a way to generate HTML output for tests, as <a href="http://scalatest.org">ScalaTest</a> or <a href="http://etorreborre.github.io/specs2">Specs2</a> does. In order to get some of this functionality I decided to run ScalaCheck through ScalaTest and get the HTML reporting for free.</p>
<h2 id="the-problem">The Problem</h2>
<p>Reading the <a href="http://www.scalatest.org/user_guide/property_based_testing">ScalaTest documentation for Property-Based Testing</a> left me a little baffled as to which classes to use as there didn’t seem to be a full example of a property-based specification in the documentation. This is quite unusual given the high quality of ScalaTest documentation.</p>
<h2 id="example">Example</h2>
<p>In any event <a href="https://github.com/oscarrenalias/scalacheck-cookbook/blob/master/markdown/scalacheck-integration.md#using-scalacheck-with-scalatest">I managed to find a working example</a> and it turned out it was quite straightforward.</p>
<p>I thought I’d use a simple example in ScalaCheck and then discuss how to convert that example into ScalaTest’s property-based tests.</p>
<p>I’ve taken the example from the <a href="http://scalacheck.org/#quickstart">Quick Start section of the ScalaCheck website</a> (and fixed the broken property):</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Properties</span>
<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Prop</span>.<span class="fu">forAll</span>

<span class="kw">object</span> StringProp <span class="kw">extends</span> Properties(<span class="st">&quot;String&quot;</span>) {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) = forAll { (a: String, b: String) =&gt;
    (a+b).<span class="fu">startsWith</span>(a)
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) = forAll { (a: String, b: String) =&gt;
    (a+b).<span class="fu">length</span> &gt;= a.<span class="fu">length</span> &amp;&amp; (a+b).<span class="fu">length</span> &gt;= b.<span class="fu">length</span>
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) = forAll { (a: String, b: String, c: String) =&gt;
    (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) == b
  }
}</code></pre></div>
<p>You can run this by issuing a <strong>test</strong> command in SBT:</p>
<pre class="terminal scrollx"><code>[info] + String.substring: OK, passed 100 tests.
[info] + String.startsWith: OK, passed 100 tests.
[info] + String.concatenate: OK, passed 100 tests.</code></pre>
<p>Errors are displayed as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] ! String.<span class="fu">concatenate</span>: Falsified after <span class="dv">0</span> passed tests.
[info] &gt; ARG_0: <span class="st">&quot;&quot;</span>
[info] &gt; ARG_1: <span class="st">&quot;&quot;</span></code></pre></div>
<p>How can we convert the above property test into ScalaTest property test?</p>
<p>ScalaTest has two flavours of property-based testing:</p>
<ol style="list-style-type: decimal">
<li>The ScalaTest Style (Generator-Driven)</li>
<li>ScalaCheck Style</li>
</ol>
<p>Here are some guidelines on how to convert the above example to the ScalaTest style:</p>
<ol style="list-style-type: decimal">
<li>Extend PropSpec</li>
<li>Extend PropertyChecks</li>
<li>Extend Matchers (or other matching DSL)</li>
<li>Convert each property assignment to a property method</li>
<li>Convert each Boolean operation/Prop to a match</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalatest</span>.{Matchers, PropSpec}
<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">prop</span>.<span class="fu">PropertyChecks</span>

<span class="kw">final</span> <span class="kw">class</span> StringSpec <span class="kw">extends</span> PropSpec <span class="kw">with</span> PropertyChecks <span class="kw">with</span> Matchers {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) {
    forAll { (a: String, b: String) =&gt;
      (a+b) should <span class="fu">startWith</span> (a)
    }
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) {
    forAll { (a: String, b: String) =&gt;
      (a+b).<span class="fu">length</span> <span class="fu">should</span> (be &gt;= a.<span class="fu">length</span>)
      (a+b).<span class="fu">length</span> <span class="fu">should</span> (be &gt;= b.<span class="fu">length</span>)
    }
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) {
    forAll { (a: String, b: String, c: String) =&gt;
      (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) should <span class="fu">be</span> (b)
    }
  }
}</code></pre></div>
<p>Running the above gives us:</p>
<pre class="terminal scrollx"><code>[info] StringSpec:
[info] - startsWith
[info] - concatenate
[info] - substring</code></pre>
<p>Errors are displayed as:</p>
<pre class="terminal scrollx"><code>[info] - concatenate *** FAILED ***
[info]   TestFailedException was thrown during property evaluation.
[info]     Message: 0 was not greater than 0
[info]     Location: (StringSpec.scala:16)
[info]     Occurred when passed generated values (
[info]       arg0 = &quot;&quot;,
[info]       arg1 = &quot;&quot;
[info]     )</code></pre>
<p>In ScalaCheck any property that returns a Boolean is automatically converted into a Prop and then evaluated when executed. When using the ScalaTest flavour of property-based testing, you need to use matchers instead of Boolean properties.</p>
<p>Here are some guidelines on how to convert the example to the ScalaCheck style:</p>
<ol style="list-style-type: decimal">
<li>Extend PropSpec</li>
<li>Extend Checkers</li>
<li>Convert each property assignment to a property method</li>
<li>Wrap the outer forAll method call with the check method.</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">package</span> net.<span class="fu">ssanj</span>.<span class="fu">blog</span>

<span class="kw">import</span> org.<span class="fu">scalacheck</span>.<span class="fu">Prop</span>

<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">PropSpec</span>
<span class="kw">import</span> org.<span class="fu">scalatest</span>.<span class="fu">prop</span>.<span class="fu">Checkers</span>

<span class="kw">final</span> <span class="kw">class</span> StringCheck <span class="kw">extends</span> PropSpec <span class="kw">with</span> Checkers {

  <span class="fu">property</span>(<span class="st">&quot;startsWith&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String) =&gt;
      (a+b).<span class="fu">startsWith</span>(a)
    })
  }

  <span class="fu">property</span>(<span class="st">&quot;concatenate&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String) =&gt;
      (a+b).<span class="fu">length</span> &gt;= a.<span class="fu">length</span> &amp;&amp; (a+b).<span class="fu">length</span> &gt;= b.<span class="fu">length</span>
    })
  }

  <span class="fu">property</span>(<span class="st">&quot;substring&quot;</span>) {
    <span class="fu">check</span>(Prop.<span class="fu">forAll</span> { (a: String, b: String, c: String) =&gt;
      (a+b+c).<span class="fu">substring</span>(a.<span class="fu">length</span>, a.<span class="fu">length</span>+b.<span class="fu">length</span>) == b
    })
  }
}</code></pre></div>
<p>Running the above gives us:</p>
<pre class="terminal scrollx"><code>[info] StringCheck:
[info] - startsWith
[info] - concatenate
[info] - substring</code></pre>
<p>Errors as displayed as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] StringCheck:
[info] - String.<span class="fu">startsWith</span>
[info] - concatenate *** FAILED ***
[info]   GeneratorDrivenPropertyCheckFailedException was thrown during property evaluation.
[info]    (StringCheck.<span class="fu">scala</span>:<span class="dv">17</span>)
[info]     Falsified after <span class="dv">0</span> successful property evaluations.
[info]     Location: (StringCheck.<span class="fu">scala</span>:<span class="dv">17</span>)
[info]     Occurred when passed generated <span class="fu">values</span> (
[info]       arg0 = <span class="st">&quot;&quot;</span>,
[info]       arg1 = <span class="st">&quot;&quot;</span>
[info]     )
[info] - substring</code></pre></div>
<p>As you can see, this style is much closer to the default ScalaCheck property style as properties can be left as Boolean expressions.</p>
<p>The diagram below outlines the two different styles and some of the basic methods provided by each of the traits.</p>
<div class="figure">
<img src="/images/scalatest_scalacheck_summary_of_different_property-based_testing_styles.png" alt="Summary of the different property-based testing styles" />
<p class="caption">Summary of the different property-based testing styles</p>
</div>
<h2 id="html-output">HTML Output</h2>
<ol style="list-style-type: decimal">
<li>StringSpec has the following HTML output:</li>
</ol>
<div class="figure">
<img src="/images/scalacheck_scalatest_stringspec.jpg" alt="StringSpec" />
<p class="caption">StringSpec</p>
</div>
<ol start="2" style="list-style-type: decimal">
<li>StringCheck has the following HTML output:</li>
</ol>
<div class="figure">
<img src="/images/scalacheck_scalatest_stringcheck.jpg" alt="StringCheck" />
<p class="caption">StringCheck</p>
</div>
<p>The output is identical irrespective of the property-based style used.</p>
<h2 id="caveats-with-imports">Caveats with Imports</h2>
<p>If you use ScalaCheck version 0.13.x with ScalaTest 2.2.x you’ll run into an IncompatibleClassChangeError:</p>
<pre class="terminal scrollx"><code>[info] Exception encountered when attempting to run a suite with class name: org.scalatest.DeferredAbortedSuite *** ABORTED ***
[info]   java.lang.IncompatibleClassChangeError: Implementing class
[info]   at java.lang.ClassLoader.defineClass1(Native Method)
[info]   at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
[info]   at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
[info]   at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
[info]   at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
[info]   at java.net.URLClassLoader$1.run(URLClassLoader.java:368)
[info]   at java.net.URLClassLoader$1.run(URLClassLoader.java:362)
[info]   at java.security.AccessController.doPrivileged(Native Method)
[info]   at java.net.URLClassLoader.findClass(URLClassLoader.java:361)
[info]   at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
[info]   ...</code></pre>
<p>To solve this ensure that you use ScalaCheck version 0.12.x with ScalaTest 2.2.x</p>
<p>The examples use the following combination:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">libraryDependencies ++= Seq(
  <span class="st">&quot;org.scalatest&quot;</span>  %% <span class="st">&quot;scalatest&quot;</span>   % <span class="st">&quot;2.2.6&quot;</span>  % <span class="st">&quot;test&quot;</span>,
  <span class="st">&quot;org.scalacheck&quot;</span> %% <span class="st">&quot;scalacheck&quot;</span>  % <span class="st">&quot;1.12.5&quot;</span> % <span class="st">&quot;test&quot;</span>
)</code></pre></div>
<p>The full <a href="https://github.com/ssanj/scalacheck-on-scalatest">source</a> can be found on Github.</p>]]></description>
    <pubDate>Wed, 06 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-07-06-how-to-run-scalacheck-from-scalatest-and-generate-html-reports.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Scalaz Try Operations</title>
    <link>http://blog.ssanj.net/posts/2016-06-28-scalaz-try-operations.html</link>
    <description><![CDATA[<p>If you are looking to use scalaz to get some additional functionality for your vanilla <code>scala.util.Try</code> class, then you’ve got a couple of options. This can be confusing at first because you might not know which import to use.</p>
<h2 id="functions-that-accept-a-try-instance">1. Functions that accept a Try instance</h2>
<p>To import only functions that must be supplied a Try instance use:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">std</span>.`try`.<span class="fu">_</span></code></pre></div>
<p>This will give you functions of the form:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> cata[A, B](t: Try[A])(success: A =&gt; B, failure: Throwable =&gt; B): B

<span class="kw">def</span> toDisjunction[A](t: Try[A]): Throwable \/ A

<span class="kw">def</span> fromDisjunction[T &lt;: Throwable, A](d: T \/ A): Try[A]

<span class="kw">def</span> toValidation[A](t: Try[A]): Validation[Throwable, A]

<span class="kw">def</span> toValidationNel[A](t: Try[A]) : ValidationNel[Throwable, A]

<span class="kw">def</span> fromValidation[T &lt;: Throwable, A](v: Validation[T, A]) : Try[A]</code></pre></div>
<p>Example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">cata</span>(<span class="fu">Try</span>(..))(..)</code></pre></div>
<h2 id="functions-that-are-added-to-your-try-instance">2. Functions that are added to your Try instance</h2>
<p>To get a pimped up version of Try use:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">syntax</span>.<span class="fu">std</span>.`try`.<span class="fu">_</span></code></pre></div>
<p>This will give you functions directly on your Try instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">def</span> cata[B](success: A =&gt; B, failure: Throwable =&gt; B): B

<span class="kw">final</span> <span class="kw">def</span> toDisjunction: Throwable \/ A

<span class="kw">final</span> <span class="kw">def</span> toValidation: Validation[Throwable, A]

<span class="kw">final</span> <span class="kw">def</span> toValidationNel: ValidationNel[Throwable, A]</code></pre></div>
<p>Example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">Try</span>(..).<span class="fu">cata</span>(..)</code></pre></div>]]></description>
    <pubDate>Tue, 28 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-06-28-scalaz-try-operations.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Property-based Testing Patterns</title>
    <link>http://blog.ssanj.net/posts/2016-06-26-property-based-testing-patterns.html</link>
    <description><![CDATA[<p>In his <a href="http://lambdajam.yowconference.com.au/archive-2015/">LambdaJam 2015</a> presentation on <a href="http://blog.charleso.org/property-testing-preso/yowlj2015.html#1">How I learned to stop unit testing and love property-based testing</a>, <a href="https://twitter.com/charlesofarrell">Charles O’Farrell</a> covers some standard patterns you should use with property-based testing. These patterns turned out to be somewhat of a guiding light for me when writing property-based tests with <a href="https://www.scalacheck.org/">Scalacheck</a>.</p>
<p>I found some of the names of the patterns hard to remember so I’ve renamed them below to make it easier for me to recall the pattern they refer to. I’ve also included the alternate names each pattern is referred to by, so feel free to learn the name that most resonates with you. The images used are from the <a href="http://fsharpforfunandprofit.com/">F# for fun and profit</a> (FFP) blog and is where most of these patterns originate from.</p>
<h2 id="round-trippingsymmetrythere-and-back-again">1. Round-tripping/Symmetry/There and back again</h2>
<p>The basic premise is that you convert some value to another value and then convert it back to the original value. Serialization is a typical example. Parsing text to an object and then writing out the object back to the original text would be another.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_round_tripping.png" alt="Round-tripping" />
<p class="caption">Round-tripping</p>
</div>
<p>One thing to keep in mind is that the conversions can’t be lossy. If you loose information one way, then you can’t introduce it back when going the other way.</p>
<p>For example if you are trimming spaces in some text before converting it to an object, when converting back from the object, you will not know whether there were extra spaces in the input or not.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Name(value: String)
<span class="kw">val</span> input = <span class="st">&quot; Tom Jones &quot;</span>
Name(input.<span class="fu">trim</span>).<span class="fu">value</span> == input <span class="co">//fails</span></code></pre></div>
<p>One way to get around this is to always convert the input to a form that does not lose any information when converted back from the previous output. In the above example it could be that you trim the input text when checking for equality. That way you never have to worry about reintroducing spaces. This could lead to some false assumptions though.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> input = <span class="st">&quot; Tom Jones &quot;</span>
Name(input.<span class="fu">trim</span>).<span class="fu">value</span> == input.<span class="fu">trim</span> <span class="co">//passes</span></code></pre></div>
<h2 id="commutativitydifferent-paths-same-destination">2. Commutativity/Different paths, same destination</h2>
<p>The basic premise is that changing the order of some operations should not change the final result.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_commutativity.png" alt="Commutativity" />
<p class="caption">Commutativity</p>
</div>
<p>An example would be adding the same value to every element of a List and then sorting it should be the same as sorting the list and then adding the value to each element.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">numbers.<span class="fu">sorted</span>.<span class="fu">map</span>(_ + <span class="dv">10</span>) == numbers.<span class="fu">map</span>(_ + <span class="dv">10</span>).<span class="fu">sorted</span></code></pre></div>
<h2 id="invariantssome-things-never-change">3. Invariants/Some things never change</h2>
<p>The basic premise is that with these properties, performing some kind of operation does not change a given property of the test subject.</p>
<p>Common invariants include:</p>
<ol style="list-style-type: decimal">
<li>The size of a list should not change after a map operation.</li>
<li>The contents of a list should not change after a sort operation.</li>
<li>The height or depth of something in proportion to size (eg. after balancing trees).</li>
</ol>
<div class="figure">
<img src="/images/property_based_testing_patterns_invariant.png" alt="Invariants" />
<p class="caption">Invariants</p>
</div>
<h2 id="idempotencethe-more-things-change-the-more-they-stay-the-same">4. Idempotence/The more things change, the more they stay the same</h2>
<p>Basically performing an operation once should be the same as performing an operation twice. An example would be sorting a list more than once should be the same as sorting the list once.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_idempotence.png" alt="Idempotence" />
<p class="caption">Idempotence</p>
</div>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">numbers.<span class="fu">sorted</span> == numbers.<span class="fu">sorted</span>.<span class="fu">sorted</span>.<span class="fu">sorted</span></code></pre></div>
<h2 id="inductionsolve-a-smaller-problem-first">5. Induction/Solve a smaller problem first</h2>
<p>FFP explains it as:</p>
<blockquote>
<p>These kinds of properties are based on “structural induction” – that is, if a large thing can be broken into smaller parts, and some property is true for these smaller parts, then you can often prove that the property is true for a large thing as well.</p>
</blockquote>
<blockquote>
<p>In the diagram below, we can see that the four-item list can be partitioned into an item plus a three-item list, which in turn can be partitioned into an item plus a two-item list. If we can prove the property holds for two-item list, then we can infer that it holds for the three-item list, and for the four-item list as well.</p>
</blockquote>
<blockquote>
<p>Induction properties are often naturally applicable to recursive structures (such as lists and trees).</p>
</blockquote>
<div class="figure">
<img src="/images/property_based_testing_patterns_induction.png" alt="Induction" />
<p class="caption">Induction</p>
</div>
<h2 id="blackbox-testinghard-to-prove-easy-to-verify">6. Blackbox Testing/Hard to prove, easy to verify</h2>
<p>These are properties that are hard to compute but easy to verify. An example would be calculating the nth prime number. It’s easy to verify the answer if you already know the nth prime. In the example below, finding a valid route through a maze is hard - verifying it is easy.</p>
<div class="figure">
<img src="/images/property_based_testing_patterns_blackbox_testing.png" alt="Blackbox Testing" />
<p class="caption">Blackbox Testing</p>
</div>
<h2 id="comparison-with-another-implementationtest-oracle">7. Comparison with another implementation/Test Oracle</h2>
<p>The premise is that you verify your property by running the same test against another implementation of the algorithm. An example is to compare the result of a parallel or concurrent algorithm with the result of a linear, single-threaded version. Another example could be verifying your shiny new json parser against an existing parser implementation for the same inputs.</p>
<h2 id="something-to-keep-in-mind">Something to keep in mind</h2>
<p>In addition to the above patterns, the properties you choose should actually fail if there are errors. This sounds too obvious to be mentioned but here’s an example that should fail but doesn’t:</p>
<p>Given a sort implementation for a list that returns the original list unchanged:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">list.<span class="fu">sort</span> == list.<span class="fu">sort</span>.<span class="fu">sort</span>
list.<span class="fu">sort</span>.<span class="fu">length</span> == list.<span class="fu">length</span></code></pre></div>
<p>The above properties pass.</p>
<p>The following property correctly fails the above implementation because it ensures that each element in the list should be greater than or equal to the preceding element:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">list.<span class="fu">sort</span>.<span class="fu">sliding</span>(<span class="dv">2</span>).<span class="fu">toList</span>.<span class="fu">forall</span> { <span class="kw">case</span> List(f, s) =&gt; f &lt;= s }</code></pre></div>
<p>Property-based testing requires that you think a lot more about your code. You need to identify the properties that are true and false for it. The result is a lot more confidence in your code than had you just unit tested it.</p>
<p>Some additional resources:</p>
<ul>
<li><a href="https://yow.eventer.com/yow-lambda-jam-2015-1305/practical-property-based-testing-by-charles-o-farrell-1884">Practical Property-Based Testing - Charles O’Farrell</a></li>
<li><a href="http://functional.tv/post/97738967579/scala-by-the-bay-2014-i-dream-of-genning-scalacheck-beyo">I Dream of Genning ScalaCheck Beyond the Basics - Kelsey Gilmore-Innis</a></li>
<li><a href="http://fsharpforfunandprofit.com/posts/property-based-testing">An Introduction to Property-Based Testing - FFP</a></li>
<li><a href="http://fsharpforfunandprofit.com/posts/property-based-testing-2">Choosing properties for Property-Based Testing - FFP</a></li>
<li><a href="http://research.microsoft.com/en-us/projects/pex/patterns.pdf">Testing patterns</a></li>
<li><a href="http://www.infoq.com/presentations/testing-techniques-case-study">Testing the Hard Stuff and Staying Sane - John Hughes</a></li>
</ul>]]></description>
    <pubDate>Sun, 26 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-06-26-property-based-testing-patterns.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 02 Aug 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Seth Godin on Art</title>
    <link>http://blog.ssanj.net/posts/2015-08-02-seth-godin-on-art.html</link>
    <description><![CDATA[<p>Seth Godin <a href="http://sethgodin.typepad.com/seths_blog/2015/07/what-is-your-art.html">has some profound insights</a> when it comes to making Art.</p>
<p>He starts off by defining Art as:</p>
<blockquote>
<p>Art is a human act, a generous contribution, something that might not work, and it is intended to change the recipient for the better, often causing a connection to happen.</p>
</blockquote>
<p>Then he goes on to say:</p>
<blockquote>
<p>You can be perfect or you can make art.</p>
</blockquote>
<blockquote>
<p>You can keep track of what you get in return, or you can make art.</p>
</blockquote>
<blockquote>
<p>You can enjoy the status quo, or you can make art.</p>
</blockquote>
<p>And the concludes by giving us a choice:</p>
<blockquote>
<p>The most difficult part might be in choosing whether you want to make art at all, and committing to what it requires of you.</p>
</blockquote>]]></description>
    <pubDate>Sun, 02 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-02-seth-godin-on-art.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Run a Test Method of a Test Class from SBT</title>
    <link>http://blog.ssanj.net/posts/2015-08-02-run-a-test-method-of-a-test-class-from-sbt.html</link>
    <description><![CDATA[<p>As <a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">I use Sublime Text for most of my Scala development</a> at the mo, I’ve had to forego some of the niceties that Intellij brought to the table. One of those niceties was running a single test method of a test class.</p>
<p>I do all my compilation and running-of-tests through an interactive SBT session. I knew how to run only a single test with <strong>testOnly</strong>.</p>
<p>Here’s an example of running only the <a href="https://github.com/puffnfresh/wartremover/blob/latest-release/core/src/test/scala/wartremover/warts/ListTest.scala">ListTest</a> class in the <a href="https://github.com/puffnfresh/wartremover">Wartremover project</a>:</p>
<pre class="terminal scrollx"><code>&gt; testOnly org.brianmckenna.wartremover.test.ListTest
[info] ListTest:
[info] - can&#39;t use List#head on List
[info] - can&#39;t use List#tail on List
[info] - can&#39;t use List#init on List
[info] - can&#39;t use List#last on List
[info] - can&#39;t use List#reduce on List
[info] - can&#39;t use List#reduceLeft on List
[info] - can&#39;t use List#reduceRight on List
[info] - ListOps wart obeys SuppressWarnings
[info] Run completed in 211 milliseconds.
[info] Total number of tests run: 8
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 8, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.</code></pre>
<p>What I did not know was how to run a single test method within a test class. This functionality depends on the test framework in use.</p>
<h2 id="scalatest">ScalaTest</h2>
<p>The incantation for <a href="http://www.scalatest.org">ScalaTest</a> is:</p>
<pre class="terminal scrollx"><code>testOnly *YourTestClass -- -z &quot;name of the test you want to run&quot;</code></pre>
<p>To run only the <strong>can’t use List#reduce on List</strong> test within the ListTest class:</p>
<pre class="terminal scrollx"><code>&gt; testOnly org.brianmckenna.wartremover.test.ListTest -- -z &quot;can&#39;t use List#reduce on List&quot;
[info] ListTest:
[info] - can&#39;t use List#reduce on List
[info] Run completed in 90 milliseconds.
[info] Total number of tests run: 1
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.</code></pre>
<h2 id="specs2">Specs2</h2>
<p>The incantation for <a href="https://etorreborre.github.io/specs2">Specs2</a> is:</p>
<pre class="terminal scrollx"><code>testOnly *YourTestClass -- -ex &quot;name of the test you want to run&quot;</code></pre>
<p>Taking the <a href="https://github.com/markhibberd/pirate">pirate</a> project as an example, we can run only the <a href="https://github.com/markhibberd/pirate/blob/master/src/test/scala/pirate.internal/NondetTSpec.scala">NondetTSpec</a> with:</p>
<pre class="terminal scrollx"><code>&gt; testOnly pirate.internal.NondetTSpec
[info] NondetTSpec
[info]
[info]   NondetT Laws
[info]   ============
[info]
[info]   + NondetT is an equal (for tests)
[info]   + NondetT is a monad
[info]   + NondetT is a monad plus
[info]   + NondetT is a strong monad plus
[info]
[info]
[info] Total for specification NondetTSpec
[info] Finished in 9 ms
[info] 4 examples, 400 expectations, 0 failure, 0 error
[info] Passed: Total 4, Failed 0, Errors 0, Passed 4</code></pre>
<p>Then to run only the <strong>NondetT is a monad plus</strong> test:</p>
<pre class="terminal scrollx"><code>&gt; testOnly pirate.internal.NondetTSpec -- -ex &quot;NondetT is a monad plus&quot;
[info] NondetTSpec
[info]
[info]
[info]   NondetT Laws
[info]   ============
[info]
[info]
[info]
[info]   + NondetT is a monad plus
[info]
[info]
[info]
[info] Total for specification NondetTSpec
[info] Finished in 9 ms
[info] 1 example, 100 expectations, 0 failure, 0 error
[info] Passed: Total 1, Failed 0, Errors 0, Passed 1</code></pre>
<p>Having differing parameters to each test frameworks is laborious. It would be nice if SBT provided some support for at least ScalaTest and Specs2 out of the box.</p>
<p><em>I got some clues on how to make these work from <a href="https://github.com/sbt/sbt/issues/911">here</a></em>.</p>]]></description>
    <pubDate>Sun, 02 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-02-run-a-test-method-of-a-test-class-from-sbt.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Quick File Creator Sublime Text Plugin</title>
    <link>http://blog.ssanj.net/posts/2015-08-02-quick-file-creator-sublime-text-plugin.html</link>
    <description><![CDATA[<p>My friend <a href="https://twitter.com/edwardsmatt">Matt</a> put me on to this cool Sublime Text plugin called <a href="https://packagecontrol.io/packages/Quick%20File%20Creator">Quick File Creator</a>. It basically lets you create a file or directory anywhere within your project without having to navigate to it. The doco states:</p>
<blockquote>
<p>This plugin instead pops up a quick panel that lets you pick the directory for the new file or subdirectory using the built-in fuzzy matching. If you are currently editing a file, that file’s directory will be located at the top of the list to make it even easier to create the new file or subdirectory in the same location. Select a directory, input the new name in the input panel at the bottom of the window, and you’re done!</p>
</blockquote>
<div class="figure">
<img src="/images/quick_file_creator_popup.jpg" alt="Quick File Creator - Sublime Text Plugin" />
<p class="caption">Quick File Creator - Sublime Text Plugin</p>
</div>
<p>You can also exclude directories you do not care about through your project settings:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="op">{</span>
    <span class="st">&quot;SublimeQuickFileCreator&quot;</span><span class="op">:</span>
      <span class="op">{</span>
        <span class="st">&quot;excluded_dir_patterns&quot;</span><span class="op">:</span>
        [
          <span class="st">&quot;tmp.*&quot;</span><span class="op">,</span> <span class="st">&quot;|.git&quot;</span><span class="op">,</span> <span class="st">&quot;|.svn&quot;</span><span class="op">,</span> <span class="st">&quot;|.hg&quot;</span>
        ]
      <span class="op">}</span>
<span class="op">}</span></code></pre></div>
<p>or User preferences:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="op">{</span>
  <span class="st">&quot;excluded_dir_patterns&quot;</span><span class="op">:</span> [
    <span class="st">&quot;tmp&quot;</span><span class="op">,</span> <span class="st">&quot;|.git&quot;</span><span class="op">,</span> <span class="st">&quot;|.svn&quot;</span>
  ]
<span class="op">}</span></code></pre></div>
<p>Some caveats:</p>
<blockquote>
<p>Note that each pattern is anchored to the beginning and end of the directory name, so you should not use ^ or $ in your patterns. Also, since ST2 does not allow backslashes in settings files, use a vertical bar (|) instead of a backslash to escape special regex symbols such as dots in directory names.</p>
</blockquote>
<p>The other brilliant feature is:</p>
<blockquote>
<p>The file/folder input panel supports recursive folder or file creation. If the parent path does not exist then the path will be created.</p>
</blockquote>
<p>Need to create a package structure for your java/scala project? No problemo! QFC will create the full package path and your class file at the same time! :)</p>]]></description>
    <pubDate>Sun, 02 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-02-quick-file-creator-sublime-text-plugin.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Writing is a Habit</title>
    <link>http://blog.ssanj.net/posts/2015-07-25-writing-is-a-habit.html</link>
    <description><![CDATA[<p>Writing is a habit. Just like any other habit, it gets stronger the more you do it.</p>]]></description>
    <pubDate>Sat, 25 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-25-writing-is-a-habit.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Real People Still Exist</title>
    <link>http://blog.ssanj.net/posts/2015-07-25-real-people-still-exist.html</link>
    <description><![CDATA[<p>I was on my way to work on a crowded train. I was in one of those carriages where people sit in rows on either side as opposed to next to each other.</p>
<p>An old lady, maybe in her sixties, was making her way through the train. She suddenly trips and falls face-first onto the floor. She lands on the floor next to the lady sitting by me. We all get a fright.</p>
<p>In an instant, everyone put down their phones and unplugged their headphones. Many rushed to her aid and lifted her off the ground. It must have been an awful experience for her. Someone gave her a seat. She started laughing hysterically for about ten seconds. I saw a young lady give her a smile and a nod as if to say “you’re going to be okay.”</p>
<p>While what happened was horrible, it gave me hope. Hiding behind all those digital devices were people. Bona fide human beings who still cared.</p>]]></description>
    <pubDate>Sat, 25 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-25-real-people-still-exist.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Developing Software is not Easy</title>
    <link>http://blog.ssanj.net/posts/2015-07-25-developing-software-is-not-easy.html</link>
    <description><![CDATA[<p>Anyone who tells you different doesn’t know what they are talking about.</p>
<p>You might hear something like:</p>
<blockquote>
<p>It’s a simple fix. All you have to do is do X.</p>
</blockquote>
<p>Things always seem simpler to people who do not understand the implications of the changes they want you to make.</p>
<p>Or you might hear:</p>
<blockquote>
<p>It’s conceptually simple.</p>
</blockquote>
<p>Here’s something that’s conceptually simple:</p>
<blockquote>
<p>Take man from Earth and put him on the Moon.</p>
</blockquote>
<p>You just want to move a person from one place to another. What’s the problem? Simple right?</p>]]></description>
    <pubDate>Sat, 25 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-25-developing-software-is-not-easy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Coffee Class</title>
    <link>http://blog.ssanj.net/posts/2015-07-25-coffee-class.html</link>
    <description><![CDATA[<p>Four of us - three work colleagues and myself - attended a coffee “class” at our favourite coffee shop <a href="https://www.facebook.com/coffeeanthology">Coffee Anthology</a> last Friday. We had been trying to organise it for a while and it all finally came together.</p>
<p>The class lasted for around three and a half hours. During this time we learned many interesting details about coffee and how to make it. Some of the topics we covered were:</p>
<ol style="list-style-type: decimal">
<li>The different types of coffee beans.
<ol style="list-style-type: decimal">
<li>How the amount of roasting affects the taste of the beans.</li>
<li>How to identity a good roast from a under/over roast.</li>
<li>The texture and smell of a variety of beans.</li>
</ol></li>
<li>Tasting coffees that had been made under a variety of extraction speeds. (too slow, too fast, just right)</li>
<li>Tasting coffees that had been made with a variety of extraction pressures. (too little, too much, just right)</li>
<li>Tasting coffees that had been made with a variety milk temperatures. (too low, too high and just right)</li>
<li>A lot of great hands-on Latte art.</li>
<li>Tasting filtered coffee.</li>
</ol>
<p>And more… but that’s mostly what I remember.</p>
<p>We ended up paying $450 for the four of us. $112.50 each. What a bargain.</p>
<p>If this sounds like fun contact Adam at Coffee Anthology.</p>]]></description>
    <pubDate>Sat, 25 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-25-coffee-class.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Using Sublime for Scala Development</title>
    <link>http://blog.ssanj.net/posts/2015-07-15-using-sublime-for-scala-development.html</link>
    <description><![CDATA[<p>Writing Scala code with <a href="https://www.jetbrains.com/idea">Intellij</a> has become quite annoying. Intellij is definitely the tool of choice for Java coding. With all that “enterprisey” brew-ha going on you need all the help you can get.</p>
<p>Lately, Intellij has started to get bloated. And unreliable. It’s always indexing things at the most inconvenient times. This is specially the case when you open a project and hope to start working. It also has quite a few bugs and crashes frequently. It’s also in competition with sbt for its lock file. Forget about running sbt and Intellij at the same time.</p>
<p>I’ve started playing around with using <a href="http://www.sublimetext.com">Sublime Text</a> as a Scala IDE. Initially I did not know how to start work. I had become so dependent on Intellij to tell me everything about anything that I had no clue how to proceed. I couldn’t CTRL + Click. I couldn’t CMD + SPACE. I was powerless.</p>
<p>After persisting for a few hours and after installing a bunch of useful plugins I was getting somewhere.</p>
<p>I found that it was much easier to focus on the code. Intellij was not constantly prompting me for stuff, or indexing or crashing or doing something else distracting. I ended up writing simpler code as I had to use less tooling. The whole experience was much more enjoyable.</p>
<p>In a subsequent article I’ll get into the details on how I customised my Sublime environment to make it useful for Scala development. If in the meantime you are considering leaving Intellij for Sublime, Vim, Atom or some other editor, definitely go for it. You will not regret it.</p>]]></description>
    <pubDate>Wed, 15 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-15-using-sublime-for-scala-development.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Stop Complaining on Twitter</title>
    <link>http://blog.ssanj.net/posts/2015-07-15-stop-complaining-on-twitter.html</link>
    <description><![CDATA[<p>It almost seems like Twitter was built for complaining. You often see people ranting and raging about some inanity. I recently had one of those “ranty” moments and almost tweeted about.</p>
<p>This time I chose to do something different. I chose to disguise my rant in a (bad) joke. Safari on my iPhone was crashing. A lot. Instead of ranting, here’s what I said:</p>
<blockquote>
<p>Safari on the iPhone can’t stop crashing. I’m tempted to let Google record all my conversations so that I can browse the Internet. #apple</p>
</blockquote>
<p>So it’s not that funny, but at least it ties together two recent events. It also made me use my brain and made me smile. :)</p>
<p>The next time you want to rant or complain about something on twitter, consider writing something humorous instead.</p>]]></description>
    <pubDate>Wed, 15 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-15-stop-complaining-on-twitter.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Show the Content of a Git Stash Index</title>
    <link>http://blog.ssanj.net/posts/2015-07-15-show-the-content-of-a-git-stash-index.html</link>
    <description><![CDATA[<p>If you’ve ever wondered how to see the contents of files within a Git stash, you are not alone.</p>
<p>List your Git stashes with:</p>
<pre class="command"><code>git stash list</code></pre>
<p>Then show the contents of the stash with:</p>
<pre class="command"><code>git stash show -p stash@{stash_number}</code></pre>]]></description>
    <pubDate>Wed, 15 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-07-15-show-the-content-of-a-git-stash-index.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 07 Sep 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Use Arguments to the Previous Command in Bash</title>
    <link>http://blog.ssanj.net/posts/2017-09-07-use-arguments-to-the-previous-command-in-bash.html</link>
    <description><![CDATA[<p>Sometimes when running a shell command with some arguments, you might realise that you need to run another command but with the same arguments. If the argument is a long path or such, you really don’t want to have to type it in again. A simple way to run a new command with the previous arguments is:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1 arg2
<span class="kw">newCommand</span> !*
<span class="kw">newCommand</span> arg1 arg2</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">echo</span> A B C D
<span class="kw">echo</span> !*
<span class="kw">A</span> B C D</code></pre></div>
<p>or if you want to use only the last argument:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1
<span class="kw">newCommand</span> !$
<span class="kw">newCommand</span> arg1</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">vim</span> ~/.bash_profile
<span class="kw">source</span> !$</code></pre></div>
<p>or if you want to repeat the last command:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1 arg2 arg3
!!
<span class="kw">command</span> arg1 arg2 arg3</code></pre></div>
<p>It turns out there is a slew of other variations to this syntax as I found out in this <a href="https://stackoverflow.com/questions/4009412/how-to-use-arguments-from-previous-command">Stackoverflow answer</a>:</p>
<pre class="terminal scrollx"><code>!^      first argument
!$      last argument
!*      all arguments
!:2     second argument

!:2-3   second to third arguments
!:2-$   second to last arguments
!:2*    second to last arguments
!:2-    second to next to last arguments

!:0     the command
!!      repeat the previous line</code></pre>
<p>You could also use the <strong>history</strong> command in conjunction:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> !history_line_number:1-indexed-argument-number</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash">$ <span class="kw">history</span>
   <span class="kw">97</span>  rm ~/bin/st
   <span class="kw">98</span>  ln -s /Applications/SourceTree.app/Contents/Resources/stree ~/bin/
$ <span class="kw">ll</span> !98:3
<span class="kw">ll</span> ~/bin/</code></pre></div>]]></description>
    <pubDate>Thu, 07 Sep 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-09-07-use-arguments-to-the-previous-command-in-bash.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to setup the SBT Scripted Test Framework</title>
    <link>http://blog.ssanj.net/posts/2017-09-07-how-to-setup-the-sbt-scripted-test-framework.html</link>
    <description><![CDATA[<p>While I find it fun to write SBT plugins, I’ve always found them tricky to test. Yes, there is the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html">scripted plugin</a> but each time I read the documentation, it put me off using it. It seemed complex with too many steps involved.</p>
<p>More recently I decided to give <em>scripted</em> another go. It was a little frustrating at first because the documentation is not specific enough about which directories need which files. There are a bunch of similarly named files and directories which need to go into specific locations. Confused? I was. But then I had a look at some of the <a href="https://github.com/sbt/sbt/tree/0.13/sbt/src/sbt-test">examples</a> provided and pieced together the required steps which I have outlined below.</p>
<h1 id="use-a-snapshot-version"><a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+1%3A+snapshot">Use a SNAPSHOT version</a></h1>
<p>If you’re not already doing so, update your plugin version in the <strong>build.sbt</strong> file to use a <code>-SNAPSHOT</code> suffix. When the <em>scripted</em> plugin runs, it will locally install your plugin. By using a snapshot version, you prevent version clashes when you do finally publish your plugin; such as where your version X locally is different to your published version X.</p>
<h1 id="within-plugin-root-directory">Within Plugin Root Directory</h1>
<ol style="list-style-type: decimal">
<li>Create a file named <strong>project/scripted.sbt</strong> with the following content:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">libraryDependencies += { <span class="st">&quot;org.scala-sbt&quot;</span> % <span class="st">&quot;scripted-plugin&quot;</span> % sbtVersion.<span class="fu">value</span> }</code></pre></div>
<p>This just adds the <em>scripted</em> plugin as a dependency to your project.</p>
<ol start="2" style="list-style-type: decimal">
<li>Create a file named <strong>scripted.sbt</strong> with the following content:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">ScriptedPlugin.<span class="fu">scriptedSettings</span>

scriptedLaunchOpts := { scriptedLaunchOpts.<span class="fu">value</span> ++
  Seq(<span class="st">&quot;-Xmx1024M&quot;</span>, <span class="st">&quot;-XX:MaxPermSize=256M&quot;</span>, <span class="st">&quot;-Dplugin.version=&quot;</span> + version.<span class="fu">value</span>)
}

scriptedBufferLog := <span class="kw">false</span></code></pre></div>
<p>The above defines the options supplied to the <em>scripted</em> plugin when it is run. It also supplies the plugin version which will be taken from the <code>version</code> value defined in your <strong>build.sbt</strong> file.</p>
<h1 id="within-srcsbt-test-directory">Within src/sbt-test Directory</h1>
<p>One of the steps is to <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+3%3A+src%2Fsbt-test">create a new test source</a> directory for your <em>scripted</em> tests which resides in: <strong>src/sbt-test</strong>. This will be further subdivided by <strong>[testGroup]</strong> and <strong>[testName]</strong> to be of the form: <strong>src/sbt-test/testGroup/testName</strong>.</p>
<p>For example to write a <strong>simple</strong> test for your <strong>XYZ</strong> plugin you’d create the following directory structure:</p>
<pre class="terminal scrollx"><code>src/sbt-test/XYZ/simple</code></pre>
<p>The above test directory (simple) contains a full sbt project within it which will be used to test your plugin. This sbt project will be copied to a temporary directory when the <em>scripted</em> plugin is run.</p>
<p>Within your test directory create the following files:</p>
<ol style="list-style-type: decimal">
<li><strong>src/sbt-test/XYZ/simple/build.sbt</strong></li>
</ol>
<p>This is the build file for the project that will test your plugin. A basic example is given below:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">lazy</span> <span class="kw">val</span> root = (project in <span class="fu">file</span>(<span class="st">&quot;.&quot;</span>))
  .<span class="fu">settings</span>(
    version := <span class="st">&quot;0.1&quot;</span>,
    scalaVersion := <span class="st">&quot;2.10.6&quot;</span>
    <span class="co">//any other config you need here</span>
  )</code></pre></div>
<ol start="2" style="list-style-type: decimal">
<li><strong>src/sbt-test/XYZ/simple/project/plugins.sbt</strong></li>
</ol>
<p>This is the plugin file for the project that will test your plugin. It will need to include your plugin as a dependency:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">sys.<span class="fu">props</span>.<span class="fu">get</span>(<span class="st">&quot;plugin.version&quot;</span>) <span class="kw">match</span> {
  <span class="kw">case</span> Some(x) =&gt; <span class="fu">addSbtPlugin</span>(<span class="st">&quot;your_org&quot;</span> % <span class="st">&quot;your_plugin_name&quot;</span> % x)
  <span class="kw">case</span> _ =&gt; sys.<span class="fu">error</span>(<span class="st">&quot;&quot;&quot;|The system property &#39;plugin.version&#39; is not defined.</span>
                         |Specify <span class="kw">this</span> property using the scriptedLaunchOpts -D.<span class="st">&quot;&quot;&quot;.stripMargin)</span>
}</code></pre></div>
<p>Now you have a basic sbt project that uses your plugin as a dependency.</p>
<ol start="3" style="list-style-type: decimal">
<li><strong>src/sbt-test/testGroup/testName/test</strong></li>
</ol>
<p>This is the test script that will be called from <em>scripted</em>. Write it using the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+4%3A+write+a+script">script syntax</a> specified.</p>
<p>For example to verify that your plugin works and creates a file called <strong>your_output_file</strong> in the <strong>target</strong> directory use:</p>
<pre class="command scrollx"><code>&gt; yourPluginTask
$ exists target/your_output_file</code></pre>
<p>Make sure the the test script is executable:</p>
<pre class="terminal scrollx"><code>chmod +x test</code></pre>
<h1 id="run-the-script">Run the Script</h1>
<p>Run the <em>scripted</em> plugin through SBT to run your test script with:</p>
<pre class="command scrollx"><code>&gt; scripted</code></pre>
<p>As far as I can tell <em>scripted</em> does the following:</p>
<ol style="list-style-type: decimal">
<li>Installs your plugin SNAPSHOT to your local ivy cache.</li>
<li>For each <strong>src/sbt-test/testGroup/testName</strong> directory, copies the content to a temporary directory.</li>
<li>Runs your test script in the temporary directory.</li>
</ol>
<p>Here is the structure of the <strong>sbt-test</strong> directory in my <a href="https://github.com/ssanj/sbt-scuggest">sbt-scuggest</a> plugin:</p>
<pre class="terminal scrollx"><code>src
└── sbt-test
    └── sbt-scuggest
        ├── emptyProject
        │   ├── build.sbt
        │   ├── project
        │   │   └── plugins.sbt
        │   └── test
        ├── existingProject
        │   ├── build.sbt
        │   ├── existingProject.sublime-project
        │   ├── project
        │   │   └── plugins.sbt
        │   └── test
        └── simulate
            ├── build.sbt
            ├── project
            │   └── plugins.sbt
            └── test</code></pre>
<p>Notice how each <strong>testName</strong> directory contains a full SBT project.</p>
<p>Here is the sample output for my <a href="https://github.com/ssanj/sbt-scuggest/tree/master/src/sbt-test/sbt-scuggest/emptyProject">emptyProject test</a>:</p>
<pre class="command scrollx"><code>&gt; scripted
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT-sources.jar ...
[info] Done packaging.
[info] Updating {file:/Volumes/Work/projects/code/scala/toy/sbt-scuggest/}sbt-scuggest...
[info] Resolving org.scala-sbt#sbt-launch;0.13.8 ...
[info] Done updating.
[info] :: delivering :: net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT :: 0.0.6.0-SNAPSHOT :: integration :: Thu Sep 07 00:06:33 AEST 2017
[info]  delivering ivy file to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/ivy-0.0.6.0-SNAPSHOT.xml
[info] Main Scala API documentation to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/api...
[info] Compiling 2 Scala sources to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/classes...
model contains 17 documentable templates
[info] Main Scala API documentation successful.
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT-javadoc.jar ...
[info] Done packaging.
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT.jar ...
[info] Done packaging.
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/jars/sbt-scuggest.jar
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/srcs/sbt-scuggest-sources.jar
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/docs/sbt-scuggest-javadoc.jar
[info]  published ivy to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/ivys/ivy.xml
Running sbt-scuggest / emptyProject
[error] Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256M; support was removed in 8.0
[info] Getting org.scala-sbt sbt 0.13.8 ...
[info] :: retrieving :: org.scala-sbt#boot-app
[info]  confs: [default]
[info]  52 artifacts copied, 0 already retrieved (17674kB/116ms)
[info] Getting Scala 2.10.4 (for sbt)...
[info] :: retrieving :: org.scala-sbt#boot-scala
[info]  confs: [default]
[info]  5 artifacts copied, 0 already retrieved (24459kB/57ms)
[info] [info] Loading project definition from /private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/project
[info] [info] Updating {file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/project/}emptyproject-build...
[info] [info] Resolving net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT ...
       [info] Resolving net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT ...
       [info] Resolving com.typesafe.play#play-json_2.10;2.4.8 ...
       [info] Resolving org.scala-lang#scala-library;2.10.4 ...
       [info] Resolving com.typesafe.play#play-iteratees_2.10;2.4.8 ...
       [info] Resolving org.scala-stm#scala-stm_2.10;0.7 ...
       [info] Resolving com.typesafe#config;1.3.0 ...
       [info] Resolving com.typesafe.play#play-functional_2.10;2.4.8 ...
       [info] Resolving com.typesafe.play#play-datacommons_2.10;2.4.8 ...
       [info] Resolving joda-time#joda-time;2.8.1 ...
       [info] Resolving org.joda#joda-convert;1.7 ...
       [info] Resolving org.scala-lang#scala-reflect;2.10.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-core;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-annotations;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-databind;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.datatype#jackson-datatype-jdk8;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.datatype#jackson-datatype-jsr310;2.5.4 ...
       [info] Resolving org.scala-sbt#sbt;0.13.8 ...
       [info] Resolving org.scala-sbt#main;0.13.8 ...
       [info] Resolving org.scala-sbt#actions;0.13.8 ...
       [info] Resolving org.scala-sbt#classpath;0.13.8 ...
       [info] Resolving org.scala-lang#scala-compiler;2.10.4 ...
       [info] Resolving org.scala-sbt#launcher-interface;0.13.8 ...
       [info] Resolving org.scala-sbt#interface;0.13.8 ...
       [info] Resolving org.scala-sbt#io;0.13.8 ...
       [info] Resolving org.scala-sbt#control;0.13.8 ...
       [info] Resolving org.scala-sbt#completion;0.13.8 ...
       [info] Resolving org.scala-sbt#collections;0.13.8 ...
       [info] Resolving jline#jline;2.11 ...
       [info] Resolving org.scala-sbt#api;0.13.8 ...
       [info] Resolving org.scala-sbt#compiler-integration;0.13.8 ...
       [info] Resolving org.scala-sbt#incremental-compiler;0.13.8 ...
       [info] Resolving org.scala-sbt#logging;0.13.8 ...
       [info] Resolving org.scala-sbt#process;0.13.8 ...
       [info] Resolving org.scala-sbt#relation;0.13.8 ...
       [info] Resolving org.scala-sbt#compile;0.13.8 ...
       [info] Resolving org.scala-sbt#classfile;0.13.8 ...
       [info] Resolving org.scala-sbt#persist;0.13.8 ...
       [info] Resolving org.scala-tools.sbinary#sbinary_2.10;0.4.2 ...
       [info] Resolving org.scala-sbt#compiler-ivy-integration;0.13.8 ...
       [info] Resolving org.scala-sbt#ivy;0.13.8 ...
       [info] Resolving org.scala-sbt#cross;0.13.8 ...
       [info] Resolving org.scala-sbt.ivy#ivy;2.3.0-sbt-fccfbd44c9f64523b61398a0155784dcbaeae28f ...
       [info] Resolving com.jcraft#jsch;0.1.46 ...
       [info] Resolving org.scala-sbt#serialization_2.10;0.1.1 ...
       [info] Resolving org.scala-lang.modules#scala-pickling_2.10;0.10.0 ...
       [info] Resolving org.scalamacros#quasiquotes_2.10;2.0.1 ...
       [info] Resolving org.json4s#json4s-core_2.10;3.2.10 ...
       [info] Resolving org.json4s#json4s-ast_2.10;3.2.10 ...
       [info] Resolving com.thoughtworks.paranamer#paranamer;2.6 ...
       [info] Resolving org.spire-math#jawn-parser_2.10;0.6.0 ...
       [info] Resolving org.spire-math#json4s-support_2.10;0.6.0 ...
       [info] Resolving org.scala-sbt#run;0.13.8 ...
       [info] Resolving org.scala-sbt#task-system;0.13.8 ...
       [info] Resolving org.scala-sbt#tasks;0.13.8 ...
       [info] Resolving org.scala-sbt#tracking;0.13.8 ...
       [info] Resolving org.scala-sbt#cache;0.13.8 ...
       [info] Resolving org.scala-sbt#testing;0.13.8 ...
       [info] Resolving org.scala-sbt#test-agent;0.13.8 ...
       [info] Resolving org.scala-sbt#test-interface;1.0 ...
       [info] Resolving org.scala-sbt#main-settings;0.13.8 ...
       [info] Resolving org.scala-sbt#apply-macro;0.13.8 ...
       [info] Resolving org.scala-sbt#command;0.13.8 ...
       [info] Resolving org.scala-sbt#logic;0.13.8 ...
       [info] Resolving org.scala-sbt#compiler-interface;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_8_2;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_9_2;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_9_3;0.13.8 ...
       [info] Resolving org.scala-lang#jline;2.10.4 ...
       [info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] [info] Done updating.
[info] [info] Set current project to emptyProject (in build file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/)
[info] [info] Defining *:scuggestSimulate
[info] [info] The new value will be used by *:scuggestGen
[info] [info] Reapplying settings...
[info] [info] Set current project to emptyProject (in build file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/)
[info] [info] Updating {file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/}root...
[info] [info] Resolving org.scala-lang#scala-library;2.10.6 ...
       [info] Resolving org.scala-lang#scala-compiler;2.10.6 ...
       [info] Resolving org.scala-lang#scala-reflect;2.10.6 ...
       [info] Resolving org.scala-lang#jline;2.10.6 ...
       [info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] [info] Done updating.
[info] [info] successfully updated emptyProject.sublime-project
[info] [success] Total time: 0 s, completed 07/09/2017 12:06:47 AM
[info] [success] Total time: 0 s, completed 07/09/2017 12:06:47 AM
[info] + sbt-scuggest / emptyProject</code></pre>
<h1 id="custom-assertions">Custom Assertions</h1>
<p>Custom assertions can be created as given in the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+6%3A+custom+assertion">docs</a> or examples.</p>
<h1 id="debugging">Debugging</h1>
<p>There are some additional niceties like pausing your test with:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="co">//your test script steps</span>
$ pause</code></pre></div>
<p>which allows you to poke around the temporary project directory if you need to before continuing with assertions.</p>
<p>And that should be about all you need to know to get up and running with <em>scripted</em>. There is some additional doco <a href="http://eed3si9n.com/testing-sbt-plugins">here</a>.</p>]]></description>
    <pubDate>Thu, 07 Sep 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-09-07-how-to-setup-the-sbt-scripted-test-framework.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Call Sourcetree from the Commandline</title>
    <link>http://blog.ssanj.net/posts/2017-08-10-how-to-call-sourcetree-from-the-commandline.html</link>
    <description><![CDATA[<p>I use <a href="https://www.atlassian.com/software/sourcetree">Sourcetree</a> to do most of my diffing when I use Git. One thing that has urked me is that I’d have to always launch the application from Spotlight or Alfred when I wanted to see the state of some Git diffs. Strangely, when I tried to install Sourcetree’s commandline tools, I got the following error:</p>
<pre class="terminal scrollx"><code>Installation failed
Unable to install command line tools, please refer to the system logs for more details.</code></pre>
<p>While looking for a solution to this problem, I found a <a href="https://community.atlassian.com/t5/SourceTree-questions/SourceTree-command-line-tools-installation-failed/qaq-p/85023">simpler alternative</a> by Philip Borenstein:</p>
<blockquote>
<p>This has been annoying me for a while. Here’s a workaround that works for me: $ ln -s /Applications/SourceTree.app/Contents/Resources/stree /usr/local/bin/ I use homebrew, so /usr/local/bin is already in my path and owned by me (instead of root)</p>
</blockquote>
<p>All you need to do is add the <strong>stree</strong> application to your path:</p>
<pre class="terminal scrollx"><code>ln -s /Applications/SourceTree.app/Contents/Resources/stree ~/bin/</code></pre>
<p>and you are good to go!</p>]]></description>
    <pubDate>Thu, 10 Aug 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-08-10-how-to-call-sourcetree-from-the-commandline.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Rename a Git Branch</title>
    <link>http://blog.ssanj.net/posts/2017-07-31-how-to-rename-a-git-branch.html</link>
    <description><![CDATA[<p>So you’ve been working on a Git branch on some new feature and when you go to push your changes you realise your branch name is incorrect. You forgot to include the issue number or some such and now your pull request is going to be hard to track down to a feature.</p>
<p>What would be useful is to be able to rename your current branch without losing all your work. The Git incantation for this is surprisingly easy:</p>
<pre class="command scrollx"><code>git branch -m &lt;old name&gt; &lt;new name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git branch -m feature-x [123]-feature-x</code></pre>
<p>The <strong>-m</strong> option moves an existing branch into a new one:</p>
<blockquote>
<p>-m, –move Move/rename a branch and the corresponding reflog.</p>
</blockquote>
<p>If you’ve already pushed the old branch name to remote, you can delete it with:</p>
<pre class="command scrollx"><code>git push origin :&lt;old name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git push origin :feature-x</code></pre>
<p>Then simply push your changes for the new branch to remote:</p>
<pre class="command scrollx"><code>git push origin [123]-feature-x</code></pre>
<p>and you’re done. :)</p>]]></description>
    <pubDate>Mon, 31 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-31-how-to-rename-a-git-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Remove Remotely Deleted Branches from your Local Git Repository</title>
    <link>http://blog.ssanj.net/posts/2017-07-31-how-to-remove-remotely-delete-branches-from-your-local-git-repository.html</link>
    <description><![CDATA[<p>Once you start working on feature branches you often find that you have a bunch of local branches that are tracking remote branches that no longer exist.</p>
<p>One easy way of keeping your local and remote repositories in sync is to use the <em>prune</em> option of the Git <strong>remote</strong> command:</p>
<pre class="command scrollx"><code>git remote prune &lt;remote name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git remote prune origin</code></pre>
<p>From the docs:</p>
<blockquote>
<p>Deletes all stale remote-tracking branches under <name>. These stale branches have already been removed from the remote repository referenced by <name>, but are still locally available in “remotes/<name>”.</p>
</blockquote>
<blockquote>
<p>With –dry-run option, report what branches will be pruned, but do not actually prune them.</p>
</blockquote>
<p>This will remove all local references that track remote branches that have been deleted and keep your local repository clean and tidy. :)</p>]]></description>
    <pubDate>Mon, 31 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-31-how-to-remove-remotely-delete-branches-from-your-local-git-repository.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Querying for Commits on Master using Github Graphql API v4</title>
    <link>http://blog.ssanj.net/posts/2017-07-30-querying-for-commits-on-master-using-github-graphql-api-v4.html</link>
    <description><![CDATA[<p>I was pretty excited to see that the new <a href="https://developer.github.com/v4/">Github API (v4) used Graphql</a>. I wanted to retrieve the last x commits from master for a project I was working on. Should be easy right? After a bunch of time wasted on <a href="https://developer.github.com/v4/explorer/">GitHub’s GraphQL Explorer</a> I came up with the following which didn’t really solve my issue:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript">query<span class="op">{</span>
  <span class="at">repository</span>(<span class="dt">owner</span><span class="op">:</span> <span class="st">&quot;typelevel&quot;</span><span class="op">,</span> <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;cats&quot;</span>) <span class="op">{</span>
    defaultBranchRef <span class="op">{</span>
      name
      prefix
      <span class="at">associatedPullRequests</span>(<span class="dt">states</span><span class="op">:</span> [MERGED]<span class="op">,</span> <span class="dt">last</span><span class="op">:</span> <span class="dv">5</span>) <span class="op">{</span>
        edges <span class="op">{</span>
          node <span class="op">{</span>
            title
          <span class="op">}</span>
        <span class="op">}</span>
      <span class="op">}</span>
    <span class="op">}</span>
  <span class="op">}</span>
<span class="op">}</span></code></pre></div>
<p>It was limited to PRs and didn’t really seem like a nice solution.</p>
<p>I then <a href="https://stackoverflow.com/questions/45397333/get-last-x-commits-from-github-repo-using-github-api-v4">asked this question on Stackoverflow</a>.</p>
<p>Meanwhile while rummaging around the <a href="https://platform.github.community">Github platform Forum</a> I came across <a href="https://platform.github.community/t/getting-commits-parents/1965">this post</a> that gave me some clues:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="op">{</span>
  <span class="at">repository</span>(<span class="dt">owner</span><span class="op">:</span> <span class="st">&quot;golang&quot;</span><span class="op">,</span> <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;go&quot;</span>) <span class="op">{</span>
    defaultBranchRef <span class="op">{</span>
      target <span class="op">{</span>
        ... <span class="at">on</span> <span class="at">Commit</span> <span class="op">{</span>
          <span class="at">history</span>(<span class="dt">first</span><span class="op">:</span> <span class="dv">10</span>) <span class="op">{</span>
            pageInfo <span class="op">{</span>
              hasNextPage
              endCursor
            <span class="op">}</span>
            edges <span class="op">{</span>
              node <span class="op">{</span>
                oid
                messageHeadline
              <span class="op">}</span>
            <span class="op">}</span>
          <span class="op">}</span>
        <span class="op">}</span>
      <span class="op">}</span>
    <span class="op">}</span>
  <span class="op">}</span>
<span class="op">}</span></code></pre></div>
<p>So I modified the above to suit my needs and came up with this query that returned the most recent commits on master:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript">query <span class="op">{</span>
  <span class="at">repository</span>(<span class="dt">owner</span><span class="op">:</span> <span class="st">&quot;typelevel&quot;</span><span class="op">,</span> <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;cats&quot;</span>) <span class="op">{</span>
    <span class="at">ref</span>(<span class="dt">qualifiedName</span><span class="op">:</span> <span class="st">&quot;master&quot;</span>) <span class="op">{</span>
      target <span class="op">{</span>
        ... <span class="at">on</span> <span class="at">Commit</span> <span class="op">{</span>
          <span class="at">history</span>(<span class="dt">first</span><span class="op">:</span> <span class="dv">10</span>) <span class="op">{</span>
            pageInfo <span class="op">{</span>
              hasNextPage
              endCursor
            <span class="op">}</span>
            edges <span class="op">{</span>
              node <span class="op">{</span>
                oid
                messageHeadline
              <span class="op">}</span>
            <span class="op">}</span>
          <span class="op">}</span>
        <span class="op">}</span>
      <span class="op">}</span>
    <span class="op">}</span>
  <span class="op">}</span>
<span class="op">}</span></code></pre></div>
<p>Graphql was supposed to make understanding the structure of an API much easier with automatically generated documentation and tools like <a href="https://github.com/graphql/graphiql">Graphiql</a>. What still seems to be missing is how to sort through <a href="http://graphql.org/learn/schema/#interfaces">interfaces</a> and their implementations easily to figure out what type of objects are returned from query.</p>
<p>For example in the Github API, the <strong>Repository</strong> object implements the following other interfaces:</p>
<ol style="list-style-type: decimal">
<li>Node</li>
<li>ProjectOwner</li>
<li>Subscribable</li>
<li>Starrable</li>
<li>UniformResourceLocatable</li>
<li>RepositoryInfo</li>
</ol>
<p>And if we just look at the <strong>Node</strong> interface, we see that it has the following implementations:</p>
<ol style="list-style-type: decimal">
<li>Organization</li>
<li>Project</li>
<li>ProjectColumn</li>
<li>ProjectCard</li>
<li>Issue</li>
<li>User</li>
<li>Repository</li>
<li>CommitComment</li>
<li>Reaction</li>
<li>Commit</li>
<li>Status</li>
<li>StatusContext</li>
<li>Tree</li>
<li>Ref</li>
<li>PullRequest</li>
<li>Label</li>
<li>IssueComment</li>
<li>PullRequestCommit</li>
<li>Milestone</li>
<li>ReviewRequest</li>
<li>PullRequestReview</li>
<li>PullRequestReviewComment</li>
<li>CommitCommentThread</li>
<li>PullRequestReviewThread</li>
<li>ClosedEvent</li>
<li>ReopenedEvent</li>
<li>SubscribedEvent</li>
<li>UnsubscribedEvent</li>
<li>MergedEvent</li>
<li>ReferencedEvent</li>
<li>CrossReferencedEvent</li>
<li>AssignedEvent</li>
<li>UnassignedEvent</li>
<li>LabeledEvent</li>
<li>UnlabeledEvent</li>
<li>MilestonedEvent</li>
<li>DemilestonedEvent</li>
<li>RenamedTitleEvent</li>
<li>LockedEvent</li>
<li>UnlockedEvent</li>
<li>DeployedEvent</li>
<li>Deployment</li>
<li>DeploymentStatus</li>
<li>HeadRefDeletedEvent</li>
<li>HeadRefRestoredEvent</li>
<li>HeadRefForcePushedEvent</li>
<li>BaseRefForcePushedEvent</li>
<li>ReviewRequestedEvent</li>
<li>ReviewRequestRemovedEvent</li>
<li>ReviewDismissedEvent</li>
<li>Language</li>
<li>ProtectedBranch</li>
<li>PushAllowance</li>
<li>Team</li>
<li>ReviewDismissalAllowance</li>
<li>Release</li>
<li>ReleaseAsset</li>
<li>RepositoryTopic</li>
<li>Topic</li>
<li>Gist</li>
<li>GistComment</li>
<li>OrganizationIdentityProvider</li>
<li>ExternalIdentity</li>
<li>Blob</li>
<li>Bot</li>
<li>RepositoryInvitation</li>
<li>Tag</li>
<li>AddedToProjectEvent</li>
<li>BaseRefChangedEvent</li>
<li>CommentDeletedEvent</li>
<li>ConvertedNoteToIssueEvent</li>
<li>MentionedEvent</li>
<li>MovedColumnsInProjectEvent</li>
</ol>
<p>That’s a few too many options to manually sort through.</p>
<p>The <a href="http://graphql.org/learn/schema/#union-types">example documentation</a> has a very simple example with a few implementations of an interface:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="op">{</span>
  <span class="at">search</span>(<span class="dt">text</span><span class="op">:</span> <span class="st">&quot;an&quot;</span>) <span class="op">{</span>
    ... <span class="at">on</span> <span class="at">Human</span> <span class="op">{</span>
      name
      height
    <span class="op">}</span>
    ... <span class="at">on</span> <span class="at">Droid</span> <span class="op">{</span>
      name
      primaryFunction
    <span class="op">}</span>
    ... <span class="at">on</span> <span class="at">Starship</span> <span class="op">{</span>
      name
      length
    <span class="op">}</span>
  <span class="op">}</span>
<span class="op">}</span></code></pre></div>
<p>While this seems manageable it can easily get out of hand as per the Github API.</p>
<p>So even though Graphql does provide automatic documentation, if your domain model is complex enough, you probably still need to provide the users of your API some documentation on how everything hangs together.</p>]]></description>
    <pubDate>Sun, 30 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-30-querying-for-commits-on-master-using-github-graphql-api-v4.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Logging Objects in Javascript</title>
    <link>http://blog.ssanj.net/posts/2017-07-27-logging-objects-in-javascript.html</link>
    <description><![CDATA[<p>There seem to be three ways you can log out an object in Javascript and each gives you different results. A co-worker pointed out these differences to me so I thought I’d share that information here.</p>
<p><em>These objects are logged to the Chrome console</em></p>
<p>Let’s assume we have the following <strong>contribs</strong> object in scope:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="kw">const</span> contribs <span class="op">=</span> <span class="op">{</span>
  <span class="st">&quot;data&quot;</span><span class="op">:</span> <span class="op">{</span>
    <span class="st">&quot;viewer&quot;</span><span class="op">:</span> <span class="op">{</span>
      <span class="st">&quot;login&quot;</span><span class="op">:</span> <span class="st">&quot;ssanj&quot;</span><span class="op">,</span>
      <span class="st">&quot;contributedRepositories&quot;</span><span class="op">:</span> <span class="op">{</span>
        <span class="st">&quot;nodes&quot;</span><span class="op">:</span> [
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;giter8&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;scalacheck&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;sbt-assembly&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;package_control_channel&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;dotty&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;scapegoat&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;website&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;ssanj.github.io&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;babyloncandle&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;ensime.github.io&quot;</span>
          <span class="op">}</span>
        ]
      <span class="op">}</span>
    <span class="op">}</span>
  <span class="op">}</span>
<span class="op">};</span></code></pre></div>
<h2 id="use-tostring">Use toString</h2>
<p>With</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="va">console</span>.<span class="at">log</span>(<span class="va">contribs</span>.<span class="at">toString</span>())<span class="op">;</span></code></pre></div>
<p>we get the following:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="st">&quot;[object Object]&quot;</span></code></pre></div>
<p>And this is not very useful. If you do see this output when you are trying to log out the contents of an object then choose on of the other two options mentioned below.</p>
<h2 id="use-json.stringify">Use JSON.stringify</h2>
<p>With</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="va">console</span>.<span class="at">log</span>(<span class="va">JSON</span>.<span class="at">stringify</span>(contribs))<span class="op">;</span></code></pre></div>
<p>we get:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="st">&quot;{&quot;</span>data<span class="st">&quot;:{&quot;</span>viewer<span class="st">&quot;:{&quot;</span>login<span class="st">&quot;:&quot;</span>ssanj<span class="st">&quot;,&quot;</span>contributedRepositories<span class="st">&quot;:{&quot;</span>nodes<span class="st">&quot;:[{&quot;</span>name<span class="st">&quot;:&quot;</span>giter8<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>scalacheck<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>sbt<span class="op">-</span>assembly<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>package_control_channel<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>dotty<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>scapegoat<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>website<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span><span class="va">ssanj</span>.<span class="va">github</span>.<span class="at">io</span><span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span>babyloncandle<span class="st">&quot;},{&quot;</span>name<span class="st">&quot;:&quot;</span><span class="va">ensime</span>.<span class="va">github</span>.<span class="at">io</span><span class="st">&quot;}]}}}}&quot;</span></code></pre></div>
<p>While that is more useful than the toString() option, it would be nice if we can pretty print the same information. Luckily that functionality is built into JSON.stringify:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="va">console</span>.<span class="at">log</span>(<span class="va">JSON</span>.<span class="at">stringify</span>(contribs<span class="op">,</span> <span class="kw">null</span><span class="op">,</span> <span class="dv">2</span>))<span class="op">;</span></code></pre></div>
<p>which results in:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="st">&quot;{</span>
  <span class="st">&quot;data&quot;</span><span class="op">:</span> <span class="op">{</span>
    <span class="st">&quot;viewer&quot;</span><span class="op">:</span> <span class="op">{</span>
      <span class="st">&quot;login&quot;</span><span class="op">:</span> <span class="st">&quot;ssanj&quot;</span><span class="op">,</span>
      <span class="st">&quot;contributedRepositories&quot;</span><span class="op">:</span> <span class="op">{</span>
        <span class="st">&quot;nodes&quot;</span><span class="op">:</span> [
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;giter8&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;scalacheck&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;sbt-assembly&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;package_control_channel&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;dotty&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;scapegoat&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;website&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;ssanj.github.io&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;babyloncandle&quot;</span>
          <span class="op">},</span>
          <span class="op">{</span>
            <span class="st">&quot;name&quot;</span><span class="op">:</span> <span class="st">&quot;ensime.github.io&quot;</span>
          <span class="op">}</span>
        ]
      <span class="op">}</span>
    <span class="op">}</span>
  <span class="op">}</span>
}<span class="st">&quot;</span></code></pre></div>
<h2 id="use-the-object">Use the object</h2>
<p>Finally if we directly log the object:</p>
<div class="sourceCode"><pre class="sourceCode javascript scrollx"><code class="sourceCode javascript"><span class="va">console</span>.<span class="at">log</span>(contribs)<span class="op">;</span></code></pre></div>
<p>we get the Javascript object graph for <strong>contrib</strong>:</p>
<div class="figure">
<img src="/images/logging-objects-in-js/log-object-directly.jpg" alt="Direct Logging" />
<p class="caption">Direct Logging</p>
</div>
<p>which we can then explore at our leisure.</p>]]></description>
    <pubDate>Thu, 27 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-27-logging-objects-in-javascript.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Working with Arrows in Scala</title>
    <link>http://blog.ssanj.net/posts/2017-07-02-working-with-arrows-in-scala.html</link>
    <description><![CDATA[<p>In the <a href="http://sanj.ink/posts/2017-06-12-reading-configuration-with-kleisli-arrows.html">last article</a> we looked at how we could read configuration with a Kleisli Arrow similar to using a Reader Monad.</p>
<p>We’ve been using Arrows for the last couple of articles but haven’t defined what an Arrow is exactly.</p>
<p>An Arrow is a computation that runs within a context which takes in an input and returns an output. A more detailed explanation from <a href="https://wiki.haskell.org/Typeclassopedia#Arrow">Typeclassopedia</a> states:</p>
<blockquote>
<p>The Arrow class represents another abstraction of computation, in a similar vein to Monad and Applicative. However, unlike Monad and Applicative, whose types only reflect their output, the type of an Arrow computation reflects both its input and output. Arrows generalize functions: if arr is an instance of Arrow, a value of type b <code>arr</code> c can be thought of as a computation which takes values of type b as input, and produces values of type c as output. In the (-&gt;) instance of Arrow this is just a pure function; in general, however, an arrow may represent some sort of “effectful” computation</p>
</blockquote>
<p>In <a href="http://typelevel.org/cats/">Cats</a> the <a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Arrow.scala#L8">Arrow typeclass</a> is defined with the type constructor F which has two type holes:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Arrow[F[_, _]] <span class="co">//simplified</span></code></pre></div>
<p>These two type holes correspond to the input and output types of the Arrow respectively. <strong>F</strong> can be any type constructor that takes two types and performs a mapping between them. A <strong>scala.Function1</strong> is an example of <strong>F</strong>, as is the <strong>Kleisli Arrow</strong> we saw in previous articles. It might be helpful to think of Arrows as simple functions from one type to another for the moment.</p>
<p>Lets now go through some of the functions defined on Arrow and how they are used. For the remainder of the article lets assume that the type constructor supplied to Arrow is a <a href="http://www.scala-lang.org/api/current/scala/Function1.html"><strong>scala.Function1</strong></a>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">trait</span> Function1[-T1, +R] <span class="kw">extends</span> AnyRef</code></pre></div>
<p>and the resulting Arrow is:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> fa = Arrow[Function1]</code></pre></div>
<h2 id="liftarr"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Arrow.scala#L13">lift</a>/<a href="https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Arrow.scala#L16">arr</a></h2>
<p>This is a simple function to construct an Arrow given its input and output types. This is defined in Cats as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> lift[A, B](f: A =&gt; B): F[A, B]</code></pre></div>
<p>For example to lift a function that goes from a <strong>String</strong> to an <strong>Int</strong> into <strong>F</strong> we’d do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> findLength: String =&gt; Int = _.<span class="fu">length</span>
fa.<span class="fu">lift</span>(f) <span class="co">//Function1[String, Int]</span></code></pre></div>
<p>Since <strong>findLength</strong> is already a <strong>scala.Function1</strong> it is a little pointless to lift it into a <strong>scala.Function1</strong> but hopefully its usage is clear.</p>
<p>In <a href="https://github.com/scalaz">Scalaz</a> this function is defined as arr:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> arr[A, B](f: A =&gt; B): A =&gt;: B</code></pre></div>
<p>where <strong>=&gt;:</strong> is a typeconstructor similar to <strong>F</strong>.</p>
<h2 id="id"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Category.scala#L11">id</a></h2>
<p>The <strong>id</strong> function is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> id[A]: F[A, A]</code></pre></div>
<p>The type signature of the above tells us that <strong>F</strong> returns the input type A as its output, essentially giving us the <a href="http://www.scala-lang.org/api/2.11.11/index.html#scala.Predef$@identity%5BA%5D(x:A):A">identity</a> function.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> intF1 = fa.<span class="fu">id</span>[Int] <span class="co">//Function1[Int, Int]</span>
<span class="fu">intF1</span>(<span class="dv">10</span>) <span class="co">//returns 10</span></code></pre></div>
<h2 id="first"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/functor/Strong.scala#L24">first</a></h2>
<p>The <strong>first</strong> function is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> first[A, B, C](fa: F[A, B]): F[(A, C), (B, C)]</code></pre></div>
<p>The <strong>first</strong> function takes Arrow <strong>fa</strong> from <strong>A</strong> =&gt; <strong>B</strong> and returns another Arrow (<strong>A</strong>, <strong>C</strong>) =&gt; (<strong>B</strong>, <strong>C</strong>). It applies the function in <strong>fa</strong> to the first parameter of the tuple, which is an <strong>A</strong> and converts it to a <strong>B</strong>. The second parameter of the tuple it leaves untouched and returns a (<strong>B</strong>, <em>C</em>).</p>
<div class="figure">
<img src="/images/arrow-functions/arrow-first3.jpg" alt="First" />
<p class="caption">First</p>
</div>
<p>For the remaining examples we have the following definitions at our disposal:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Name(first: String, last: String)
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">Age</span>(age: Int)
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">Person</span>(name: Name, age: Age)

<span class="kw">val</span> name = Name(<span class="st">&quot;Nagate&quot;</span>, <span class="st">&quot;Tanikaze&quot;</span>)
<span class="kw">val</span> age = <span class="fu">Age</span>(<span class="dv">22</span>)

<span class="kw">def</span> upperFirstName: String =&gt; String = _.<span class="fu">toUpperCase</span>
<span class="kw">def</span> doubleNumber: Int =&gt; Int = _ * <span class="dv">2</span>

<span class="kw">def</span> upperName: Name =&gt; Name = n =&gt; Name(<span class="fu">upperFirstName</span>(n.<span class="fu">first</span>), n.<span class="fu">last</span>)
<span class="kw">def</span> doubleAge: Age =&gt; Age = a =&gt; <span class="fu">Age</span>(<span class="fu">doubleNumber</span>(a.<span class="fu">age</span>))</code></pre></div>
<p>For example if we wanted to apply a function to the <strong>Name</strong> element of a <strong>Name</strong> and <strong>Age</strong> pair and but wanted to leave the <strong>Age</strong> element untouched we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> onlyNameF: ((Name, Age)) =&gt; (Name, Age) = fa.<span class="fu">first</span>[Name, Name, Age](upperName)
<span class="kw">val</span> toPersonF: ((Name, Age)) =&gt; Person = onlyNameF <span class="fu">andThen</span> (Person.<span class="fu">apply</span> _).<span class="fu">tupled</span>
<span class="fu">toPersonF</span>(name, age) <span class="co">//returns Person(Name(NAGATE,Tanikaze),Age(22))</span></code></pre></div>
<p>Notice how the <strong>Age</strong> value of the input is unchanged.</p>
<h2 id="second"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/functor/Strong.scala#L39">second</a></h2>
<p>The <strong>second</strong> function is very similar to <strong>first</strong> only with its parameters switched. It is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> second[A, B, C](fa: F[A, B]): F[(C, A), (C, B)]</code></pre></div>
<p>The <strong>second</strong> function takes Arrow <strong>fa</strong> from <strong>A</strong> =&gt; <strong>B</strong> and returns another Arrow with takes in a tuple of (<strong>C</strong>, <strong>A</strong>) =&gt; (<strong>C</strong>, <strong>B</strong>). It applies the function in <strong>fa</strong> to the second parameter of the tuple <strong>A</strong> and converts it to a <strong>B</strong>. The first parameter of the tuple it leaves untouched and returns a (<em>C</em>, <strong>B</strong>).</p>
<div class="figure">
<img src="/images/arrow-functions/arrow-second2.jpg" alt="Second" />
<p class="caption">Second</p>
</div>
<p>For example if we wanted to apply a function to the <strong>Age</strong> element of a <strong>Name</strong> and <strong>Age</strong> pair and but wanted to leave the <strong>Name</strong> element untouched we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> onlyAgeF: ((Name, Age)) =&gt; (Name, Age) = fa.<span class="fu">second</span>[Age, Age, Name](doubleAge)
<span class="kw">val</span> toPersonF: ((Name, Age)) =&gt; Person = onlyAgeF <span class="fu">andThen</span> (Person.<span class="fu">apply</span> _).<span class="fu">tupled</span>
<span class="fu">toPersonF</span>(name, age) <span class="co">//returns Person(Name(Nagate,Tanikaze),Age(44))</span></code></pre></div>
<p>Notice how the <strong>Name</strong> value of the input is unchanged.</p>
<h2 id="splitproduct"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Split.scala">split/product/***</a></h2>
<p>The <strong>split</strong> function is an application of <strong>first</strong> and <strong>second</strong>. It is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> split[A, B, C, D](f: F[A, B], g: F[C, D]): F[(A, C), (B, D)]</code></pre></div>
<p>The <strong>split</strong> function takes Arrow <strong>f</strong> from <strong>A</strong> =&gt; <strong>B</strong> and an Arrow <strong>g</strong> from <strong>C</strong> =&gt; <strong>D</strong> and returns another Arrow with takes in a tuple of (<strong>A</strong>, <strong>C</strong>) =&gt; (<strong>B</strong>, <strong>D</strong>). It applies the function in <strong>f</strong> to the first parameter of the tuple <strong>A</strong> and converts it to a <strong>B</strong>. It also applies the function in <strong>g</strong> to the second parameter of the tuple <strong>C</strong> and converts it to a <strong>D</strong> returning a final result of (<strong>B</strong>, <strong>D</strong>). Split has the symbolic representation of <strong>***</strong> and is sometimes referred to as the <strong>product</strong> function because it applies multiple functions to multiple inputs.</p>
<div class="figure">
<img src="/images/arrow-functions/arrow-split3.jpg" alt="Split" />
<p class="caption">Split</p>
</div>
<p>For example if we wanted to apply a function to the <strong>Name</strong> and <strong>Age</strong> element of a <strong>Name</strong> and <strong>Age</strong> pair at once we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> bothNameAndAgeF: ((Name, Age)) =&gt; (Name, Age) = fa.<span class="fu">split</span>[Name, Name, Age, Age](upperName, doubleAge)
<span class="kw">val</span> toPersonF: ((Name, Age)) =&gt; Person = bothNameAndAgeF <span class="fu">andThen</span> (Person.<span class="fu">apply</span> _).<span class="fu">tupled</span>
<span class="fu">toPersonF</span>(name, age)<span class="co">//Person(Name(NAGATE,Tanikaze),Age(44))</span></code></pre></div>
<h2 id="combinefanout"><a href="https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Arrow.scala#L55">combine/fanout/&amp;&amp;&amp;</a></h2>
<p><strong>combine</strong> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> combine[A, B, C](fab: F[A, B], fac: =&gt; F[A, C]): F[A, (B, C)]</code></pre></div>
<p>Although Cats does not define <strong>combine</strong>, <a href="https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Arrow.scala#L55">scalaz does</a>. For the purpose of this post I’ve created an implementation of <strong>combine</strong> in the <a href="https://github.com/ssanj/arrows/blob/master/src/main/scala/net/ssanj/arrow/ArrowFuncs.scala#L8">example source</a>.</p>
<p>The <strong>combine</strong> function takes Arrow <strong>fab</strong> from <strong>A</strong> =&gt; <strong>B</strong> and an Arrow <strong>fac</strong> from <strong>A</strong> =&gt; <strong>C</strong> and returns another Arrow which takes in an input of <strong>A</strong>, and returns a tuple of (<strong>B</strong>, <strong>C</strong>). It’s important to note that the same input <strong>A</strong> is supplied to both arrows <strong>fab</strong> and <strong>fac</strong>.</p>
<div class="figure">
<img src="/images/arrow-functions/arrow-combine.jpg" alt="Combine" />
<p class="caption">Combine</p>
</div>
<p>For example given a <strong>Person</strong> if we want to break it into primitive representations of its <strong>Name</strong> and <strong>Age</strong> fields we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> person = <span class="fu">Person</span>(name, age)
<span class="kw">val</span> combineName: Person =&gt; String = {
  <span class="kw">case</span> <span class="fu">Person</span>(Name(first, last), _) =&gt; s<span class="st">&quot;$first $last&quot;</span>
}
<span class="kw">val</span> combineAge: Person =&gt; Int = _.<span class="fu">age</span>.<span class="fu">age</span>
<span class="kw">val</span> combineF: Person =&gt; (String, Int) = ArrowFuncs.<span class="fu">combine</span>(combineName, combineAge)
<span class="fu">combineF</span>(person) <span class="co">// (&quot;Nagate Tanikaze&quot;,22): (String, Int)</span></code></pre></div>
<p><strong>combine</strong> has a symbolic representation of <strong>&amp;&amp;&amp;</strong> and is sometimes referred to as the <strong>fanout</strong> function.</p>
<h2 id="lifta2">liftA2</h2>
<p><strong>liftA2</strong> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> liftA2[A, B, C, D](fab: F[A, B], fac: F[A, C])(f: B =&gt; C =&gt; D): F[A, D] <span class="co">//simplified</span></code></pre></div>
<p>I could not find a definition of <strong>liftA2</strong> in either Cats nor Scalaz. I’ve referenced it here directly from the <a href="https://www.researchgate.net/publication/222520426_Generalising_monads_to_arrows">Generalising monads to arrows paper by John Hughes</a> in Haskell:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">liftA2 ::</span> <span class="dt">Arrow</span> a <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> d) <span class="ot">-&gt;</span> a e b <span class="ot">-&gt;</span> a e c <span class="ot">-&gt;</span> a e d</code></pre></div>
<p>A sample of implementation of this can be found in the <a href="https://github.com/ssanj/arrows/blob/master/src/main/scala/net/ssanj/arrow/ArrowFuncs.scala#L13">example source</a>.</p>
<p>The <strong>liftA2</strong> function is very similar to the <strong>combine</strong> function with the addition of running a function on the result of <strong>combine</strong>.</p>
<p>The <strong>liftA2</strong> function takes an Arrow <strong>fab</strong> from <strong>A</strong> =&gt; <strong>B</strong>, an Arrow <strong>fac</strong> from <strong>A</strong> =&gt; <strong>C</strong> and a function <strong>f</strong> from <strong>B</strong> =&gt; <strong>C</strong> =&gt; <strong>D</strong> and returns another Arrow with takes in an input of <strong>A</strong>, and returns a <strong>D</strong>.</p>
<div class="figure">
<img src="/images/arrow-functions/arrow-liftA2-2.jpg" alt="liftA2" />
<p class="caption">liftA2</p>
</div>
<p>For example given a <strong>Person</strong> if we want to break it into primitive representations of its <strong>Name</strong> and <strong>Age</strong> fields and then apply a function on the separated bits we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> person = <span class="fu">Person</span>(name, age)
<span class="kw">val</span> combineName: Person =&gt; String = {
  <span class="kw">case</span> <span class="fu">Person</span>(Name(first, last), _) =&gt; s<span class="st">&quot;$first $last&quot;</span>
}
<span class="kw">val</span> combineAge: Person =&gt; Int = _.<span class="fu">age</span>.<span class="fu">age</span>
<span class="kw">def</span> makePersonString: String =&gt; Int =&gt; String = name =&gt; age =&gt; s<span class="st">&quot;person[name=&#39;$name&#39;, age=$age]&quot;</span>
<span class="kw">val</span> lifta2: Person =&gt; String = ArrowFuncs.<span class="fu">liftA2</span>(combineName, combineAge)(makePersonString)
<span class="fu">lifta2</span>(person) <span class="co">//&quot;person[name=&#39;Nagate Tanikaze&#39;, age=22]&quot;</span></code></pre></div>
<h2 id="compose-and-andthen"><a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Compose.scala#L12">compose/&lt;&lt;&lt;</a> and <a href="https://github.com/typelevel/cats/blob/series/0.8.x/core/src/main/scala/cats/arrow/Compose.scala#L15">andThen/&gt;&gt;&gt;</a></h2>
<p><strong>compose</strong> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> compose[A, B, C](f: F[B, C], g: F[A, B]): F[A, C]</code></pre></div>
<p>and has the symbolic representation of <strong>&lt;&lt;&lt;</strong>.</p>
<p><strong>andThen</strong> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> andThen[A, B, C](f: F[A, B], g: F[B, C]): F[A, C]</code></pre></div>
<p>and has the symbolic representation of <strong>&gt;&gt;&gt;</strong>.</p>
<p><strong>compose</strong> and <strong>andThen</strong> are basically the same function with the first and second arguments swapped.</p>
<p>These functions combine arrows passing on the output of one arrow as the input to the next one, similar to regular function composition.</p>
<p>For example given a <strong>Name</strong> and <strong>Age</strong>, if we wanted to convert them to a <strong>Person</strong> and then covert the <strong>Person</strong> to a String we could do:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> personA: Tuple2[Name, Age] =&gt; Person = na =&gt; <span class="fu">Person</span>(na.<span class="fu">_1</span>, na.<span class="fu">_2</span>)
<span class="kw">val</span> makePersonStringA: Person  =&gt; String = p =&gt;  s<span class="st">&quot;person[name=&#39;${p.name.first}&#39; ${p.name.last}, age=${p.age} yrs]&quot;</span>

<span class="kw">val</span> composeF: Tuple2[Name, Age] =&gt; String = personA &gt;&gt;&gt; makePersonStringA
<span class="kw">val</span> andThenF: Tuple2[Name, Age] =&gt; String =  makePersonStringA &lt;&lt;&lt; personA

<span class="fu">composeF</span>(name, age) <span class="co">//person[name=&#39;Nagate&#39; Tanikaze, age=Age(22) yrs]</span>
<span class="fu">andThenF</span>(name, age) <span class="co">//person[name=&#39;Nagate&#39; Tanikaze, age=Age(22) yrs]</span></code></pre></div>
<h2 id="a-worked-example">A Worked Example</h2>
<p>We’ve learned a lot of functions which are somewhat cryptic until you start to use them. To make their usage a little clearer lets look at an example.</p>
<p>Assume we have the following functions at our disposal:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">ItemId</span>(id: Long)
  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">ItemDescReq</span>(itemId: Long, userId: String)
  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">ItemDetail</span>(itemId: Long, value: Double, desc: String)
  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">User</span>(name: String, id: String)
  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">ValuableItemsResponse</span>(expensive: List[ItemDetail], veryExpensive: List[ItemDetail])
  <span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">Price</span>(price: Double)

  <span class="kw">type</span> UserData = Map[String, List[ItemId]]
  <span class="kw">type</span> ItemData = Map[Long, ItemDetail]
  <span class="kw">type</span> Results  = List[Either[String, ItemDetail]]

  <span class="kw">val</span> userData = Map[String, List[ItemId]](
    <span class="st">&quot;1000&quot;</span> -&gt; List(<span class="fu">ItemId</span>(<span class="dv">1001</span>), <span class="fu">ItemId</span>(<span class="dv">1002</span>), <span class="fu">ItemId</span>(<span class="dv">1003</span>), <span class="fu">ItemId</span>(<span class="dv">1007</span>), <span class="fu">ItemId</span>(<span class="dv">1004</span>)),
    <span class="st">&quot;2000&quot;</span> -&gt; List(<span class="fu">ItemId</span>(<span class="dv">2001</span>), <span class="fu">ItemId</span>(<span class="dv">2002</span>))
  )

  <span class="kw">val</span> itemData = Map[Long, ItemDetail](
    1001L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">1001</span>, <span class="fl">2000.00</span>,  <span class="st">&quot;Couch&quot;</span>),
    1002L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">1002</span>, <span class="fl">100.00</span>,   <span class="st">&quot;Apple TV&quot;</span>),
    1003L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">1003</span>, <span class="fl">75000.00</span>, <span class="st">&quot;Luxury Car&quot;</span>),
    1004L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">1004</span>, <span class="dv">3000</span>,     <span class="st">&quot;Laptop&quot;</span>),
    2001L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">2001</span>, <span class="fl">1500.00</span>,  <span class="st">&quot;Coffee Machine&quot;</span>),
    2002L -&gt; <span class="fu">ItemDetail</span>(<span class="dv">2002</span>, <span class="fl">500.00</span>,   <span class="st">&quot;DLSR&quot;</span>)
  )

  <span class="kw">val</span> getSavedItems: User =&gt; UserData =&gt; List[ItemId] = user =&gt; data =&gt; data.<span class="fu">getOrElse</span>(user.<span class="fu">id</span>, Nil)

  <span class="kw">val</span> idToDesc: User =&gt; ItemId =&gt; ItemDescReq = user =&gt; itemId =&gt; <span class="fu">ItemDescReq</span>(itemId.<span class="fu">id</span>, user.<span class="fu">id</span>)

  <span class="kw">val</span> getDetails: ItemDescReq =&gt; ItemData =&gt; Either[String, ItemDetail] = itemDescReq =&gt; data =&gt;
    data.<span class="fu">get</span>(itemDescReq.<span class="fu">itemId</span>).<span class="fu">toRight</span>(s<span class="st">&quot;could not find item with id: ${itemDescReq.itemId}&quot;</span>)

  <span class="kw">val</span> isExpensive: Range =&gt; ItemDetail =&gt; Boolean = range =&gt; item =&gt; range.<span class="fu">contains</span>(item.<span class="fu">value</span>)

  <span class="kw">val</span> valuableItemsResponse : Tuple2[Range, Range] =&gt; List[ItemDetail] =&gt; ValuableItemsResponse = prices =&gt; items =&gt;
    <span class="fu">ValuableItemsResponse</span>(items.<span class="fu">filter</span>(<span class="fu">isExpensive</span>(prices.<span class="fu">_1</span>)), items.<span class="fu">filter</span>(<span class="fu">isExpensive</span>(prices.<span class="fu">_2</span>)))

  <span class="kw">val</span> valuableItemsResponseString: ValuableItemsResponse =&gt; String = items =&gt; {
    s<span class="st">&quot;expensive:${itemDetailString(items.expensive)},veryExpensive:${itemDetailString(items.veryExpensive)}&quot;</span>
  }

  <span class="kw">val</span> itemDetailString: List[ItemDetail] =&gt; String = _.<span class="fu">map</span>(id =&gt; s<span class="st">&quot;${id.desc}=$$${id.value}&quot;</span>).<span class="fu">mkString</span>(<span class="st">&quot;,&quot;</span>)

  <span class="kw">val</span> errorString: List[Either[String, ItemDetail]] =&gt; String = itemsE =&gt;
    itemsE.<span class="fu">collect</span> { <span class="kw">case</span> <span class="fu">Left</span>(error) =&gt; error } <span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)</code></pre></div>
<p>We now want to use the above functions to do the following:</p>
<ol style="list-style-type: decimal">
<li>Get the saved items for a User.</li>
<li>Convert each item to a item request.</li>
<li>Look up the details of each item requested. (this may fail)</li>
<li>Filter the successful requests against two price ranges, one for <em>expensive</em> and the other for very <em>expensive</em>.</li>
<li>The filtered items should then be put into a ValuableItemsResponse object.</li>
<li>At the end we need to print out a description of the valuable items found and any errors that were generated.</li>
</ol>
<p>We can then glue these functions together to give us the output we desire:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">  <span class="co">// User =&gt; (UserData =&gt; List[ItemId], (ItemId =&gt; ItemDescReq))</span>
  <span class="kw">val</span> f1 = ArrowFuncs.<span class="fu">combine</span>(getSavedItems, idToDesc)

  <span class="co">// User =&gt; List[ItemDescReq]</span>
  <span class="kw">val</span> f2 = f1 &gt;&gt;&gt; { <span class="kw">case</span> (fi, fd) =&gt;  <span class="fu">fi</span>(userData) map fd }

  <span class="co">//User =&gt; (Results, Results)</span>
  <span class="kw">val</span> f3 = f2 &gt;&gt;&gt; (_ map getDetails) &gt;&gt;&gt; (_ <span class="fu">map</span> (<span class="fu">_</span>(itemData))) &gt;&gt;&gt; (_.<span class="fu">partition</span>(_.<span class="fu">isLeft</span>))

  <span class="co">//(Results, Results) =&gt; (Results, List[ItemDetail])</span>
  <span class="kw">val</span> f4 = fa.<span class="fu">second</span>[Results, List[ItemDetail], Results](_ collect { <span class="kw">case</span> <span class="fu">Right</span>(value) =&gt; value })

  <span class="co">//User =&gt; (Results, List[ItemDetail])</span>
  <span class="kw">val</span> f5 = f3 &gt;&gt;&gt; f4

  <span class="co">//(Results, List[ItemDetail]) =&gt; (Results, Tuple2[Range, Range] =&gt; ValuableItemsResponse)</span>
  <span class="kw">val</span> f6 =
    fa.<span class="fu">second</span>[List[ItemDetail],
              Tuple2[Range, Range] =&gt; ValuableItemsResponse,
              Results](
      items =&gt; prices =&gt; <span class="fu">valuableItemsResponse</span>(prices)(items)
    )

   <span class="co">//User =&gt; (Results, Tuple2[Range, Range] =&gt; ValuableItemsResponse)</span>
   <span class="kw">val</span> f7 = f5 &gt;&gt;&gt;  f6

   <span class="co">//(Results, Tuple2[Range, Range] =&gt; ValuableItemsResponse) =&gt; (Results, ValuableItemsResponse)</span>
   <span class="kw">val</span> f8 =
    fa.<span class="fu">second</span>[
      Tuple2[Range, Range] =&gt; ValuableItemsResponse,
      ValuableItemsResponse,
      Results](<span class="fu">_</span>(<span class="fu">Range</span>(<span class="dv">500</span>, <span class="dv">3000</span>), <span class="fu">Range</span>(<span class="dv">10000</span>, <span class="dv">100000</span>)))

  <span class="co">//User =&gt; (Results, ValuableItemsResponse)</span>
  <span class="kw">val</span> f9 = f7 &gt;&gt;&gt; f8

  <span class="co">//(Results, ValuableItemsResponse) =&gt; (String, String)</span>
  <span class="kw">val</span> f10 = fa.<span class="fu">split</span>[Results, String, ValuableItemsResponse, String](
    errorString, valuableItemsResponseString
  )

  <span class="co">//User =&gt; (String, String)</span>
  <span class="kw">val</span> f11 = f9 &gt;&gt;&gt; f10

  <span class="kw">val</span> (errors, values) = <span class="fu">f11</span>(<span class="fu">User</span>(<span class="st">&quot;Guybrush threepwood&quot;</span>, <span class="st">&quot;1000&quot;</span>))</code></pre></div>
<p>which outputs:</p>
<pre class="terminal scrollx"><code>expensive:Couch=$2000.0,veryExpensive:Luxury Car=$75000.0, errors: could not find item with id: 1007</code></pre>
<p>or more succinctly:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> pipeline =
    ArrowFuncs.<span class="fu">combine</span>(getSavedItems, idToDesc) &gt;&gt;&gt;
    { <span class="kw">case</span> (fi, fd) =&gt;  <span class="fu">fi</span>(userData) map fd } &gt;&gt;&gt;
    (_ map getDetails) &gt;&gt;&gt;
    (_ <span class="fu">map</span> (<span class="fu">_</span>(itemData))) &gt;&gt;&gt;
    (_.<span class="fu">partition</span>(_.<span class="fu">isLeft</span>)) &gt;&gt;&gt;
    fa.<span class="fu">second</span>[Results, List[ItemDetail], Results](_ collect { <span class="kw">case</span> <span class="fu">Right</span>(value) =&gt; value }) &gt;&gt;&gt;
    fa.<span class="fu">second</span>[List[ItemDetail], Tuple2[Range, Range] =&gt; ValuableItemsResponse, Results](
      items =&gt; prices =&gt; <span class="fu">valuableItemsResponse</span>(prices)(items)
    ) &gt;&gt;&gt;
    fa.<span class="fu">second</span>[Tuple2[Range, Range] =&gt; ValuableItemsResponse, ValuableItemsResponse, Results](
      <span class="fu">_</span>(<span class="fu">Range</span>(<span class="dv">500</span>, <span class="dv">3000</span>), <span class="fu">Range</span>(<span class="dv">10000</span>, <span class="dv">100000</span>))
    ) &gt;&gt;&gt;
    fa.<span class="fu">split</span>[Results, String, ValuableItemsResponse, String](
      errorString, valuableItemsResponseString
    )

    <span class="kw">val</span> (errors, values) = <span class="fu">pipeline</span>(<span class="fu">User</span>(<span class="st">&quot;Guybrush threepwood&quot;</span>, <span class="st">&quot;1000&quot;</span>))</code></pre></div>
<p>Hopefully this has given you a gentle introduction into the world of Arrows.</p>]]></description>
    <pubDate>Sun, 02 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-02-working-with-arrows-in-scala.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Why the Riskiest thing you can do is Play it Safe with Seth Godin</title>
    <link>http://blog.ssanj.net/posts/2017-06-26-why-the-riskiest-thing-you-can-do-is-play-it-safe-seth-godin.html</link>
    <description><![CDATA[<p>Some interesting ideas from <a href="https://www.youtube.com/watch?v=3K7tYdUZZ_c">Why the riskiest thing you can do is play it safe with Seth Godin</a></p>
<p>Tenets from his book <a href="https://www.amazon.com/Icarus-Deception-How-High-Will-ebook/dp/B0090UOLEW">Icarus Deception</a>:</p>
<ul>
<li>Play to your audience. (Your tribe)</li>
<li>The change is between “how can we do it faster and cheaper?” to “how do we become artists?”</li>
<li>Instead of asking for a road map, ask for a compass. Instead of asking for directions, give directions.</li>
<li>Comfort zone vs the safety zone.</li>
<li>If what you did today wasn’t hard, then you probably didn’t create enough value and you didn’t expose yourself to enough risk and fear.</li>
<li>We are too focussed on how to avoid critisism and not focussed enough on how we can make a difference.</li>
<li>No one can make something for everyone. “It’s not for you”.</li>
<li>We want to get picked (given permission) - pick yourself instead. Just start.</li>
<li>The first ten. Give your work to ten people. If your work is good and they are the right ten people, they will send it on to ten more people each and so on until you get a thousand true fans.</li>
<li>You need to be ten cents more trusted than ten cents cheaper.</li>
<li>What are you going to do between now and six months from now so that people will radically pay more attention to you and trust you?</li>
<li>You need to look for new products for your customers instead of new customers for your products.</li>
<li>Choose your customers wisely - they will dictate what you will do all day and the products and services you will offer and what kind of life you will lead.</li>
<li>You pick your customers depending on if they are open to being lead in the direction you want to take them.</li>
</ul>
<div>
<div class="quote">
I dont’ want new readers. I want to take care of the readers I’ve got.
</div>
</div>
<ul>
<li>We need a lot more hubris, a lot less obedience and a lot more awareness that this revolution has been handed to use.</li>
</ul>
<div>
<div class="quote">
How can I take people who have trusted me and take them further than they are comfortable with? Not a lot further but enough so that both of us feel that we are going somewhere.
</div>
</div>
<div>
<div class="quote">
They are not being rejected. A jerk is being rejected. They are not actually even present. They are just putting up this fasçade.
</div>
</div>
<div>
<div class="quote">
It does hurt to ask because I won’t view you the same way next time. It hurts to ask because you didn’t take the time to earn the privilege to ask. It hurts to ask because if you’d gotten a ‘Yes’ from me this time it would have been easier to get a ‘Yes’ from me next time.
</div>
</div>
<div>
<div class="quote">
The right kind of ‘No’ is not a ‘No’. It’s a “I learned what doesn’t work” or “It’s a ‘No’ for now”. What it meant to me was that the person I had described my project to either was the wrong person or given their world view didn’t hear what I was saying, the way I was saying it - because I could prove these were good ideas.
</div>
</div>
<ul>
<li>They didn’t reject you. They rejected your story. They rejected the way they believed your story.</li>
</ul>]]></description>
    <pubDate>Mon, 26 Jun 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-06-26-why-the-riskiest-thing-you-can-do-is-play-it-safe-seth-godin.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Re-run Compilation with Deprecations Turned on from within SBT</title>
    <link>http://blog.ssanj.net/posts/2017-06-26-re-run-compilation-with-deprecations-turned-on-from-within-sbt.html</link>
    <description><![CDATA[<p>Often while compiling some Scala project from with SBT, I’d see the following error:</p>
<pre class="command scrollx"><code>re-run with -deprecation for details</code></pre>
<p>And then I would have to go and update my <strong>build.sbt</strong> file with with following:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scalacOptions ++= Seq(
                      <span class="st">&quot;-deprecation&quot;</span>,
                      <span class="co">//other options</span>
                   )</code></pre></div>
<p>and then relaunch SBT and perform the compilation again. That’s a little painful.</p>
<p>I stumbled across this <a href="https://stackoverflow.com/questions/9578521/scala-sbt-how-to-re-run-with-deprecation?rq=1">incantation</a> to achieve the same result from right within SBT:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">set scalacOptions in ThisBuild ++= Seq(<span class="st">&quot;-unchecked&quot;</span>, <span class="st">&quot;-deprecation&quot;</span>)</code></pre></div>
<p>You can then kick off a new compilation with:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">;clean;compile</code></pre></div>
<p>to see any deprecation warnings. And that’s all there is to it. :)</p>]]></description>
    <pubDate>Mon, 26 Jun 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-06-26-re-run-compilation-with-deprecations-turned-on-from-within-sbt.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

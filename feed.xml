<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 06 Jan 2018 00:00:00 UT</lastBuildDate>
        <item>
    <title>The Last Ten Months at a Startup</title>
    <link>http://blog.ssanj.net/posts/2018-01-06-the-last-ten-months-at-a-startup.html</link>
    <description><![CDATA[<p><em>I wrote this article back in 2015 when working for a Startup. I never ended up publishing it though. I thought I’d share my journey here for anyone that maybe experiencing the same highs and lows. Also reading through this made me realise that I did end up making a good decision even though it seemed foolhardy at the time. Everything worked out for the best. As always follow your intuition. Don’t be afraid to reject what you don’t want. Unfortunately I’ve restarted drinking coffee once moving to Melbourne</em>.</p>
<p>I have been a roller coaster of many highs and lows. To quote Dickens:</p>
<blockquote>
<p>It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness</p>
</blockquote>
<p>Tomorrow is my last day of work at my current workplace. I don’t know what I’m going to do next, but I know it’s going to be something different. When someone asked me recently what I was going to do after I leave, I said “I was free falling”. That’s what it feels like not to have any immediate plans for your next paying gig.</p>
<p>My resignation had come as a bit of a shock. I didn’t have another job to go to, but I was still quitting. I had been restless for the last three months. It was starting to affect my life outside work. I was exhausted on the weekends. I couldn’t stop talking about how crap work was. I was sick a lot. Stressed. It was time to go. I had looked around for another job but had not found one yet.</p>
<p>Since resigning I feel so much better. I feel happy. Optimistic about the future. Life is good! :)</p>
<p>I know I made the right decision. As I said to my manager when I resigned:</p>
<blockquote>
<p>Once you get rid of what you don’t want, you make space for what you do want.</p>
</blockquote>
<p>He looked at me like I was crazy.</p>
<p>There were certainly many memorable moments. Here are some of them.</p>
<h2 id="working-with-friends">Working with friends</h2>
<p>I got this job by an off-hand comment from my friend <a href="https://twitter.com/andrewfnewman">Andrew</a>. I saw him on a crowded train wearing a t-shirt with a lambda symbol. This made perfect sense since Andrew and I are part of the <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group">functional programming scene in Brisbane</a>. Since he was squashed between commuters and the door and I was a few seats down, I sent him a text that read “nice shirt!”. He noticed the text after he got out of the train but replied saying that there was a position going at his work and that I should apply.</p>
<p>A few weeks later I had the job. We spent three months working and bantering together. Unfortunately Andrew was sick of working there. He had been mistreated and lied to. And later after he left, he was unfairly blamed for everything that was wrong with our systems. In reality he had done the impossible and saved the company from the brink of disaster. Strangely no one seemed to care.</p>
<p>At the end of three months, just as I was coming out of my probation, he went to work at another company that appreciated his talents. It was sad to see him go but I was happy I got a chance to work with him.</p>
<p>Six months in, when we were on a hiring spree, my friend <a href="https://twitter.com/edwardsmatt">Matt</a> came on board. I had worked with him many jobs ago and he had always struck me as someone who I would love to work with again. It’s been great working with him for the last four months and I’m going to miss our daily banter and learning sessions and having someone like-minded to work with.</p>
<h2 id="the-chair-revolution">The chair revolution</h2>
<p>When I first started work, the chairs we had to sit on were appalling. Rumour had it that they were second-hand chairs that our CTO had acquired twenty years ago. They had been sent straight from his garage to our office. The chairs were in bad shape. I remember a couple of chairs falling apart and the CTO asking for volunteers to make a Frankenchair by combining the two broken chairs.</p>
<p>I had made several complaints about these chairs and they mostly fell on deaf ears, until we IPOed. Once we had more money the clamouring for chairs didn’t seem so nonsensical. My friend <a href="https://twitter.com/iamryandrake">Ryan</a> and I were championing this cause. Together with another work colleague Dave, we went to a furniture shop to choose three chairs to “trial”. We had been asked to trial three chairs before the company committed to buying more.</p>
<p>We cabbed it across town and spent a good half-an-hour trying different chairs until we decided on two models. We got an invoice sent to our manager and got back to the office very pleased with ourselves.</p>
<p>Nothing happened for a week. I then injured my back sitting on my crappy chair and refused to come back to work until we had proper chairs. Et voilà! The chairs we had ordered finally arrived on my return. Now we only had three good chairs, the ones Ryan, Dave and myself had chosen. Everyone else in the company was sitting on dilapidated chairs.</p>
<p>Ryan and myself had to campaign for another two weeks, constantly reminding my manager, gathering chair preferences of each employee by insisting that they try one of the two models we had chosen. We finally submitted the order for the new chairs. Accounting didn’t pay the invoice for another week. But in the end, I am happy to say that everyone in the company now has a decent chair to sit on. New recruits automatically get ordered a new chair. A nice small win.</p>
<h2 id="recruiting">Recruiting</h2>
<p>At one point around the three month mark of my tenure, it seemed like someone was resigning every week. We also had a big workload to get through and we were trying to hire Scala developers in a market that had mostly never heard of Scala. Recruiters kept sending us ideal candidates that couldn’t make it through the first ten minutes of an interview. I carried out the interviews with my colleague Dave and we had come up with a simple problem involving <a href="http://www.scala-lang.org/api/2.11.7/index.html#scala.Option">Option</a>, which we got candidates to complete on the whiteboard.</p>
<p>If we were not in the office (because all the meeting rooms were taken) we’d take the candidates to a coffee shop, buy them a coffee and then get them to discuss the problem on a sheet of paper.</p>
<p>One thing to note is that we always helped the candidates out if they hit a snag or got nervous and forgot everything that they knew. We also made it a point to explain the solution we were looking for if the candidates failed to reach something reasonable. We gave them pointers, book recommendations, offered pros and cons of their solutions. We spent a long time, usually an hour even with candidates that were not acing it.</p>
<p>If a candidate had failed to come up with a solution, we asked them to study up and learn the how to solve the problem and come back in a few weeks - if they were very keen to work on functional programming. The first four chapters of <a href="http://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653">Functional Programming in Scala</a> book was our recommended reading.</p>
<p>People learn all the time. Just because you don’t know something today, doesn’t mean you won’t know it tomorrow or next week. I wish more workplaces realised that.</p>
<p>I joked with Dave that we were teaching functional programming through the interviews one candidate at a time. :)</p>
<h2 id="conferences">Conferences</h2>
<p>I make it a point to go to at least two conferences a year. The <a href="http://www.lambdajam.com">YOW! Lambda Jam</a> is one of them and I have been attending since its inception. Naturally I asked to attend and was going to purchase the tickets myself as I always do. I entered into “negotiations” with the company about maybe getting a couple of days off to go for the conference. There seemed to quite a lot of resistance at first, but I went ahead and purchased my tickets and also took annual leave for the two days I needed. If the company was not going to give me the days off I would just use my leave. Not ideal and not very supportive.</p>
<p>In the meantime I convinced a couple of senior developers to come to a YOW! Night - a presentation leading up to the conference. This finally piqued the interest of these developers and they were on board for going to the Lambda Jam - if the company sponsored them and gave them the days off.</p>
<p>I mentioned to my manager that we should send another couple of senior developers to the conference. The senior developers made their case to management as well. I’m not sure why this was such a hard sell. Surely you want your staff skilled up right? Anyway after what seemed like a miracle, the company sponsored three tickets and gave us all leave to go for the conference. The conference was amazing and really opened up the minds of the other developers on the team to the power of functional programming. The weeks following the conference were filled with discussions about Category Theory and various patterns we had heard of at the conference. It transformed the team and made using functional programming to solve problems a viable option.</p>
<h2 id="scala-lalalala">Scala-lalalala</h2>
<p>This was my first professional Scala gig. I had done Scala in my own time, after work and on the weekends, for the last four years. I had written applications which I use everyday. But this was my first Scala “job”.</p>
<p>I loved writing Scala full time.</p>
<p>To really get up to speed on any language you need to use it a lot; for many different things. It was also good to mentor other developers on how to use Scala for functional programming. It has definitely solidified my understanding of many concepts.</p>
<p>I will definitely be looking for another Scala job in the future.</p>
<h2 id="cadence">Cadence</h2>
<p>There was a lot of chaos going on daily. Fixes were being rushed into production without any tests. They then broke production. Then another fix was rushed into production to fix the fix. Sometimes that broke too. Every decision was based on how many minutes or hours something was going to take. There was no time to plan any changes or to pay back technical debt.</p>
<p>Dave and I came up with a weekly sprint that had a couple of definite days for releasing to production. On other days we had time to design solutions, make improvements to our code, deployments and pay back technical debt. We had sprint opens where we planned what we were going to do for the next release. We batched the highest priority fixes and features into each release. After a release we had a retrospective where we tried to learn from our past mistakes. This is a typical Agile workflow.</p>
<p>This cadence of constantly delivering quality software lasted for about a good two months. Once the system we were working on was deemed “stable”, we were not allowed to improve it in any way.</p>
<p>We were then thrown onto more prototypical pursuits which mean the death of the cadence we had so carefully nurtured and bankruptcy through technical debt.</p>
<h2 id="free-lunch">Free lunch</h2>
<p>The company has a “free lunch on Mondays” policy where the company would buy all employees lunch. The main drawback was that you had to eat it in the office and generally hurry back to your work as soon as you finished. I generally avoided Monday lunches and chose instead to get outside and take a break. This meant I had to buy or bring in my own food on Monday which I had no problems with.</p>
<p>Then our CTO made an announcement that the maximum budget for any person’s lunch was $10. This was bit miserly and the company was not saving that much money with this cutback as opposed to the thousands we were wasting elsewhere. As expected after a while more people started avoiding the free lunch. After what almost seemed like a revolt from the staff, the $10 cap seems to have been lifted. Time will tell.</p>
<h2 id="working-from-home">Working from home</h2>
<p>The company seemed to have a work from home policy - for some people. Some developers worked four days a week. Others seemed to work six or seven. It all depended on what was negotiated with the CTO. Strangely if you had something being delivered, or had some errands to run, then you could “legitimately” work from home. If you just wanted to work from home, you couldn’t. You needed a reason - even a bogus one.</p>
<p>My friend Ryan and I were trying very hard to change this and discussed this with management ad nauseum. We spoke to Human Resources about it. We even spoke to the CEO when he was down visiting from the US. After a long hard battle, it looks like my co-workers will enjoy working from home one day a week. Even once working from home had been “approved”, it was always a “it’s happening next week” kind of thing. So it has yet to happen but I am hopeful that it will at some point. Unfortunately since tomorrow is my last day, like Moses I will not enter the promised land.</p>
<p>What was so frustrating was that we were working with cutting edge technology and rushing things into production all the time. Process changes on the other hand were draconian. If we needed a simple process change, it took more than six months, Human Resource approval and major arm-twisting of the CTO.</p>
<h2 id="crutches">Crutches</h2>
<p>At the very start of my tenure I was a coffee nut and joined the resident coffee gang in their two-to-three visits to the coffee shop per day. Over time I came to settle in on what is arguably the best coffee shop in Brisbane: <a href="https://www.facebook.com/coffeeanthology">Coffee Anthology</a>. Most people at work were really into their coffee. The caffeine was the ideal accompaniment to the daily stress wheel. We loved coffee so much that we had arranged to have a “coffee class” with Adam, the owner of Anthology. <a href="http://sanj.ink/posts/2015-07-25-coffee-class.html">The class was excellent</a>. As fate would have it, I read some articles about the harmful effects of caffeine shortly after and stopped drinking coffee altogether.</p>
<p>Tea became my new beverage of choice, and I brewed my own Oolong and Jasmine tea leaves and stopped visiting coffee shops altogether. Boiling the kettle, infusing the tea and then slowly savouring it became the antidote to the daily stress wheel.</p>
<h2 id="trying-to-make-a-difference">Trying to make a difference</h2>
<p>I’ve had many a chat with Ryan at various coffee shops and over many lunches. We spurred each other on to find and read books and articles about the best workplaces in the world and better ways of working, learning and thinking. We also encouraged each other to <a href="http://blog.ryandrake.com">blog</a> about our thoughts. We tried very hard to makes some positive changes in our current workplace. We won some and but I fear we lost more. But at least we tried.</p>
<h2 id="the-team">The team</h2>
<p>The team I worked with are awesome. They are a really great bunch of people who I would love to work with again some day in the future under better conditions. It’s a shame they are not given the support they deserve to do the great things they are so easily capable of. I’m going to miss working with them.</p>
<h2 id="the-future">The future</h2>
<p>It’s been ten months, but it feels like a mini-lifetime.</p>
<p>I’m looking forward to spending more time at home with my family. Working on <a href="https://github.com/ssanj">my own projects</a> is something else I want to do. Maybe some chillaxing and musing thrown in there for good measure.</p>
<p>I have chosen something different for myself. I have done the unthinkable and left a job without having another job in the wings. I have space to think and make some good decisions. I sense something wonderful is just on the horizon.</p>]]></description>
    <pubDate>Sat, 06 Jan 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-01-06-the-last-ten-months-at-a-startup.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Continuous Compilation and Testing through Stack and Haskell</title>
    <link>http://blog.ssanj.net/posts/2017-11-30-continuous-compilation-and-testing-through-stack-and-haskell.html</link>
    <description><![CDATA[<p>One of the features I missed when coming from a Scala/<a href="https://www.scala-sbt.org">SBT</a> toolset to a <a href="https://docs.haskellstack.org">Stack</a>/Haskell toolset was the continuous running of tasks in SBT, through the <strong>~</strong> operator. For example to continuously compile production sources we could use:</p>
<pre class="command scrollx"><code>~compile</code></pre>
<p>from within SBT.</p>
<p>For a while there I was stumped about how to do the same for Stack. That was until I stumbled across it in the documentation under <a href="https://docs.haskellstack.org/en/stable/GUIDE/#the-build-synonyms">Build Synonyms</a>:</p>
<pre class="command scrollx"><code>stack build --pedantic --haddock --test --exec &quot;echo Yay, it succeeded&quot; --file-watch</code></pre>
<p>The flag of interest is <strong>–file–watch</strong>. Now I can continuously watch for file changes against library or test sources and run commands accordingly:</p>
<pre class="command scrollx"><code>stack build --file-watch</code></pre>
<p>or</p>
<pre class="command scrollx"><code>stack test --file-watch</code></pre>
<p>respectively.</p>]]></description>
    <pubDate>Thu, 30 Nov 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-11-30-continuous-compilation-and-testing-through-stack-and-haskell.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Migrating SBT Plugins from 0.13.x to 1.x</title>
    <link>http://blog.ssanj.net/posts/2017-11-19-migrating-sbt-plugins-from-0.13.x-to-1.x.html</link>
    <description><![CDATA[<p>Migrating SBT 0.13.x plugins to SBT 1.x can be a little confusing. Here I try to document the steps I followed to migrate two plugins from 0.13.x to 1.x.</p>
<h2 id="cross-building">Cross-Building</h2>
<p>The first thing you need to do is bump your SBT version to 0.13.16 or later, as this lets you cross-compile your plugin between 0.13.x and 1.x. Update your <strong>project/build.properties</strong> file with the following:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">sbt.<span class="fu">version</span>=<span class="fl">0.13.16</span></code></pre></div>
<p>Next we need to update our <strong>build.sbt</strong> file with some new settings.</p>
<p>Change your scala version to 2.12.3:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scalaVersion := <span class="st">&quot;2.12.3&quot;</span></code></pre></div>
<p>Set the global version of SBT to 1.0.3:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">sbtVersion in Global := <span class="st">&quot;1.0.3&quot;</span></code></pre></div>
<p>Add a <strong>scalaCompilerBridgeSource</strong> setting:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scalaCompilerBridgeSource := {
  <span class="kw">val</span> sv = appConfiguration.<span class="fu">value</span>.<span class="fu">provider</span>.<span class="fu">id</span>.<span class="fu">version</span>
  (<span class="st">&quot;org.scala-sbt&quot;</span> % <span class="st">&quot;compiler-interface&quot;</span> % sv % <span class="st">&quot;component&quot;</span>).<span class="fu">sources</span>
}</code></pre></div>
<p>Add cross-building versions you require:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">crossSbtVersions := Vector(<span class="st">&quot;0.13.16&quot;</span>, <span class="st">&quot;1.0.3&quot;</span>)</code></pre></div>
<p>The full list of changes to <strong>build.sbt</strong> are:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scalaVersion := <span class="st">&quot;2.12.3&quot;</span>

sbtVersion in Global := <span class="st">&quot;1.0.3&quot;</span>

scalaCompilerBridgeSource := {
  <span class="kw">val</span> sv = appConfiguration.<span class="fu">value</span>.<span class="fu">provider</span>.<span class="fu">id</span>.<span class="fu">version</span>
  (<span class="st">&quot;org.scala-sbt&quot;</span> % <span class="st">&quot;compiler-interface&quot;</span> % sv % <span class="st">&quot;component&quot;</span>).<span class="fu">sources</span>
}

crossSbtVersions := Vector(<span class="st">&quot;0.13.16&quot;</span>, <span class="st">&quot;1.0.3&quot;</span>)</code></pre></div>
<p><em>Feel free to change the Scala version to the latest 2.12.x version and SBT to the latest 1.x version</em> when applying these settings.</p>
<p>Run a clean test across all versions through SBT:</p>
<pre class="command scrollx"><code>^ ;clean;test</code></pre>
<p>The <strong>^</strong> will run all SBT tasks across all versions defined in <strong>crossSbtVersions</strong>. This new syntax is documented <a href="http://www.scala-sbt.org/0.13/docs/sbt-0.13-Tech-Previews.html#sbt-cross-building">here</a></p>
<h2 id="fixing-issues">Fixing issues</h2>
<p>Here are some of the issues I ran across and their solutions:</p>
<ol style="list-style-type: decimal">
<li><p>For any SBT plugins that your plugin depends on, you need to get the latest version of the plugin that supports 1.x. If the plugin doesn’t support 1.x, you either can’t update your plugin to 1.x or find another plugin or a workaround to get the same functionality without including that plugin.</p></li>
<li><p><a href="http://www.scala-sbt.org/0.13.15/api/index.html#sbt.Process">sbt.Process</a> does not exist in SBT 1.x. This has been removed and you can simply use the Scala’s <a href="http://www.scala-lang.org/api/2.12.3/scala/sys/process/Process.html">sys.process.Process</a> instead.</p></li>
<li><p><a href="http://www.scala-sbt.org/0.13.15/api/index.html#sbt.BuildStructure">sbt.BuildStructure</a> does not exist in SBT 1.x. This has been moved to <a href="http://www.scala-sbt.org/1.0.4/api/sbt/internal/BuildStructure.html">sbt.internal.BuildStructure</a>.</p></li>
<li><p>There were a lot of deprecated warnings. Please see <a href="http://www.scala-sbt.org/1.x/docs/Migrating-from-sbt-013x.html">Migrating from SBT 0.13.x</a> on how to fix them all.</p></li>
<li><p>Your plugin is not an <a href="http://www.scala-sbt.org/0.13.15/api/index.html#sbt.AutoPlugin">AutoPlugin</a> and extends <a href="http://www.scala-sbt.org/0.13.15/api/index.html#sbt.Plugin">sbt.Plugin</a> instead. SBT 0.13.15 onwards recommends the <a href="http://www.scala-sbt.org/0.13/docs/Plugins.html#Creating+an+auto+plugin">creation of an AutoPlugin</a> instead of Plugin.</p></li>
</ol>
<p>If you have a simple plugin you can do the following:</p>
<ol style="list-style-type: lower-alpha">
<li>Extend AutoPlugin instead of Plugin</li>
<li>Add an <strong>autoImport</strong> module under AutoPlugin for any settings you want automatically imported into SBT.</li>
<li>Add the following settings:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"> <span class="kw">override</span> <span class="kw">def</span> <span class="kw">requires</span> = plugins.<span class="fu">JvmPlugin</span>
 <span class="kw">override</span> <span class="kw">def</span> trigger = allRequirements</code></pre></div>
<p>Please see <a href="https://github.com/ceedubs/sbt-ctags/pull/20/files">sbt-ctags SBT 1x Compatibility PR</a> for an example.</p>
<ol start="6" style="list-style-type: decimal">
<li><a href="http://www.scala-sbt.org/0.13/docs/Testing-sbt-plugins.html#step+2%3A+scripted-plugin">Scripted</a> failures. The scripted plugin might get different paths to dependencies than it did previously. Simply fix this with the new paths required.</li>
</ol>
<h2 id="publish">Publish</h2>
<pre class="command scrollx"><code>^ publish</code></pre>
<p>Should publish both the <strong>sbt/0.13</strong> and <strong>sbt/1.0</strong> versions of your plugin. If you use a service like <a href="https://bintray.com">Bintray</a> you’ll find both versions uploaded when you publish to Bintray.</p>]]></description>
    <pubDate>Sun, 19 Nov 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-11-19-migrating-sbt-plugins-from-0.13.x-to-1.x.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Override Global Plugin Settings for for SBT 1.x</title>
    <link>http://blog.ssanj.net/posts/2017-11-19-how-to-override-global-plugin-settings-for-sbt-ctgas-for-sbt-1.x.html</link>
    <description><![CDATA[<p>The way you configure global plugins for SBT 1.x is different to how it used to be for SBT 0.13.x. In a previous article on <a href="http://sanj.ink/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html">How to Browse Scala Sources of your Dependencies from Sublime</a> I recommended creating global plugin to override the <strong>dependencySrcUnzipDir</strong> setting by creating a <strong>CustomCtagsSrcDir.scala</strong> file under <strong>~/.sbt/0.13/plugins</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> sbt.<span class="fu">_</span>
<span class="kw">import</span> Keys.<span class="fu">_</span>
<span class="kw">import</span> net.<span class="fu">ceedubs</span>.<span class="fu">sbtctags</span>.<span class="fu">CtagsKeys</span>.<span class="fu">_</span>

<span class="kw">object</span> CustomCtagsSrcDir <span class="kw">extends</span> Plugin {
  <span class="kw">override</span> <span class="kw">def</span> settings = Seq(
    dependencySrcUnzipDir := baseDirectory.<span class="fu">value</span> / <span class="st">&quot;.ctags_srcs&quot;</span>
  )
}</code></pre></div>
<p>This different to how it needs to be done in SBT 1.x.</p>
<p>To use <a href="https://github.com/ceedubs/sbt-ctags">sbt-ctags</a> with SBT 1.x first clone the <a href="https://github.com/ceedubs/sbt-ctags/pull/20">SBT 1x Compatibility</a> PR that publishes sbt-ctags for SBT 1.x.</p>
<p>Next we need to publish this locally as the PR has not been merged as of this writing. This will install the sbt-ctags-0.2.1-SNAPSHOT:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">sbt publishLocal</code></pre></div>
<p>Add the sbt-ctags plugin to your <strong>~/.sbt/1.0/plugins/plugins.sbt</strong> file to enable it globally:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">addSbtPlugin</span>(<span class="st">&quot;net.ceedubs&quot;</span> %% <span class="st">&quot;sbt-ctags&quot;</span> % <span class="st">&quot;0.2.1-SNAPSHOT&quot;</span>)</code></pre></div>
<p>Next override the location of your <strong>dependencySrcUnzipDir</strong> directory in <strong>~/.sbt/1.0/global.sbt</strong> globally:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">SbtCtagsKeys.<span class="fu">dependencySrcUnzipDir</span> := baseDirectory.<span class="fu">value</span> / <span class="st">&quot;.ctags_srcs&quot;</span></code></pre></div>
<p>This is really neat. No more creating unnecessary classes to override settings.</p>]]></description>
    <pubDate>Sun, 19 Nov 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-11-19-how-to-override-global-plugin-settings-for-sbt-ctgas-for-sbt-1.x.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Tuples are Different to Function Arguments in Scala</title>
    <link>http://blog.ssanj.net/posts/2017-10-29-tuples-are-different-to-function-arguments-in-scala.html</link>
    <description><![CDATA[<p>In Scala Tuples and function arguments look similar but they can’t be used interchangeably.</p>
<p>A Tuple of two Ints can be defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">val</span> t2 = (<span class="dv">2</span>, <span class="dv">4</span>)
t2: (Int, Int) = (<span class="dv">2</span>,<span class="dv">4</span>)</code></pre></div>
<p>Given a simple <strong>sum</strong> method that takes in two Ints:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">sum</span>(n1: Int, n2: Int) = n1 + n2</code></pre></div>
<p>you might think that you could simply pass in your tuple <strong>t2</strong> to invoke the <strong>sum</strong> method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="fu">sum</span>(t2)
&lt;console&gt;:<span class="dv">15</span>: error: not enough arguments <span class="kw">for</span> method sum: (n1: Int, n2: Int)Int.
Unspecified value parameter n2.
       <span class="fu">sum</span>(t2)</code></pre></div>
<p>Unfortunately this does not work as you can’t simply replace an argument list with a similarly-sized tuple. <strong>t2</strong> is taken as the first argument <strong>n1</strong>, hence the error indicating that <strong>n2</strong> has not been supplied.</p>
<p>One way to get this to work is to do the following:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; sum _ tupled t2
res0: Int = <span class="dv">6</span></code></pre></div>
<p>Let’s break that incantation down step-by-step to make it more digestible.</p>
<ol style="list-style-type: decimal">
<li>Convert the <strong>sum</strong> method into a <a href="https://github.com/scala/scala/blob/v2.12.4/src/library/scala/Function.scala#L1">Function</a>:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">val</span> f1 = sum _
f1: (Int, Int) =&gt; Int = $$Lambda$<span class="dv">1447</span>/<span class="dv">998900406</span>@31452c9</code></pre></div>
<ol start="2" style="list-style-type: decimal">
<li>Convert the function into its tupled variant:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">val</span> f2 = f1.<span class="fu">tupled</span>
f2: ((Int, Int)) =&gt; Int = scala.<span class="fu">Function2</span>$$Lambda$<span class="dv">227</span>/<span class="dv">234698513</span>@3f891cfe</code></pre></div>
<p>Tupling the <strong>sum</strong> function is merely going from <code>(Int, Int) =&gt; Int</code> to <code>((Int, Int)) =&gt; Int</code>. Notice the extra parenthesis around the arguments.</p>
<ol start="3" style="list-style-type: decimal">
<li>Apply the tupled function to the tupled input <strong>t2</strong>:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="fu">f2</span>(t2)
res21: Int = <span class="dv">6</span></code></pre></div>
<p>Looking back that does look very difficult but it’s not very intuitive.</p>
<h2 id="using-underscores-with-currying">Using Underscores with Currying</h2>
<p>I had a similar problem recently where I had a <strong>contains</strong> method defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> contains[A](values: List[A], value: A, pred: A =&gt; A  =&gt; Boolean): Boolean = {
    values.<span class="fu">exists</span>(<span class="fu">pred</span>(value))
}</code></pre></div>
<p>And a List <strong>l1</strong> defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> l1 = List(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</code></pre></div>
<p>I tried to call the <strong>contains</strong> method using underscores for the values of the <strong>pred</strong> parameter and got the following error:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains[Int](l1, <span class="dv">3</span>, _ == _)
&lt;console&gt;:<span class="dv">17</span>: error: missing parameter <span class="kw">type</span> <span class="kw">for</span> expanded <span class="fu">function</span> ((x$<span class="dv">1</span>: &lt;error&gt;, x$<span class="dv">2</span>) =&gt; x$<span class="dv">1</span>.$eq$<span class="fu">eq</span>(x$<span class="dv">2</span>))
       contains[Int](l1, <span class="dv">3</span>, _ == _)
                            ^
&lt;console&gt;:<span class="dv">17</span>: error: missing parameter <span class="kw">type</span> <span class="kw">for</span> expanded <span class="fu">function</span> ((x$<span class="dv">1</span>: &lt;error&gt;, x$<span class="dv">2</span>: &lt;error&gt;) =&gt; x$<span class="dv">1</span>.$eq$<span class="fu">eq</span>(x$<span class="dv">2</span>))
       contains[Int](l1, <span class="dv">3</span>, _ == _)</code></pre></div>
<p>You can use underscores to represent positional arguments in an argument list where you don’t need to bind it to a name. So why did this fail?</p>
<p>I can get the <strong>contains</strong> method to work with:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains[Int](l1, <span class="dv">3</span>, x =&gt; y =&gt; x == y)
res24: Boolean = <span class="kw">true</span></code></pre></div>
<p>Conversely, why did this work?</p>
<p>Another interesting variant is if I change the definition of <strong>contains</strong> to <strong>contains2</strong> that takes in an uncurried <strong>pred</strong> function:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> contains2[A](values: List[A], value: A, pred: (A, A)  =&gt; Boolean): Boolean = {
    values.<span class="fu">exists</span>(<span class="fu">pred</span>(value, _))
}</code></pre></div>
<p>I can invoke it with the underscore syntax:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains2[Int](l1, <span class="dv">3</span>,  _ == _)
res59: Boolean = <span class="kw">true</span></code></pre></div>
<p>One of the main reasons for using a curried version of <strong>pred</strong> was that I could partially apply it with the <a href="https://github.com/scala/scala/blob/c2a5883891a68180b143eb462c8b0cebc8d3b021/src/library/scala/collection/GenTraversableOnce.scala#L459">exists</a> method on List without having to use underscores to convert the method to a function. I can still achieve the same result by currying <strong>pred</strong> where it is applied:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> contains3[A](values: List[A], value: A, pred: (A, A)  =&gt; Boolean): Boolean = {
    values.<span class="fu">exists</span>(pred.<span class="fu">curried</span>(value))
}</code></pre></div>
<p>The reason I couldn’t use underscores to represent the parameters of the <strong>contains</strong> method is that the curried function <strong>pred</strong>, represents two argument lists; One that takes an <code>A</code> and returns another function that takes another <code>A</code> and returns a Boolean:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">(A) =&gt; (A =&gt; Boolean)</code></pre></div>
<p>Underscores can only used to represent positional arguments of a single argument list, since we have two in the curried variation of <strong>pred</strong> in <strong>contains</strong> we can’t use it.</p>
<h2 id="changing-the-shape-of-the-input-function">Changing the shape of the Input Function</h2>
<p>If I define a uncurried function <strong>isEqual</strong> as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> isEqual[A](a1: A, a2: A): Boolean  = a1 == a2</code></pre></div>
<p>I can call <strong>contains2</strong> as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains2[Int](l1, <span class="dv">3</span>, isEqual)
res32: Boolean = <span class="kw">true</span></code></pre></div>
<p>If I define an <strong>isEqual2</strong> as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> isEqual2[A]: A =&gt; A =&gt; Boolean = a1 =&gt; a2 =&gt; a1 == a2</code></pre></div>
<p>I can call <strong>contains</strong> as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains[Int](l1, <span class="dv">3</span>, isEqual2)
res33: Boolean = <span class="kw">true</span></code></pre></div>
<p>But if I try to call <strong>contains2</strong> with <strong>isEqual2</strong> we get:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; contains2[Int](l1, <span class="dv">3</span>, isEqual2[Int])
&lt;console&gt;:<span class="dv">18</span>: error: <span class="kw">type</span> mismatch;
 found   : Int =&gt; (Int =&gt; Boolean)
 required: (Int, Int) =&gt; Boolean
       contains2[Int](l1, <span class="dv">3</span>, isEqual2[Int])</code></pre></div>
<p>And we can fix that by uncurrying <strong>isEqual2</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="fu">contains2</span>(l1, <span class="dv">3</span>, Function.<span class="fu">uncurried</span>(isEqual2))
res65: Boolean = <span class="kw">true</span></code></pre></div>
<p>If we define <strong>isEqual3</strong> with a <a href="http://www.scala-lang.org/api/2.12.4/scala/Tuple2.html">Tuple2</a> as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> isEqual3[A]: Tuple2[A, A] =&gt; Boolean = t =&gt; t.<span class="fu">_1</span> == t.<span class="fu">_2</span></code></pre></div>
<p>And we try to invoke <strong>contains2</strong> with <strong>isEqual3</strong> we get:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="fu">contains2</span>(l1, <span class="dv">3</span>, isEqual3[Int])
&lt;console&gt;:<span class="dv">15</span>: error: <span class="kw">type</span> mismatch;
 found   : ((Int, Int)) =&gt; Boolean
 required: (?, ?) =&gt; Boolean
       <span class="fu">contains2</span>(l1, <span class="dv">3</span>, isEqual3[Int])</code></pre></div>
<p>And we can easily fix that by untupling the parameters to <strong>isEqual3</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="fu">contains2</span>(l1, <span class="dv">3</span>, Function.<span class="fu">untupled</span>(isEqual3))
res69: Boolean = <span class="kw">true</span></code></pre></div>
<h2 id="case-class-constructors">Case Class Constructors</h2>
<p>And one last example invoking a constructor of a case class:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">case</span> <span class="kw">class</span> <span class="fu">Person</span>(name: String, age: Int)
defined <span class="kw">class</span> Person

scala&gt; <span class="kw">val</span> nameAge = (<span class="st">&quot;Katz&quot;</span>, <span class="dv">20</span>)
nameAge: (String, Int) = (Katz,<span class="dv">20</span>)

scala&gt; <span class="kw">val</span> pc = Person.<span class="fu">apply</span> _
pc: (String, Int) =&gt; Person = $$Lambda$<span class="dv">1565</span>/<span class="dv">1849401610</span>@5417f849</code></pre></div>
<p>If I try to invoke <strong>pc</strong> with <strong>nameAge</strong> I get an error as expected:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; pc nameAge
&lt;console&gt;:<span class="dv">13</span>: error: value nameAge is not a member <span class="fu">of</span> (String, Int) =&gt; Person
       pc nameAge</code></pre></div>
<p>And we can solve that by tupling the constructor:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; pc tupled nameAge
res21: Person = <span class="fu">Person</span>(Katz,<span class="dv">20</span>)</code></pre></div>
<p>Or more succinctly:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; Person.<span class="fu">tupled</span>(nameAge)
res22: Person = <span class="fu">Person</span>(Katz,<span class="dv">20</span>)</code></pre></div>
<p>Hopefully this has given you some insight into the various ways to invoke functions that takes tuples, curried arguments or uncurried variants.</p>
<p>Some references:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23449757/scala-correct-syntax-to-use-underscore-in-function-literal-with-tuple">scala-correct-syntax-to-use-underscore-in-function-literal-with-tuple</a></li>
<li><a href="https://stackoverflow.com/questions/1987820/how-to-apply-a-function-to-a-tuple?rq=1">how-to-apply-a-function-to-a-tuple</a></li>
<li><a href="https://stackoverflow.com/questions/24196827/scala-unpacking-tuple-as-part-of-argument-list?noredirect=1&amp;lq=1">scala-unpacking-tuple-as-part-of-argument-list</a></li>
</ul>]]></description>
    <pubDate>Sun, 29 Oct 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-10-29-tuples-are-different-to-function-arguments-in-scala.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Use Arguments to the Previous Command in Bash</title>
    <link>http://blog.ssanj.net/posts/2017-09-07-use-arguments-to-the-previous-command-in-bash.html</link>
    <description><![CDATA[<p>Sometimes when running a shell command with some arguments, you might realise that you need to run another command but with the same arguments. If the argument is a long path or such, you really don’t want to have to type it in again. A simple way to run a new command with the previous arguments is:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1 arg2
<span class="kw">newCommand</span> !*
<span class="kw">newCommand</span> arg1 arg2</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">echo</span> A B C D
<span class="kw">echo</span> !*
<span class="kw">A</span> B C D</code></pre></div>
<p>or if you want to use only the last argument:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1
<span class="kw">newCommand</span> !$
<span class="kw">newCommand</span> arg1</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">vim</span> ~/.bash_profile
<span class="kw">source</span> !$</code></pre></div>
<p>or if you want to repeat the last command:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> arg1 arg2 arg3
!!
<span class="kw">command</span> arg1 arg2 arg3</code></pre></div>
<p>It turns out there is a slew of other variations to this syntax as I found out in this <a href="https://stackoverflow.com/questions/4009412/how-to-use-arguments-from-previous-command">Stackoverflow answer</a>:</p>
<pre class="terminal scrollx"><code>!^      first argument
!$      last argument
!*      all arguments
!:2     second argument

!:2-3   second to third arguments
!:2-$   second to last arguments
!:2*    second to last arguments
!:2-    second to next to last arguments

!:0     the command
!!      repeat the previous line</code></pre>
<p>You could also use the <strong>history</strong> command in conjunction:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash"><span class="kw">command</span> !history_line_number:1-indexed-argument-number</code></pre></div>
<p>For example:</p>
<div class="sourceCode"><pre class="sourceCode bash scrollx"><code class="sourceCode bash">$ <span class="kw">history</span>
   <span class="kw">97</span>  rm ~/bin/st
   <span class="kw">98</span>  ln -s /Applications/SourceTree.app/Contents/Resources/stree ~/bin/
$ <span class="kw">ll</span> !98:3
<span class="kw">ll</span> ~/bin/</code></pre></div>]]></description>
    <pubDate>Thu, 07 Sep 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-09-07-use-arguments-to-the-previous-command-in-bash.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to setup the SBT Scripted Test Framework</title>
    <link>http://blog.ssanj.net/posts/2017-09-07-how-to-setup-the-sbt-scripted-test-framework.html</link>
    <description><![CDATA[<p>While I find it fun to write SBT plugins, I’ve always found them tricky to test. Yes, there is the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html">scripted plugin</a> but each time I read the documentation, it put me off using it. It seemed complex with too many steps involved.</p>
<p>More recently I decided to give <em>scripted</em> another go. It was a little frustrating at first because the documentation is not specific enough about which directories need which files. There are a bunch of similarly named files and directories which need to go into specific locations. Confused? I was. But then I had a look at some of the <a href="https://github.com/sbt/sbt/tree/0.13/sbt/src/sbt-test">examples</a> provided and pieced together the required steps which I have outlined below.</p>
<h1 id="use-a-snapshot-version"><a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+1%3A+snapshot">Use a SNAPSHOT version</a></h1>
<p>If you’re not already doing so, update your plugin version in the <strong>build.sbt</strong> file to use a <code>-SNAPSHOT</code> suffix. When the <em>scripted</em> plugin runs, it will locally install your plugin. By using a snapshot version, you prevent version clashes when you do finally publish your plugin; such as where your version X locally is different to your published version X.</p>
<h1 id="within-plugin-root-directory">Within Plugin Root Directory</h1>
<ol style="list-style-type: decimal">
<li>Create a file named <strong>project/scripted.sbt</strong> with the following content:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">libraryDependencies += { <span class="st">&quot;org.scala-sbt&quot;</span> % <span class="st">&quot;scripted-plugin&quot;</span> % sbtVersion.<span class="fu">value</span> }</code></pre></div>
<p>This just adds the <em>scripted</em> plugin as a dependency to your project.</p>
<ol start="2" style="list-style-type: decimal">
<li>Create a file named <strong>scripted.sbt</strong> with the following content:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">ScriptedPlugin.<span class="fu">scriptedSettings</span>

scriptedLaunchOpts := { scriptedLaunchOpts.<span class="fu">value</span> ++
  Seq(<span class="st">&quot;-Xmx1024M&quot;</span>, <span class="st">&quot;-XX:MaxPermSize=256M&quot;</span>, <span class="st">&quot;-Dplugin.version=&quot;</span> + version.<span class="fu">value</span>)
}

scriptedBufferLog := <span class="kw">false</span></code></pre></div>
<p>The above defines the options supplied to the <em>scripted</em> plugin when it is run. It also supplies the plugin version which will be taken from the <code>version</code> value defined in your <strong>build.sbt</strong> file.</p>
<h1 id="within-srcsbt-test-directory">Within src/sbt-test Directory</h1>
<p>One of the steps is to <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+3%3A+src%2Fsbt-test">create a new test source</a> directory for your <em>scripted</em> tests which resides in: <strong>src/sbt-test</strong>. This will be further subdivided by <strong>[testGroup]</strong> and <strong>[testName]</strong> to be of the form: <strong>src/sbt-test/testGroup/testName</strong>.</p>
<p>For example to write a <strong>simple</strong> test for your <strong>XYZ</strong> plugin you’d create the following directory structure:</p>
<pre class="terminal scrollx"><code>src/sbt-test/XYZ/simple</code></pre>
<p>The above test directory (simple) contains a full sbt project within it which will be used to test your plugin. This sbt project will be copied to a temporary directory when the <em>scripted</em> plugin is run.</p>
<p>Within your test directory create the following files:</p>
<ol style="list-style-type: decimal">
<li><strong>src/sbt-test/XYZ/simple/build.sbt</strong></li>
</ol>
<p>This is the build file for the project that will test your plugin. A basic example is given below:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">lazy</span> <span class="kw">val</span> root = (project in <span class="fu">file</span>(<span class="st">&quot;.&quot;</span>))
  .<span class="fu">settings</span>(
    version := <span class="st">&quot;0.1&quot;</span>,
    scalaVersion := <span class="st">&quot;2.10.6&quot;</span>
    <span class="co">//any other config you need here</span>
  )</code></pre></div>
<ol start="2" style="list-style-type: decimal">
<li><strong>src/sbt-test/XYZ/simple/project/plugins.sbt</strong></li>
</ol>
<p>This is the plugin file for the project that will test your plugin. It will need to include your plugin as a dependency:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">sys.<span class="fu">props</span>.<span class="fu">get</span>(<span class="st">&quot;plugin.version&quot;</span>) <span class="kw">match</span> {
  <span class="kw">case</span> Some(x) =&gt; <span class="fu">addSbtPlugin</span>(<span class="st">&quot;your_org&quot;</span> % <span class="st">&quot;your_plugin_name&quot;</span> % x)
  <span class="kw">case</span> _ =&gt; sys.<span class="fu">error</span>(<span class="st">&quot;&quot;&quot;|The system property &#39;plugin.version&#39; is not defined.</span>
                         |Specify <span class="kw">this</span> property using the scriptedLaunchOpts -D.<span class="st">&quot;&quot;&quot;.stripMargin)</span>
}</code></pre></div>
<p>Now you have a basic sbt project that uses your plugin as a dependency.</p>
<ol start="3" style="list-style-type: decimal">
<li><strong>src/sbt-test/testGroup/testName/test</strong></li>
</ol>
<p>This is the test script that will be called from <em>scripted</em>. Write it using the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+4%3A+write+a+script">script syntax</a> specified.</p>
<p>For example to verify that your plugin works and creates a file called <strong>your_output_file</strong> in the <strong>target</strong> directory use:</p>
<pre class="command scrollx"><code>&gt; yourPluginTask
$ exists target/your_output_file</code></pre>
<p>Make sure the the test script is executable:</p>
<pre class="terminal scrollx"><code>chmod +x test</code></pre>
<h1 id="run-the-script">Run the Script</h1>
<p>Run the <em>scripted</em> plugin through SBT to run your test script with:</p>
<pre class="command scrollx"><code>&gt; scripted</code></pre>
<p>As far as I can tell <em>scripted</em> does the following:</p>
<ol style="list-style-type: decimal">
<li>Installs your plugin SNAPSHOT to your local ivy cache.</li>
<li>For each <strong>src/sbt-test/testGroup/testName</strong> directory, copies the content to a temporary directory.</li>
<li>Runs your test script in the temporary directory.</li>
</ol>
<p>Here is the structure of the <strong>sbt-test</strong> directory in my <a href="https://github.com/ssanj/sbt-scuggest">sbt-scuggest</a> plugin:</p>
<pre class="terminal scrollx"><code>src
└── sbt-test
    └── sbt-scuggest
        ├── emptyProject
        │   ├── build.sbt
        │   ├── project
        │   │   └── plugins.sbt
        │   └── test
        ├── existingProject
        │   ├── build.sbt
        │   ├── existingProject.sublime-project
        │   ├── project
        │   │   └── plugins.sbt
        │   └── test
        └── simulate
            ├── build.sbt
            ├── project
            │   └── plugins.sbt
            └── test</code></pre>
<p>Notice how each <strong>testName</strong> directory contains a full SBT project.</p>
<p>Here is the sample output for my <a href="https://github.com/ssanj/sbt-scuggest/tree/master/src/sbt-test/sbt-scuggest/emptyProject">emptyProject test</a>:</p>
<pre class="command scrollx"><code>&gt; scripted
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT-sources.jar ...
[info] Done packaging.
[info] Updating {file:/Volumes/Work/projects/code/scala/toy/sbt-scuggest/}sbt-scuggest...
[info] Resolving org.scala-sbt#sbt-launch;0.13.8 ...
[info] Done updating.
[info] :: delivering :: net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT :: 0.0.6.0-SNAPSHOT :: integration :: Thu Sep 07 00:06:33 AEST 2017
[info]  delivering ivy file to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/ivy-0.0.6.0-SNAPSHOT.xml
[info] Main Scala API documentation to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/api...
[info] Compiling 2 Scala sources to /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/classes...
model contains 17 documentable templates
[info] Main Scala API documentation successful.
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT-javadoc.jar ...
[info] Done packaging.
[info] Packaging /Volumes/Work/projects/code/scala/toy/sbt-scuggest/target/scala-2.10/sbt-0.13/sbt-scuggest-0.0.6.0-SNAPSHOT.jar ...
[info] Done packaging.
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/jars/sbt-scuggest.jar
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/srcs/sbt-scuggest-sources.jar
[info]  published sbt-scuggest to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/docs/sbt-scuggest-javadoc.jar
[info]  published ivy to /Users/sanj/.ivy2/local/net.ssanj/sbt-scuggest/scala_2.10/sbt_0.13/0.0.6.0-SNAPSHOT/ivys/ivy.xml
Running sbt-scuggest / emptyProject
[error] Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256M; support was removed in 8.0
[info] Getting org.scala-sbt sbt 0.13.8 ...
[info] :: retrieving :: org.scala-sbt#boot-app
[info]  confs: [default]
[info]  52 artifacts copied, 0 already retrieved (17674kB/116ms)
[info] Getting Scala 2.10.4 (for sbt)...
[info] :: retrieving :: org.scala-sbt#boot-scala
[info]  confs: [default]
[info]  5 artifacts copied, 0 already retrieved (24459kB/57ms)
[info] [info] Loading project definition from /private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/project
[info] [info] Updating {file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/project/}emptyproject-build...
[info] [info] Resolving net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT ...
       [info] Resolving net.ssanj#sbt-scuggest;0.0.6.0-SNAPSHOT ...
       [info] Resolving com.typesafe.play#play-json_2.10;2.4.8 ...
       [info] Resolving org.scala-lang#scala-library;2.10.4 ...
       [info] Resolving com.typesafe.play#play-iteratees_2.10;2.4.8 ...
       [info] Resolving org.scala-stm#scala-stm_2.10;0.7 ...
       [info] Resolving com.typesafe#config;1.3.0 ...
       [info] Resolving com.typesafe.play#play-functional_2.10;2.4.8 ...
       [info] Resolving com.typesafe.play#play-datacommons_2.10;2.4.8 ...
       [info] Resolving joda-time#joda-time;2.8.1 ...
       [info] Resolving org.joda#joda-convert;1.7 ...
       [info] Resolving org.scala-lang#scala-reflect;2.10.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-core;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-annotations;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.core#jackson-databind;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.datatype#jackson-datatype-jdk8;2.5.4 ...
       [info] Resolving com.fasterxml.jackson.datatype#jackson-datatype-jsr310;2.5.4 ...
       [info] Resolving org.scala-sbt#sbt;0.13.8 ...
       [info] Resolving org.scala-sbt#main;0.13.8 ...
       [info] Resolving org.scala-sbt#actions;0.13.8 ...
       [info] Resolving org.scala-sbt#classpath;0.13.8 ...
       [info] Resolving org.scala-lang#scala-compiler;2.10.4 ...
       [info] Resolving org.scala-sbt#launcher-interface;0.13.8 ...
       [info] Resolving org.scala-sbt#interface;0.13.8 ...
       [info] Resolving org.scala-sbt#io;0.13.8 ...
       [info] Resolving org.scala-sbt#control;0.13.8 ...
       [info] Resolving org.scala-sbt#completion;0.13.8 ...
       [info] Resolving org.scala-sbt#collections;0.13.8 ...
       [info] Resolving jline#jline;2.11 ...
       [info] Resolving org.scala-sbt#api;0.13.8 ...
       [info] Resolving org.scala-sbt#compiler-integration;0.13.8 ...
       [info] Resolving org.scala-sbt#incremental-compiler;0.13.8 ...
       [info] Resolving org.scala-sbt#logging;0.13.8 ...
       [info] Resolving org.scala-sbt#process;0.13.8 ...
       [info] Resolving org.scala-sbt#relation;0.13.8 ...
       [info] Resolving org.scala-sbt#compile;0.13.8 ...
       [info] Resolving org.scala-sbt#classfile;0.13.8 ...
       [info] Resolving org.scala-sbt#persist;0.13.8 ...
       [info] Resolving org.scala-tools.sbinary#sbinary_2.10;0.4.2 ...
       [info] Resolving org.scala-sbt#compiler-ivy-integration;0.13.8 ...
       [info] Resolving org.scala-sbt#ivy;0.13.8 ...
       [info] Resolving org.scala-sbt#cross;0.13.8 ...
       [info] Resolving org.scala-sbt.ivy#ivy;2.3.0-sbt-fccfbd44c9f64523b61398a0155784dcbaeae28f ...
       [info] Resolving com.jcraft#jsch;0.1.46 ...
       [info] Resolving org.scala-sbt#serialization_2.10;0.1.1 ...
       [info] Resolving org.scala-lang.modules#scala-pickling_2.10;0.10.0 ...
       [info] Resolving org.scalamacros#quasiquotes_2.10;2.0.1 ...
       [info] Resolving org.json4s#json4s-core_2.10;3.2.10 ...
       [info] Resolving org.json4s#json4s-ast_2.10;3.2.10 ...
       [info] Resolving com.thoughtworks.paranamer#paranamer;2.6 ...
       [info] Resolving org.spire-math#jawn-parser_2.10;0.6.0 ...
       [info] Resolving org.spire-math#json4s-support_2.10;0.6.0 ...
       [info] Resolving org.scala-sbt#run;0.13.8 ...
       [info] Resolving org.scala-sbt#task-system;0.13.8 ...
       [info] Resolving org.scala-sbt#tasks;0.13.8 ...
       [info] Resolving org.scala-sbt#tracking;0.13.8 ...
       [info] Resolving org.scala-sbt#cache;0.13.8 ...
       [info] Resolving org.scala-sbt#testing;0.13.8 ...
       [info] Resolving org.scala-sbt#test-agent;0.13.8 ...
       [info] Resolving org.scala-sbt#test-interface;1.0 ...
       [info] Resolving org.scala-sbt#main-settings;0.13.8 ...
       [info] Resolving org.scala-sbt#apply-macro;0.13.8 ...
       [info] Resolving org.scala-sbt#command;0.13.8 ...
       [info] Resolving org.scala-sbt#logic;0.13.8 ...
       [info] Resolving org.scala-sbt#compiler-interface;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_8_2;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_9_2;0.13.8 ...
       [info] Resolving org.scala-sbt#precompiled-2_9_3;0.13.8 ...
       [info] Resolving org.scala-lang#jline;2.10.4 ...
       [info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] [info] Done updating.
[info] [info] Set current project to emptyProject (in build file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/)
[info] [info] Defining *:scuggestSimulate
[info] [info] The new value will be used by *:scuggestGen
[info] [info] Reapplying settings...
[info] [info] Set current project to emptyProject (in build file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/)
[info] [info] Updating {file:/private/var/folders/zr/63yqmtjx6yn4k35f4kvvtnqw0000gn/T/sbt_3224922a/emptyProject/}root...
[info] [info] Resolving org.scala-lang#scala-library;2.10.6 ...
       [info] Resolving org.scala-lang#scala-compiler;2.10.6 ...
       [info] Resolving org.scala-lang#scala-reflect;2.10.6 ...
       [info] Resolving org.scala-lang#jline;2.10.6 ...
       [info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] [info] Done updating.
[info] [info] successfully updated emptyProject.sublime-project
[info] [success] Total time: 0 s, completed 07/09/2017 12:06:47 AM
[info] [success] Total time: 0 s, completed 07/09/2017 12:06:47 AM
[info] + sbt-scuggest / emptyProject</code></pre>
<h1 id="custom-assertions">Custom Assertions</h1>
<p>Custom assertions can be created as given in the <a href="http://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html#step+6%3A+custom+assertion">docs</a> or examples.</p>
<h1 id="debugging">Debugging</h1>
<p>There are some additional niceties like pausing your test with:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="co">//your test script steps</span>
$ pause</code></pre></div>
<p>which allows you to poke around the temporary project directory if you need to before continuing with assertions.</p>
<p>And that should be about all you need to know to get up and running with <em>scripted</em>. There is some additional doco <a href="http://eed3si9n.com/testing-sbt-plugins">here</a>.</p>]]></description>
    <pubDate>Thu, 07 Sep 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-09-07-how-to-setup-the-sbt-scripted-test-framework.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Call Sourcetree from the Commandline</title>
    <link>http://blog.ssanj.net/posts/2017-08-10-how-to-call-sourcetree-from-the-commandline.html</link>
    <description><![CDATA[<p>I use <a href="https://www.atlassian.com/software/sourcetree">Sourcetree</a> to do most of my diffing when I use Git. One thing that has urked me is that I’d have to always launch the application from Spotlight or Alfred when I wanted to see the state of some Git diffs. Strangely, when I tried to install Sourcetree’s commandline tools, I got the following error:</p>
<pre class="terminal scrollx"><code>Installation failed
Unable to install command line tools, please refer to the system logs for more details.</code></pre>
<p>While looking for a solution to this problem, I found a <a href="https://community.atlassian.com/t5/SourceTree-questions/SourceTree-command-line-tools-installation-failed/qaq-p/85023">simpler alternative</a> by Philip Borenstein:</p>
<blockquote>
<p>This has been annoying me for a while. Here’s a workaround that works for me: $ ln -s /Applications/SourceTree.app/Contents/Resources/stree /usr/local/bin/ I use homebrew, so /usr/local/bin is already in my path and owned by me (instead of root)</p>
</blockquote>
<p>All you need to do is add the <strong>stree</strong> application to your path:</p>
<pre class="terminal scrollx"><code>ln -s /Applications/SourceTree.app/Contents/Resources/stree ~/bin/</code></pre>
<p>and you are good to go!</p>]]></description>
    <pubDate>Thu, 10 Aug 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-08-10-how-to-call-sourcetree-from-the-commandline.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Rename a Git Branch</title>
    <link>http://blog.ssanj.net/posts/2017-07-31-how-to-rename-a-git-branch.html</link>
    <description><![CDATA[<p>So you’ve been working on a Git branch on some new feature and when you go to push your changes you realise your branch name is incorrect. You forgot to include the issue number or some such and now your pull request is going to be hard to track down to a feature.</p>
<p>What would be useful is to be able to rename your current branch without losing all your work. The Git incantation for this is surprisingly easy:</p>
<pre class="command scrollx"><code>git branch -m &lt;old name&gt; &lt;new name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git branch -m feature-x [123]-feature-x</code></pre>
<p>The <strong>-m</strong> option moves an existing branch into a new one:</p>
<blockquote>
<p>-m, –move Move/rename a branch and the corresponding reflog.</p>
</blockquote>
<p>If you’ve already pushed the old branch name to remote, you can delete it with:</p>
<pre class="command scrollx"><code>git push origin :&lt;old name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git push origin :feature-x</code></pre>
<p>Then simply push your changes for the new branch to remote:</p>
<pre class="command scrollx"><code>git push origin [123]-feature-x</code></pre>
<p>and you’re done. :)</p>]]></description>
    <pubDate>Mon, 31 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-31-how-to-rename-a-git-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Remove Remotely Deleted Branches from your Local Git Repository</title>
    <link>http://blog.ssanj.net/posts/2017-07-31-how-to-remove-remotely-delete-branches-from-your-local-git-repository.html</link>
    <description><![CDATA[<p>Once you start working on feature branches you often find that you have a bunch of local branches that are tracking remote branches that no longer exist.</p>
<p>One easy way of keeping your local and remote repositories in sync is to use the <em>prune</em> option of the Git <strong>remote</strong> command:</p>
<pre class="command scrollx"><code>git remote prune &lt;remote name&gt;</code></pre>
<p>For example:</p>
<pre class="command scrollx"><code>git remote prune origin</code></pre>
<p>From the docs:</p>
<blockquote>
<p>Deletes all stale remote-tracking branches under <name>. These stale branches have already been removed from the remote repository referenced by <name>, but are still locally available in “remotes/<name>”.</p>
</blockquote>
<blockquote>
<p>With –dry-run option, report what branches will be pruned, but do not actually prune them.</p>
</blockquote>
<p>This will remove all local references that track remote branches that have been deleted and keep your local repository clean and tidy. :)</p>]]></description>
    <pubDate>Mon, 31 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-07-31-how-to-remove-remotely-delete-branches-from-your-local-git-repository.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

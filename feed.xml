<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 23 Aug 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Shortcut to Close All Open Windows in Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-08-23-shortcut-to-close-all-open-windows-in-sublime.html</link>
    <description><![CDATA[<p>Sublime has many options to close tabs such as closing the current tab or closing all tabs to the right or closing other tabs. What would be nice is to have an option to close all tabs.</p>
<p>This functionality already exists under <strong>File</strong> &gt; <strong>Close All Files</strong> but there is no shortcut for it.</p>
<p>Here’s how you add a shortcut to close all open files:</p>
<pre class="command"><code>{ &quot;keys&quot;: [&quot;shift+super+ctrl+w&quot;], &quot;command&quot;: &quot;close_all&quot; }</code></pre>
<p>Now you can close all open files with “shift+super+ctrl+w”.</p>]]></description>
    <pubDate>Sun, 23 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-23-shortcut-to-close-all-open-windows-in-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Browse Scala Sources of your Dependencies from Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html</link>
    <description><![CDATA[<p>A feature I desperately needed in Sublime <a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">since my migration from Intellij</a> was the ability to browse the sources of my project’s dependencies. Without this ability I was basically relegated to using the Scaladocs and Google/SO for all my information. Not good.</p>
<p>There is a way for you to do this in Sublime using <a href="http://ctags.sourceforge.net">Ctags</a>.</p>
<iframe id="movie1" src="https://player.vimeo.com/video/137045055" width="800" height="501" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>
<p>
<a href="https://vimeo.com/137045055">Browsing Scala dependency sources through Sublime and Ctags</a> from <a href="https://vimeo.com/user4351020">ssanj</a> on <a href="https://vimeo.com">Vimeo</a>.
</p>
<p>So what are Ctags?</p>
<blockquote>
<p>Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility.</p>
</blockquote>
<p>Cool. That sounds promising! Unfortunately <a href="http://ctags.sourceforge.net/languages.html">Scala is not one of the supported languages</a>.</p>
<p><a href="https://github.com/ceedubs/sbt-ctags">The sbt-ctags plugin</a> gives you this Scala support for Ctags through sbt.</p>
<blockquote>
<p>SBT ctags is an SBT plugin that will generate ctags for your Scala project.</p>
</blockquote>
<blockquote>
<p>It unzips the source jars for your project dependencies and generates ctags for these dependency sources in addition to the Scala/Java source of your project itself.</p>
</blockquote>
<blockquote>
<p>By default, the plugin assumes you have a ctags executable on your path that is syntax-compatible with Exuberant Ctags.</p>
</blockquote>
<p>In addition to downloading all the sources for your dependencies the sbt-ctags plugin also creates the .tags file that can be used by any Ctags-aware editor.</p>
<p>Fortunately Sublime has Ctags support through the <a href="https://packagecontrol.io/packages/CTags">Sublime Ctags plugin</a>.</p>
<p>Now we have all the pieces we need to get Ctags working with Scala and Sublime. Yay!</p>
<h1 id="installation">Installation</h1>
<ol style="list-style-type: decimal">
<li>Install Exuberant tags.</li>
</ol>
<p>On a Mac you can do it with brew:</p>
<pre class="command scrollx"><code>brew install ctags</code></pre>
<p>For additional OS installation options checkout the <a href="https://packagecontrol.io/packages/CTags">Sublime Ctags page</a> or the <a href="http://ctags.sourceforge.net">Exuberant Tags page</a>.</p>
<ol start="2" style="list-style-type: decimal">
<li>Install the SBT Ctags plugin globally.</li>
</ol>
<p>Ctags support is something we will need on every project. To do this we need to add it to the global plugins configurations so that it will be available across all our projects.</p>
<p>Add the <a href="https://github.com/ceedubs/sbt-ctags">sbt-ctags plugin</a> dependency to <strong>plugins.sbt</strong> located at <strong>~/.sbt/0.13/plugins</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala"><code class="sourceCode scala"><span class="fu">addSbtPlugin</span>(<span class="st">&quot;net.ceedubs&quot;</span> %% <span class="st">&quot;sbt-ctags&quot;</span> % <span class="st">&quot;0.1.0&quot;</span>)</code></pre></div>
<p>note: <em>you may need to create the above file if it doesn’t exist.</em></p>
<p>The sbt-ctags plugin downloads the sources for your project dependencies into <strong>target/sbt-ctags-dep-srcs</strong> by default. One problem with this is that every time you run an <code>sbt clean</code> your dependency source files are deleted. Not very useful.</p>
<p>Let’s fix it so that the dependency source files are not downloaded to the target directory. We want to do this globally so we have to create a global plugin.</p>
<p>Create the global plugin under <strong>~/.sbt/0.13/plugins</strong> in a file named <strong>CustomCtagsSrcDir.scala</strong> with the following contents:</p>
<div class="sourceCode"><pre class="sourceCode scala"><code class="sourceCode scala"><span class="kw">import</span> sbt.<span class="fu">_</span>
<span class="kw">import</span> Keys.<span class="fu">_</span>
<span class="kw">import</span> net.<span class="fu">ceedubs</span>.<span class="fu">sbtctags</span>.<span class="fu">CtagsKeys</span>.<span class="fu">_</span>

<span class="kw">object</span> CustomCtagsSrcDir <span class="kw">extends</span> Plugin {
  <span class="kw">override</span> <span class="kw">def</span> settings = Seq(
    dependencySrcUnzipDir := baseDirectory.<span class="fu">value</span> / <span class="st">&quot;.ctags_srcs&quot;</span>
  )
}</code></pre></div>
<p>In the above plugin the dependency sources are written to a directory named <strong>.ctags_srcs</strong> under your project’s root directory.</p>
<p>Now in any sbt project you can run the following to generate your ctags:</p>
<pre class="command scrollx"><code>sbt genCtags</code></pre>
<p>The above incantation will download all your project dependency sources to the <strong>.ctags_srcs</strong> directory and create a <strong>.tags</strong> file in the project root directory.</p>
<ol start="3" style="list-style-type: decimal">
<li>Create a Scala .tags configuration file to enable Ctags for Scala</li>
</ol>
<p><a href="https://github.com/ceedubs/sbt-ctags#user-content-configuring-ctags">Create a ~/.tags file</a> to configure Ctags to index Scala files:</p>
<pre class="command scrollx"><code>--langdef=scala
--langmap=scala:.scala
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\4/c,classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*object[ \t]+([a-zA-Z0-9_]+)/\4/c,objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case class[ \t]+([a-zA-Z0-9_]+)/\4/c,case classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case object[ \t]+([a-zA-Z0-9_]+)/\4/c,case objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*trait[ \t]+([a-zA-Z0-9_]+)/\4/t,traits/
--regex-scala=/^[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*def[ \t]+([a-zA-Z0-9_]+)/\3/m,methods/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*val[ \t]+([a-zA-Z0-9_]+)/\3/l,constants/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*var[ \t]+([a-zA-Z0-9_]+)/\3/l,variables/
--regex-scala=/^[ \t]*package[ \t]+([a-zA-Z0-9_.]+)/\1/p,packages/</code></pre>
<ol start="4" style="list-style-type: decimal">
<li>Install the Sublime Ctags Plugin</li>
</ol>
<p>You can install the Sublime Ctags plugin from <a href="https://packagecontrol.io/packages/CTags">Package Control</a> or manually from the <a href="https://github.com/SublimeText/CTags">repository</a>.</p>
<p>The Sublime Ctags plugin will use the <strong>.tags</strong> index file generated in your project root directory to lookup the symbols you need.</p>
<h1 id="usage">Usage</h1>
<ol style="list-style-type: decimal">
<li>On any new project or when you add a new dependency, run:</li>
</ol>
<pre class="command scrollx"><code>sbt genCtags</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>Within Sublime put your cursor on a method or member and choose “Goto Definition” from the context menu.</li>
</ol>
<div class="figure">
<img src="/images/sublime_go_to_definition_ctags.jpg" alt="Goto Definition" />
<p class="caption">Goto Definition</p>
</div>
<h1 id="customisation">Customisation</h1>
<p>To define a shortcut for the “Goto Definition” command add a binding to your user key bindings file.</p>
<p>Edit your user key bindings file by clicking on <strong>Sublime Text</strong> &gt; <strong>Preferences</strong> &gt; <strong>Key Bindings - User</strong> and add the following binding:</p>
<pre class="command scrollx"><code>{ &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;goto_definition&quot; }</code></pre>
<p>The above binding maps <strong>F4</strong> as the key to browse your sources. You can change this mapping to whatever you like.</p>]]></description>
    <pubDate>Sat, 22 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Add Custom Descriptions to ScalaTest Assertion Failures</title>
    <link>http://blog.ssanj.net/posts/2015-08-20-how-add-custom-descriptions-to-scalatest-assertion-failures.html</link>
    <description><![CDATA[<p><a href="http://stackoverflow.com/questions/6451530/how-to-show-custom-failure-messages-in-scalatest">This had me stumped for a while</a>. Here’s a few ways to do it:</p>
<h2 id="using-assert">Using assert</h2>
<pre class="command scrollx"><code>assert(your Boolean assertion, &quot;your description&quot;)</code></pre>
<p><em>note</em>: assert takes in a Boolean assertion not a matcher assertion.</p>
<p>Example:</p>
<pre class="command scrollx"><code>assert(Seq(&quot;something&quot;).size == 2, &quot;- the size should be one&quot;)</code></pre>
<p>Example output:</p>
<pre class="terminal scrollx"><code>org.scalatest.exceptions.TestFailedException: List(&quot;something&quot;) had size 1 instead of expected size 2 - the size should be one</code></pre>
<h2 id="using-withclue">Using WithClue</h2>
<pre class="command"><code>withClue(&quot;Your prefix&quot;) { your assertion }</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>withClue(&quot;Sequence size - &quot;) { Seq(&quot;something&quot;) should have size 2 }</code></pre>
<p>Example output:</p>
<pre class="terminal scrollx"><code>org.scalatest.exceptions.TestFailedException: Sequence size - List(&quot;something&quot;) had size 1 instead of expected size 2</code></pre>
<p><a href="http://stackoverflow.com/questions/28307155/is-there-syntax-for-adding-a-clue-to-scalatest-matchers">or if you want a suffix, mix in AppendedClues</a>:</p>
<pre class="command scrollx"><code>class TestSuite extends FlatSpec with Matchers with AppendedClues {
  your assertion withClue(&quot;your suffix&quot;)
}</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>class TestSuite extends FlatSpec with Matchers with AppendedClues {
  3 should equal(4) withClue(&quot;expecting a header row and 3 rows of data&quot;)
}</code></pre>
<p>Example output:</p>
<pre class="terminal scrollx"><code>org.scalatest.exceptions.TestFailedException: 3 did not equal 4 expecting a header row and 3 rows of data</code></pre>]]></description>
    <pubDate>Thu, 20 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-20-how-add-custom-descriptions-to-scalatest-assertion-failures.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Sublime Text Package Loading</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</link>
    <description><![CDATA[<p>I recently submitted <a href="https://github.com/ssanj/Scoggle">Scoggle</a> to <a href="https://packagecontrol.io">package control</a> and had some <a href="https://github.com/wbond/package_control_channel/pull/4701">issues around package path and how classes are loaded</a>. Here is some feedback I received from one of the repository maintainers:</p>
<blockquote>
<p>Sublime Text adds the Packages path to sys.path (and a custom loader to sys.meta_path for that matter, which handles the loading of .sublime-package files), so every module in a package is accessible with PackageName.path.to.module. For your tests (or more specifically everything that is in a sub package, i.e. subdirectory) you need to use two dots with relative imports so that you go up a level, such as from .. import scoggle_types as stypes.</p>
</blockquote>
<blockquote>
<p>For the dynamic class loading, you can use ____package____ instead of “Scoggle.matchers” because the two are equivalent in the average situation and the first will still be correct if the package was saved under a different name. I’m not exactly sure about tests, but they should work as well. There are other methods available for doing what you intend to do (e.g. importing the classes into matcher.<strong>init</strong> and then using getattr), but yours should work “just fine”.</p>
</blockquote>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Programming in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-programming-in-python.html</link>
    <description><![CDATA[<p><a href="http://sanj.ink/posts/2015-08-16-Scoggle.html">I needed to create a Sublime Text plugin</a>. Sublime Text plugins are written in Python. I had never written any Python code before. I thought I’d give it a crack anyway. <a href="https://packagecontrol.io/packages/Scoggle">The results were pretty nice</a>.</p>
<p>I usually work in Scala which is a strongly-type language. I had my reservations about working in Python which is a dynamically typed language. I had experience coding in other dynamically typed languages such as Javascript. It was not something I enjoyed thoroughly.</p>
<p>Python turned out to be a different beast. For one it was fast. This was a good thing. The repl was easy to use and returned a rich set of information. help(..) and dir(..) are actually useful. The api documentation is also reasonably good. Since it was dynamic it was very easy to get started with something.</p>
<p>Something that crash when you ran it. This is the balance between static typing and dynamic typing. You pay at compilation time in static typing but you are more sure about what your program will do. With dynamic typing you pay later but you pay in production.</p>
<p>One problem with paying in production is that any syntax errors, method name errors etc, will only occur when you run some code that actually uses that erroneous pathway through the code. There could very well be pathways through the code that would blow up one day if it were used. This is pretty scary and doesn’t inspire much confidence. If you are using dynamic languages your code coverage should be close to a hundred percent. A good IDE or linter would also help catch some of these errors early.</p>
<p><a href="http://sanj.ink/posts/2015-08-14-functional-programming-in-python.html">I found it fairly easy to use Functional Programming concepts</a> in Python which suited me very well. So that’s a plus.</p>
<p>Python is a easy language to get into. It’s also fun to use. I wouldn’t recommend it for production code though. But hey, being a static-typing fan, I’m probably biased.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-programming-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Loggers in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</link>
    <description><![CDATA[<p><a href="http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python">A great article</a> on how to correctly use loggers through Python.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How are Sublime Text Settings Resolved?</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-how-are-sublime-text-settings-resolved.html</link>
    <description><![CDATA[<p>Sublime Text settings have a definite resolution order. <a href="http://www.sublimetext.com/forum/viewtopic.php?f=6&amp;t=9076">I stumbled across this forum post on the exact order</a>:</p>
<p>The user can override these globally (User/Base File), per-syntax, or per-project. The order that things would be searched would be (last match wins):</p>
<ol style="list-style-type: decimal">
<li>Packages/MyPlugin/Base File.sublime-settings</li>
<li>Packages/MyPlugin/Base File <platform>.sublime-settings</li>
<li>Packages/User/Base File.sublime-settings</li>
<li>Packages/User/Preferences.sublime-settings</li>
<li>Project Settings</li>
<li>Packages/MyPlugin/<syntax>.sublime-settings</li>
<li>Packages/MyPlugin/<syntax> <platform>.sublime-settings</li>
<li>Packages/User/<syntax>.sublime-settings</li>
<li>Packages/User/Distraction Free.sublime-settings</li>
</ol>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-how-are-sublime-text-settings-resolved.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Clone Only Creates the Master Branch Locally</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-the-master-branch-locally.html</link>
    <description><![CDATA[<p><a href="http://git-scm.com/docs/git-clone">When you clone a repository through Git, it does the following</a>:</p>
<blockquote>
<p>clones a repository into a newly created directory, creates remote-tracking branches for each branch in the cloned repository (visible using git branch -r), and creates and checks out an initial branch that is forked from the cloned repository’s currently active branch.</p>
</blockquote>
<p>What if you wanted some of the remote branches in addition to the “active branch” (which is usually <strong>master</strong>) ?</p>
<p>While I initially thought that Git only downloaded the master branch, my friend <a href="http://nippysaurus.com">Michael</a> showed me that that was not the case. Thanks Michael :).</p>
<p>So taking <a href="https://github.com/ssanj/package_control_channel">my fork of the Sublime package control repository</a> as an example, when I clone the repository my branches look like this:</p>
<pre class="command"><code>git branch -avv</code></pre>
<div class="figure">
<img src="/images/git_clone_repository.jpg" alt="package control clone" />
<p class="caption">package control clone</p>
</div>
<p>It looks like we only have access to the master branch locally and that we have to remotely checkout the other branches.</p>
<p>The Git already has tracking information for all the remote branches following the clone. We can access any of the branches with a simple checkout.</p>
<pre class="command"><code>git checkout branchname</code></pre>
<div class="figure">
<img src="/images/git_checkout_branch.jpg" alt="checking out a branch" />
<p class="caption">checking out a branch</p>
</div>
<p>And that’s all there is to it.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-the-master-branch-locally.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Scoggle</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-Scoggle.html</link>
    <description><![CDATA[<p><a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">Since moving to Sublime Text from Intellij for Scala development</a>, I have been trying to find plugins to replace most of what I found useful in Intellij. Being able to easily switch between production and test code was one of those useful features.</p>
<p>I came across the <a href="https://packagecontrol.io/packages/ScalaTest">ScalaTest plugin</a> which supported switching between production and test code. It also allowed the execution of tests via JUnit. Junit is an undesirable option because Scala has at least two very popular testing frameworks supported out of the box through SBT: <a href="http://scalatest.org">ScalaTest</a> and <a href="http://etorreborre.github.io/specs2">Specs2</a>. It also interacted with the Scala compiler for which I had no possible use.</p>
<p>All I wanted was a way to switch between production and test code. So I decided to write my own plugin which did that one very specific thing.</p>
<p>Starting out my goals were:</p>
<ol style="list-style-type: decimal">
<li>Toggling from a production file will bring up a list of matching test files based on configured suffixes. Eg. Spec, Test, Suite, IntSpec etc.</li>
<li>Toggling from a test file will bring the matching source files. I was not sure whether to show a list of possibly matching source files.</li>
<li>Provide a way to match on package-path on either production or test source directories.</li>
<li>Provide a way to match on file name irrespective of package-path.</li>
<li>Maybe a have a nice way to create production or test sources if they don’t exist. Maybe run a file template.</li>
<li>Have a way to override configuration of source and test source directories on a per project basis.</li>
</ol>
<p>I am happy to say that I have completed most of the above list. The most notable exception being #5. I also figured out that I didn’t need #3 as my matchers handled all variations quite quickly. If needed I could write a matcher that did #3 quite easily.</p>
<p>Overriding configuration on a per project basis (#6), proved to be very useful. Many projects still follow non-standard setups and this feature allows the plugin to support them. A simple example is any <a href="https://www.playframework.com/documentation/2.0/Anatomy">Play</a> project.</p>
<p>Some of the other neat features provided by <a href="https://packagecontrol.io/packages/Scoggle">Scoggle</a> are:</p>
<ol style="list-style-type: decimal">
<li>Easily configurable production and test source directories as well as test suffixes.</li>
<li>Three built-in matchers that match increasingly fuzzier searches.</li>
<li>Error notifications can be turned down if they become too noisy. Currently supported techniques are through a dialog (default), through the status bar or not displayed at all.</li>
<li>Debug logging can be enabled which allows the user to easily follow how a match is done against a source file and the files that were consider but rejected when coming to a final result.</li>
<li>Support for the Context Menus and the Command Palette (CMD + SHIFT + P).</li>
<li>Installation through <a href="https://packagecontrol.io">Package Control</a>.</li>
<li>An easy framework to write your matchers which abstracts away the complexities and requires only two boolean functions.</li>
</ol>
<p>I found it very interesting writing this plugin. There is something cool about writing your own tools. Give it a whirl and let me know what you think.</p>
<div class="figure">
<img src="/images/scoggle_sublime_text_plugin_prefix_suffix_matcher.mov.gif" alt="Scoggle in action" />
<p class="caption">Scoggle in action</p>
</div>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-Scoggle.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Java Reflection-Style Class Loading in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</link>
    <description><![CDATA[<p>While working on <a href="https://github.com/ssanj/Scoggle">Scoggle</a> I wanted to be able to dynamically load matcher classes. This is very easy using Java with reflection. <a href="http://stackoverflow.com/questions/452969/does-python-have-an-equivalent-to-java-class-forname">I found this SO article on how to do just that in Python</a>. Given a package path to a class, this piece of code loads each module and returns the final class constructor:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_class( kls ):
    parts <span class="op">=</span> kls.split(<span class="st">&#39;.&#39;</span>)
    module <span class="op">=</span> <span class="st">&quot;.&quot;</span>.join(parts[:<span class="op">-</span><span class="dv">1</span>])
    m <span class="op">=</span> <span class="bu">__import__</span>( module )
    <span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
        m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)            
    <span class="cf">return</span> m</code></pre></div>
<p>The author explains how it works:</p>
<blockquote>
<p>We’re using <strong>import</strong> to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( module )</code></pre></div>
<blockquote>
<p>In this case, m will only refer to the top level module,</p>
</blockquote>
<blockquote>
<p>For example, if your class lives in foo.baz module, then m will be the module foo. We can easily obtain a reference to foo.baz using getattr( m, ‘baz’ ).</p>
</blockquote>
<blockquote>
<p>To get from the top level module to the class, have to recursively use gettatr on the parts of the class name</p>
</blockquote>
<blockquote>
<p>Say for example, if you class name is foo.baz.bar.Model then we do this:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( <span class="st">&quot;foo.baz.bar&quot;</span> ) <span class="co">#m is package foo</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;baz&quot;</span> ) <span class="co">#m is package baz</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;bar&quot;</span> ) <span class="co">#m is module bar</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;Model&quot;</span> ) <span class="co">#m is class Model</span></code></pre></div>
<blockquote>
<p>This is what’s happening in this loop:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
    m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)    </code></pre></div>
<blockquote>
<p>At the end of the loop, m will be a reference to the class. This means that m is actually the class itself, you can do for instance:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">  a <span class="op">=</span> m() <span class="co">#instantiate a new instance of the class    </span>
  b <span class="op">=</span> m( arg1, arg2 ) <span class="co"># pass arguments to the constructor</span></code></pre></div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

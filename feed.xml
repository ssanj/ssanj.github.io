<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 19 Oct 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>How To Add Different Icons To Application Instances On Macosx</title>
    <link>http://blog.ssanj.net/posts/2022-10-19-how-to-add-different-icons-to-application-instances-on-macosx.html</link>
    <description><![CDATA[<p>I run multiple <a href="https://alacritty.org/">Alacritty</a> instances for my development workflow. Each instance uses <a href="https://github.com/tmux/tmux">tmux</a> to manage multiple windows - one per project. I have one Alacritty instance that runs <a href="https://github.com/Extrawurst/gitui">GitUI</a> in full screen mode and the other instance runs the continuous compilation of each project in its own window. Oh, and they also run on separate monitors.</p>
<h2 id="monitor-configuration">Monitor Configuration</h2>
<p>I have one horizontal 32&quot; monitor which is my primary screen and a 27&quot; monitor turned vertical for my secondary screen.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/monitors.png" alt="Monitors" />
<p class="caption">Monitors</p>
</div>
<h3 id="primary-monitor">Primary Monitor</h3>
<p>The main monitor runs Alacritty with GitUI.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/gitui.png" alt="Gitui" />
<p class="caption">Gitui</p>
</div>
<h3 id="secondary-monitor">Secondary Monitor</h3>
<p>The secondary monitor runs another Alacritty instance with continuous compilation with the respective project’s compiler. If the project doesn’t have a compiler, the window opens to the project location from which I can run various commands.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/compilation.png" alt="Continuous Compilation" />
<p class="caption">Continuous Compilation</p>
</div>
<h3 id="the-issue">The Issue</h3>
<p>So what’s the problem that requires different application icons per instance?</p>
<p>When I run two instances of Alacritty, this is what my Application Switcher (<code>CMD</code> + <code>TAB</code>) looks like:</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/application-switcher.png" alt="Application Switcher" />
<p class="caption">Application Switcher</p>
</div>
<p>It becomes very hard to distinguish between the <code>Gitgui</code> Alacritty and the <code>Project</code> Alacritty instances. More often than not I pick the wrong one and have to try and choose a second time. It’s a little annoying.</p>
<p>I can use <a href="https://support.apple.com/en-us/HT204100">Misson Control</a> to display all the windows and choose from there.</p>
<div class="figure">
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/macos/Catalina/macos-catalina-mission-control-add-space-callout.jpg" alt="Mission Control - Apple.com" />
<p class="caption">Mission Control - Apple.com</p>
</div>
<p>The reason I don’t want to do this is because I’ve got an old MacBook Pro and zooming into Misson Control is slow. The whole process of:</p>
<ul>
<li>Go to Mission Control</li>
<li>Choose your Alacritty Window</li>
<li>Switch to that Window</li>
</ul>
<p>takes about 2 seconds. That’s way too long to maintain any kind of flow state when coding.</p>
<h3 id="the-solution">The Solution</h3>
<ol style="list-style-type: decimal">
<li>Create a copy of the application folder</li>
</ol>
<p>For example to create an Alacritty instance for <code>Whatever</code>s I can create a copy with:</p>
<pre class="terminal scrollx"><code>cp -r /Applications/Alacritty.app /Applications/Alacritty-Whatever.app</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>Open <code>Finder</code> and browse to the freshly copied application folder (<code>/Applications/Alacritty-Whatever.app</code> in the above example)</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/whatever-app.png" alt="Alacritty-Whatever.app" />
<p class="caption">Alacritty-Whatever.app</p>
</div>
<ol start="3" style="list-style-type: decimal">
<li>Open the information panel with <code>CMD</code> + <code>I</code>:</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/icon-placeholder.png" alt="Icon Placeholder" />
<p class="caption">Icon Placeholder</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li>Find a new image (use <a href="https://images.google.com">Google Images</a>, <a href="https://macosicons.com/#/">macosicons</a> etc)</li>
<li>Drag the new image to the icon placeholder</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/drag-icon.png" alt="Drag in the New Image" />
<p class="caption">Drag in the New Image</p>
</div>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/replace-icon.png" alt="Update Icon" />
<p class="caption">Update Icon</p>
</div>
<ol start="6" style="list-style-type: decimal">
<li>Launch Copied app through Spotlight or <a href="https://www.alfredapp.com/">Alfred</a></li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/launch-new-app.png" alt="Launch Copied App" />
<p class="caption">Launch Copied App</p>
</div>
<ol start="7" style="list-style-type: decimal">
<li>Check the Application Switcher</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/updated-app-switcher.png" alt="Updated Icon" />
<p class="caption">Updated Icon</p>
</div>
<h3 id="final-result">Final Result</h3>
<p>I used the above steps to create custom icons for Alacritty for both my projects and GitUI instances.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/custom-icons-workflow.png" alt="Alacritty Icons" />
<p class="caption">Alacritty Icons</p>
</div>
<h3 id="downsides">Downsides</h3>
<p>This is the simplest way to give different application instances different icons that I have found. You have to essentially create a new application (by copying an existing one) just to change an icon for a different instance. You need one copy per instance you want to customise the icon for. This seems a little crazy.</p>
<div class="figure">
<img src="https://media.giphy.com/media/tn9LtuEXQRJqT6dWrx/giphy.gif" alt="Make it Easier" />
<p class="caption">Make it Easier</p>
</div>
<p>If you know of an easier/better way to do this please drop me comment.</p>
<p>Unfortunately any time you update the original application (Alacritty in this instance) you need to recreate your copies and do the whole updating icon dance.</p>
<h3 id="scripting">Scripting</h3>
<p>This whole process is pretty easy to script, providing you can create an icns file for the image you require or already have an alternate icns file. But it is not as reliable as the steps outlined above, as sometimes icon caching issues makes it hard to refresh the new icons. See below for more details</p>
<h4 id="generating-an-icns-file">Generating an icns File</h4>
<p>There’s a program called <a href="http://www.amnoid.de/icns/makeicns.html">mkicns</a> that lets you convert images from various formats like jpg, png etc to icns files that are used for your application icons.</p>
<p>You can install it through <a href="https://brew.sh/">Homebrew</a>:</p>
<pre class="terminal scrollx"><code>brew install makeicns</code></pre>
<p>You can generate an icns file for a given image with:</p>
<pre class="terminal scrollx"><code>makeicns -in your-image_file -out your.icns</code></pre>
<p>There are a bunch <a href="http://www.amnoid.de/icns/makeicns.html">more options for makeicn</a>, so make sure to check the <code>--help</code> option for any customizations you want to make.</p>
<h4 id="icon-refresh-issues">Icon Refresh Issues</h4>
<p>Now that we have our own icns file, we can do the following:</p>
<ol style="list-style-type: decimal">
<li>Create a copy of the application folder as above</li>
<li>Copy across the custom icns file into the <code>Content/Resources</code> folder and replace the <strong>existing</strong> icns file you want to replace.</li>
</ol>
<p>For example for Alacritty, the main ics file is <code>Content/Resources/alacritty.icns</code>, so you’d do:</p>
<pre class="terminal scrollx"><code>cp your.icns /Applications/Alacritty-Whatever.app/Content/Resources/alacritty.icns</code></pre>
<p>Now if you try to launch your custom application with your new shiny icon you will notice that it has not been updated.</p>
<div class="figure">
<img src="https://media.giphy.com/media/OPU6wzx8JrHna/giphy.gif" alt="Sad Face" />
<p class="caption">Sad Face</p>
</div>
<p>In order to do that you need to help macos understand that the application has changed and you may need to some or all of the steps below:</p>
<ol style="list-style-type: decimal">
<li>touch the application folder</li>
</ol>
<pre class="terminal scrollx"><code>touch /Applications/Alacritty-Whatever.app</code></pre>
<p>If that doesn’t work you may also need to do the following:</p>
<ol start="2" style="list-style-type: decimal">
<li>Kill all the things</li>
</ol>
<pre class="terminal scrollx"><code>sudo killall Finder
sudo killall Dock</code></pre>
<p>These steps are from <a href="https://www.sethvargo.com/replace-icons-osx/">Changing Mac OS X Application Icons Programmatically</a>.</p>
<p>A full working script:</p>
<pre class="terminal scrollx"><code>cp -r /Applications/Alacritty.app /Applications/Alacritty-Whatever.app
cp whatever.icns /Applications/Alacritty-Whatever.app/Content/Resources/alacritty.icns
touch /Applications/Alacritty-Whatever.app
sudo killall Finder &amp;&amp; sudo killall Dock</code></pre>
<p>And hopefully that should be it. But sometimes it isn’t.</p>
<div class="figure">
<img src="https://media.giphy.com/media/22CEvbj04nLLq/giphy.gif" alt="Aaaaaaaaaaaaaaaargh" />
<p class="caption">Aaaaaaaaaaaaaaaargh</p>
</div>
<p>If that doesn’t work you may need more <a href="https://osxdaily.com/2022/05/23/clear-icon-cache-mac/">drastic</a> workarounds.</p>
<p>And at end of those drastic workarounds you might revert to just using the list of steps at the top of this article.</p>
<div class="figure">
<img src="https://media.giphy.com/media/B0vFTrb0ZGDf2/giphy.gif" alt="Small Smile" />
<p class="caption">Small Smile</p>
</div>
<p>A big thank you to Apple for making all this so damn hard.</p>
<div class="figure">
<img src="https://media.giphy.com/media/l0MYJlyOwdlT0SeU8/giphy.gif" alt="The End" />
<p class="caption">The End</p>
</div>
<h3 id="links">Links</h3>
<ul>
<li><a href="https://www.sethvargo.com/replace-icons-osx/">Changing Mac OS X Application Icons Programmatically</a></li>
<li><a href="https://osxdaily.com/2022/05/23/clear-icon-cache-mac/">How to Clear Icon Cache on Mac</a></li>
<li><a href="https://stackoverflow.com/questions/646671/how-do-i-set-the-icon-for-my-applications-mac-os-x-app-bundle">How do I set the icon for my application’s Mac OS X app bundle?</a></li>
<li><a href="https://stackoverflow.com/questions/14362063/icon-for-mac-osx-bundle">Icon for Mac OSX bundle</a></li>
</ul>]]></description>
    <pubDate>Wed, 19 Oct 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-10-19-how-to-add-different-icons-to-application-instances-on-macosx.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Extending Scala Case Class With NoStackTrace Leads To Unexpected toString Behaviour</title>
    <link>http://blog.ssanj.net/posts/2022-07-20-extending-scala-case-class-with-nostacktrace-leads-to-unexpected-tostring-behaviour.html</link>
    <description><![CDATA[<p>Say you had an ADT similar to this:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError</code></pre></div>
<p>This might seem weird to some. Why are we extending <code>NoStackTrace</code> ? This allows us to use the <code>MyError</code> as a return value through something like an <code>Either</code>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">sanitiseInput</span>(value: String): Either[MyError, ValidInput]</code></pre></div>
<p>We can also use it as an error that can be thrown or raised into <a href="https://typelevel.org/cats-effect/">cats.IO</a>, <a href="https://fs2.io/#/">fs2.Stream</a>, <a href="https://monix.io/">Monix.eval.Task</a> or equivalent:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> IO {
  <span class="kw">def</span> raiseError[A](t: Throwable): IO[A] <span class="co">//`t` has to extend Throwable if we want to use this function.</span>

  <span class="co">//other functions</span>
}</code></pre></div>
<p>You can also read about some related ideas in <a href="https://nrinaudo.github.io/scala-best-practices/adts/errors_extend_exception.html">Make error ADTs subtypes of Exception</a>.</p>
<p>Now if we use <code>MyError</code> in a test:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">object</span> MyErrorSuite <span class="kw">extends</span> weaver.<span class="fu">FunSuite</span> {

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError

  <span class="fu">test</span>(<span class="st">&quot;error message&quot;</span>) {
    expect.<span class="fu">same</span>(<span class="fu">MyError1</span>(<span class="st">&quot;error1&quot;</span>), <span class="fu">MyError2</span>(<span class="st">&quot;error2&quot;</span>)) <span class="co">//this is an error</span>
  }

}</code></pre></div>
<p>the test output from <a href="https://disneystreaming.github.io/weaver-test/">Weaver-Test</a> gets truncated somewhat:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>
[info] - error message 30ms
[info] *************FAILURES**************
[info] com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>
[error] - error message 30ms
[error]   Values not equal: (src/test/scala/com/example/validation/extra/MyErrorSuite.<span class="fu">scala</span>:<span class="dv">12</span>)
[error]
[error]   com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>$[MyError1]  |  com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>$[MyError2]</code></pre></div>
<p>All we get are the class names returned in the diff:</p>
<pre class="terminal scrollx"><code>com.example.validation.extra.MyErrorSuite$[MyError1]  |  com.example.validation.extra.MyErrorSuite$[MyError2]</code></pre>
<p>The diff we expected was something like:</p>
<pre class="terminal scrollx"><code> [MyError1]([error1]) | [MyError2]([error2]) //we can see that the class and error messages are different</code></pre>
<p>When you create a case class it generates a <code>toString</code> implementation of the form: <code>ClassName(field1Value, field2Value, ....)</code>.</p>
<p>So why are we loosing our <code>toString</code> implementation?</p>
<h2 id="cause">Cause</h2>
<p>Let’s try a simpler example in the REPL:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String)

scala&gt; <span class="fu">MyError1</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res35: MyError1 = <span class="fu">MyError1</span>(Oh noes) <span class="co">//&quot;Oh noes&quot; is output</span></code></pre></div>
<p>We can see that we do get the contents of all fields of the case class written out.</p>
<p>Let’s try extending <code>NoStackTrace</code> and see if it makes a difference:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res36: MyError2 = MyError2 <span class="co">//no message output</span></code></pre></div>
<p>We can see that although the class name is output the contents of the <code>message</code> field has not.</p>
<p>Interesting. This seems to be the cause of our issue in the test.</p>
<p>It turns out a case class doesn’t generate a <code>toString</code> method (and other implementations such has hashCode etc) if you <strong>already</strong> have a custom implementation for that method in a super type.</p>
<p><a href="https://github.com/scala/bug/issues/1549">It’s not a bug, it’s a feature</a>.</p>
<div class="figure">
<img src="https://media.giphy.com/media/l41YqG5h9gIWrcSBy/giphy.gif" alt="Nope" />
<p class="caption">Nope</p>
</div>
<p>So where does our <code>MyError2</code> class get a custom <code>toString</code> implementation from?</p>
<p>Lets have a look at the <code>NoStackTrace</code> class, since <code>MyError2</code> extends that:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">trait</span> NoStackTrace <span class="kw">extends</span> Throwable {
  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">fillInStackTrace</span>(): Throwable =
    <span class="kw">if</span> (NoStackTrace.<span class="fu">noSuppression</span>) <span class="kw">super</span>.<span class="fu">fillInStackTrace</span>()
    <span class="kw">else</span> <span class="kw">this</span>

  ...
}</code></pre></div>
<p>No <code>toString</code> implementation here. Let’s follow the inheritance trail to <code>java.lang.Throwable</code>. Here, we see that it <a href="https://github.com/EricChows/JDK-1.8-sourcecode/blob/d34a693ffa76fdbb0fea022b5bb7bfbd2c6df0bd/java/lang/Throwable.java#L390">does</a> have a custom <code>toString</code> implementation:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">toString</span>() {
    String s = <span class="fu">getClass</span>().<span class="fu">getName</span>();
    String message = <span class="fu">getLocalizedMessage</span>();
    <span class="kw">return</span> (message != <span class="kw">null</span>) ? (s + <span class="st">&quot;: &quot;</span> + message) : s;
}</code></pre></div>
<p>From the above implementation we can deduce that for <code>MyError2</code> the <code>getLocalizedMessage</code> method returns <code>null</code> because we only get back the class name <code>s</code> as output: (<code>MyError2</code>) as opposed to: <code>MyError2: message</code>.</p>
<p>Let’s follow along to <code>getLocalizedMessage</code> to see how <code>message</code> is calculated:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">getLocalizedMessage</span>() {
    <span class="kw">return</span> <span class="fu">getMessage</span>();
}</code></pre></div>
<p>and also to <code>getMessage</code>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">getMessage</span>() {
    <span class="kw">return</span> detailMessage;
}</code></pre></div>
<p>The <code>detailMessage</code> field is set through the many of the constructor methods for <code>Throwable</code>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> Throwable(String message) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = message; <span class="co">//set</span>
}

<span class="co">//or</span>

<span class="kw">public</span> Throwable(String message, Throwable cause) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = message; <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
}

<span class="co">//or</span>

<span class="kw">public</span> Throwable(Throwable cause) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = (cause==<span class="kw">null</span> ? <span class="kw">null</span> : cause.<span class="fu">toString</span>());  <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
}

<span class="co">//or</span>

<span class="kw">protected</span> Throwable(String message, Throwable cause,
                    <span class="dt">boolean</span> enableSuppression,
                    <span class="dt">boolean</span> writableStackTrace) {
    <span class="kw">if</span> (writableStackTrace) {
        <span class="fu">fillInStackTrace</span>();
    } <span class="kw">else</span> {
        stackTrace = <span class="kw">null</span>;
    }
    detailMessage = message;  <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
    <span class="kw">if</span> (!enableSuppression)
        suppressedExceptions = <span class="kw">null</span>;
}</code></pre></div>
<p>Since we have a field named <code>message</code> and not <code>detailMessage</code>, we don’t really override the value used by <code>Throwable</code> to generate its <code>toString</code> implementation.</p>
<h2 id="workarounds">Workarounds</h2>
<p>If we renamed our <code>message</code> field in <code>MyError2</code> to <code>detailMessage</code> we should be able to get our <code>toString</code> implementation working:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(detailMessage: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res37: MyError2 = MyError2 <span class="co">//Doesn&#39;t work</span></code></pre></div>
<p>Wow! That didn’t work either. Why though?</p>
<p>If we look at the definition of the <code>detailMessage</code> field on <code>java.lang.Throwable</code> we see that it’s <strong>private</strong>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">private</span> String detailMessage;</code></pre></div>
<p>This means we can’t override it from a sub class. Boo!</p>
<p>From our previous investigation we can see that all we need to do is override either <code>getLocalizedMessage</code> or <code>getMessage</code> or <code>toString</code> which are all <strong>public</strong>:</p>
<pre><code>public String toString() {
    String s = getClass().getName();
    String message = getLocalizedMessage(); //message calculated from here
    return (message != null) ? (s + &quot;: &quot; + message) : s;
}


public String getLocalizedMessage() {
    return getMessage(); //message content retrieved from here
}


public String getMessage() {
    return detailMessage; //message content
}</code></pre>
<h3 id="override-getmessage-or-getlocalizedmessage">Override getMessage or getLocalizedMessage</h3>
<p>By overriding <code>getMessage</code> or <code>getLocalizedMessage</code> in our case class, we can get some form of <code>toString</code>-ery happening. While this is not ideal, it “works”.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(<span class="kw">override</span> <span class="kw">val</span> getMessage: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res38: MyError2 = MyError2: Oh noes <span class="co">//We did it!</span></code></pre></div>
<h3 id="override-tostring">Override toString</h3>
<p>If you want a more case classy <code>toString</code> implementation, you’re going to have to do it yourself:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span> NoStackTrace {
  <span class="kw">override</span> <span class="kw">def</span> toString: String = s<span class="st">&quot;MyError2($message)&quot;</span>
}

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res39: MyError2 = <span class="fu">MyError2</span>(Oh noes) <span class="co">//we have case classiness</span></code></pre></div>
<p>Now we can get our test to fail with a better error message:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">object</span> MyErrorSuiteTake2 <span class="kw">extends</span> weaver.<span class="fu">FunSuite</span> {

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace {
  <span class="kw">val</span> message: String

  <span class="kw">override</span> <span class="kw">def</span> toString: String = {
    <span class="kw">val</span> className = getClass.<span class="fu">getName</span>
    s<span class="st">&quot;$className($message)&quot;</span>
   }
}

<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError

  <span class="fu">test</span>(<span class="st">&quot;error message&quot;</span>) {
    expect.<span class="fu">same</span>(<span class="fu">MyError1</span>(<span class="st">&quot;error1&quot;</span>), <span class="fu">MyError2</span>(<span class="st">&quot;error2&quot;</span>))
  }
}</code></pre></div>
<p>Which results in:</p>
<pre class="terminal scrollx"><code>info] com.example.validation.extra.MyErrorSuiteTake2
[error] - error message 38ms
[error]   Values not equal: (src/test/scala/com/example/validation/extra/MyErrorSuiteTake2.scala:20)
[error]
[error]   com.example.validation.extra.MyErrorSuiteTake2$[MyError1]([error1])  |  com.example.validation.extra.MyErrorSuiteTake2$[MyError2]([error2])
</code></pre>
<p>All this seems a bit tedious… as does extending the <code>Exception</code> hierarchy. If you do decide to go this route, hopefully this will help you stave off at least one of the issues with extending <code>java.lang.Throwable</code> and friends.</p>]]></description>
    <pubDate>Wed, 20 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-07-20-extending-scala-case-class-with-nostacktrace-leads-to-unexpected-tostring-behaviour.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Naming a tmux Session</title>
    <link>http://blog.ssanj.net/posts/2022-07-16-naming-a-tmux-session.html</link>
    <description><![CDATA[<p>When you start a new <a href="https://github.com/tmux/tmux">tmux</a> session with:</p>
<pre class="terminal scrollx"><code>tmux</code></pre>
<p>If you list your tmux session with:</p>
<pre class="terminal scrollx"><code>tmux ls</code></pre>
<p>You’ll see a default name used for your sessions:</p>
<pre class="terminal scrollx"><code>2: 1 windows (created Sat Jul 16 15:59:49 2022) (attached)</code></pre>
<p>In the above the name of the tmux session is <strong>2</strong>. Remembering these numbers can become unwheldly when you have many tmux sessions running, each with a different purpose.</p>
<p>The easier way to create a new session is by giving it a name of your choosing:</p>
<pre class="terminal scrollx"><code>tmux new -s your_cool_here</code></pre>
<p>And now when you list your tmux sessions, you can easily find the session you just created:</p>
<pre class="terminal scrollx"><code>your_cool_name_here: 1 windows (created Sat Jul 16 16:03:46 2022) (attached)</code></pre>]]></description>
    <pubDate>Sat, 16 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-07-16-naming-a-tmux-session.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Move a Tab Between Split Panes in Sublime Text</title>
    <link>http://blog.ssanj.net/posts/2022-06-29-how-to-move-a-tab-between-split-panes-in-sublime-text.html</link>
    <description><![CDATA[<p>When looking up definitions of a complex <a href="https://scala-lang.org/">Scala</a> class in <a href="https://www.sublimetext.com/">Sublime Text</a> it’s quite common to open up a lot of related classes; each in a separate tab. 🤦🏾</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/many-tabs.png" alt="Related Classes" />
<p class="caption">Related Classes</p>
</div>
<p>In the past, I opened related classes in a new tab with the <code>goto_definition</code> command. This opens the class in a new tab in the current pane. I would repeat this for every definition I needed to look up. This very quickly leads to a lot of open tabs as shown in the image above.</p>
<p>It becomes very hard to keep track of the original class you were working on because there are so many tabs open. This can get overwhelming in more complex projects, sometimes leading to tens of related classes open in separate tabs.</p>
<p>One way I’ve found to manage this “tab overload” is to move these related classes to another split pane. For example you can create a vertical split pane with the <code>CMD</code> + <code>ALT</code> + <code>SHIFT</code> + <code>2</code> key combo.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/horizontal-split.png" alt="Vertical Split Pane" />
<p class="caption">Vertical Split Pane</p>
</div>
<p>I used to click-and-drag the required tabs between split panes.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/click-drag-between-panes.gif" alt="Dragging Tabs Between Panes" />
<p class="caption">Dragging Tabs Between Panes</p>
</div>
<p>While this is fine it does become a little tedious when you have many open tabs that you want to move. It’s much easier if you can do it through a keyboard shortcut.</p>
<p>To my surprise, Sublime Text already had this feature buried in the <code>View</code> menu. Sublime Text refers to the split panes as “groups” and lets you move files between these “groups”.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/st-menu.png" alt="Sublime Text View Menu" />
<p class="caption">Sublime Text View Menu</p>
</div>
<p>Now I can seamlessly move tabs to pane below with <code>CTRL</code> + <code>SHIFT</code> + <code>2</code>. So much easier :) What would make this even better is if Sublime Text selected the tab to the <code>right</code> after a move instead of the one on the <code>left</code>. That way you could combo your way through all the open tabs (assuming they were stacked to the right) without moving your mouse .</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/move-views-between-panes.gif" alt="Move to Split Pane 2" />
<p class="caption">Move to Split Pane 2</p>
</div>
<p>More generally you can move tabs to a pane with a given number with <code>CTRL</code> + <code>SHIFT</code> + <code>PANE_NUMBER</code></p>]]></description>
    <pubDate>Wed, 29 Jun 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-06-29-how-to-move-a-tab-between-split-panes-in-sublime-text.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Feedback on Java Planet Enum in Haskell</title>
    <link>http://blog.ssanj.net/posts/2021-09-09-feedback-on-java-planet-enum-in-Haskell.html</link>
    <description><![CDATA[<p>A few weeks ago I <a href="https://sanj.ink/posts/2021-08-26-java-planet-enum-in-Haskell.html">posted</a> my attempt at implementing <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java’s Planet Enumeration example</a> in Haskell. There was some useful feedback from <a href="https://www.reddit.com/r/haskell/comments/petl9t/encoding_the_java_planet_enumeration_example_in/">Reddit</a>, so I though I’d discuss the different implementation options mentioned.</p>
<p><a href="https://www.reddit.com/user/brandonchinn178/">brandonchinn178</a> mentioned some great changes. The first was to do away with <code>PlanetStat</code> and replace it with functions that pulled out the necessary data when given a Planet:</p>
<blockquote>
<p>You mentioned Java having a “mapping for free”. In Haskell, you can also get mappings for free with functions; after all, functions are maps from inputs to outputs</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">Mercury</span> <span class="fu">=</span> <span class="fu">...</span>
radius <span class="fu">...</span> <span class="fu">=</span> <span class="fu">...</span>

<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">Mercury</span> <span class="fu">=</span> <span class="fu">...</span>
mass <span class="fu">...</span> <span class="fu">=</span> <span class="fu">...</span></code></pre></div>
<blockquote>
<p>This gets rid of the need for the PlanetStat data type, which I think is better, but wouldnt be good if eventually, you want to load the stats from a JSON file (for example)</p>
</blockquote>
<p>This is more idiotmatic Haskell. The only down side is that you don’t pull out all the information you need at the same time and have to write two functions in this case.</p>
<p>He also mentioned a few other changes:</p>
<blockquote>
<p>you dont need type annotations for minBound/maxBound, since you have the final result typed as [Planet]</p>
</blockquote>
<p>This is true and an easy fix.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetValues ::</span> [<span class="dt">Planet</span>]
planetValues <span class="fu">=</span> [minBound <span class="fu">..</span> maxBound]</code></pre></div>
<blockquote>
<p>I personally wouldnt have a newtype for literally every single function output. I would say its fine to just return a Double for surface gravity / weight</p>
</blockquote>
<p>I erred on the side of “readability” for this one, but adding in a lot of newtypes does add noise.</p>
<blockquote>
<p>“massOnEarth” is misleading: its the mass regardless of what planet youre on</p>
</blockquote>
<p>I am not so sure about this one. From the Java example it does seem like the mass supplied is the one on Earth which is then compared to its mass on other planets.</p>
<blockquote>
<p>instead of traversing a simple putStrLn over a formatted list of strings, I would defer the string rendering as much as possible, e.g.</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">let</span> planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]
    render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="fu">...</span>
<span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<p>I’ve always found Haskell’s String concatenation/interpolation a bit clunky so I’ve taken to separating the String generation to separate functions. But this suggestion makes a lot of sense - collect all your data and then render it once without rendering pieces of your data as you go.</p>
<blockquote>
<p>or even just go all-in with the iteration</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">runPlanets earthWeight <span class="fu">=</span>
  forM_ [minBound <span class="fu">..</span> maxBound] <span class="fu">$</span> \planet <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> newWeight <span class="fu">=</span> surfaceWeight mass planet
    putStrLn <span class="fu">$</span> <span class="st">&quot;Your mass on &quot;</span> <span class="fu">&lt;&gt;</span> show planet <span class="fu">&lt;&gt;</span> <span class="fu">...</span>
  <span class="kw">where</span>
    mass <span class="fu">=</span>
      <span class="kw">let</span> <span class="dt">SurfaceGravity</span> earthGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>
      <span class="kw">in</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthGravity</code></pre></div>
<p>Another interesting suggestion.</p>
<p>I think the biggest trap I fell into while encoding the Java solution into Haskell was just that - Encoding a Java solution into Haskell. Instead, I should have solved it in the way Haskell enables you to.</p>
<p><a href="https://www.reddit.com/user/asthetaperlight/">asthetaperlight</a> had some ideas on the use of newtypes:</p>
<blockquote>
<p>For throwaway code like this, sure. But it would also be fine to write it as a shell script, if for some reason you really felt like it. Dimensional analysis is the static typing of physics. Not the fancy stuff that makes you want to use Haskell instead of Java - the “has literally any types at all” that makes you want to use C instead of B. Better to build good habits before you need them.</p>
</blockquote>
<blockquote>
<p>That said, SurfaceWeight doesn’t make much sense as written. Either go all in and tag it with a phantom Planet …</p>
</blockquote>
<p><code>SurfaceWeight</code> didn’t really make much sense on its own. I love the idea about saying “this is the weight on this planet” and tagging the weight with a phantom Planet.</p>
<p>The warning around using the above technique is funny and cautions against using unnecessary complexity:</p>
<blockquote>
<p>Then seriously rethink whatever aspect of your design made that seem necessary …</p>
</blockquote>
<p>😂</p>
<blockquote>
<p>or make it what it is: newtype Weight = Weight Double.</p>
</blockquote>
<p><code>SurfaceWeight</code> seems too specific and <code>Weight</code> seems like a more natural wrapper type.</p>
<p><a href="https://www.reddit.com/user/friedbrice/">friedbrice</a> has some interesting insights:</p>
<blockquote>
<p>Nice post, I hope you’re enjoying Haskell.</p>
</blockquote>
<blockquote>
<p>One thing that I find interesting, you bring up a decisive difference between object oriented programming and functional programming: how object oriented programming packages data and behavior together, and how functional programming separates data and behavior. it may seem like a bummer at first that you have to write each enum value twice, once when the data is defined, and once when the behavior is defined, but there’s a very good reason that functional programming encourages this separation.</p>
</blockquote>
<blockquote>
<p>I think we anthropomorphize the computer too much, and so I don’t like calling it behavior. I like calling it interpretation, specifically interpretation of the data. One common theme of object oriented programming is that the downstream user is not allowed to interpret the data. The data is hidden from them, and the interpretation is defined solely by the upstream user. sometimes, this is exactly what you want. Haskell has many ways to hide data, not least of all are simple things like partial application and closures, hiding through scope instead of access modifiers.</p>
</blockquote>
<blockquote>
<p>The problem is that object oriented programming insists that you always hide your data like this. most of the time, you don’t want to hide your data. Your behavior, your planet stats, is one interpretation of the data. The power of functional programming is that it need not be the only interpretation.</p>
</blockquote>
<p>This idea of “data” having multiple “interpretations” is pretty cool. It’s something I had not thought of explicitly before. As previously mentioned by brandonchinn178, we could define a function each to get the <code>mass</code> and <code>radius</code> from a <code>Planet</code> as opposed to a <code>PlanetStat</code>. This is yet another interpretation of the <code>Planet</code> “data”.</p>
<h2 id="code-with-recommendations">Code with Recommendations</h2>
<p><details> <summary>brandonchinn178’s recommendations</summary></p>
<h3 id="brandonchinn178---1">brandonchinn178 - 1</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Brandonchinn178/Planets_1.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Brandonchinn178.Planets_1</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> m)   <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> r) <span class="fu">=</span> radius planet
    <span class="kw">in</span> gConstant <span class="fu">*</span> m <span class="fu">/</span> (r <span class="fu">*</span> m)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> sg <span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets sampleWeight <span class="fu">=</span>
    <span class="kw">let</span> earthSurfaceGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> sampleWeight <span class="fu">/</span> earthSurfaceGravity

        planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]
        render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show weight)

    <span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<h3 id="brandonchinn178---2">brandonchinn178 - 2</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Brandonchinn178/Planets_2.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Brandonchinn178.Planets_2</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (forM_, traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> m)   <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> r) <span class="fu">=</span> radius planet
    <span class="kw">in</span> gConstant <span class="fu">*</span> m <span class="fu">/</span> (r <span class="fu">*</span> m)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> sg <span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
  forM_ [minBound <span class="fu">..</span> maxBound] <span class="fu">$</span> \planet <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> newWeight <span class="fu">=</span> surfaceWeight mass planet
    putStrLn <span class="fu">$</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show planet <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show newWeight)
  <span class="kw">where</span>
    mass <span class="fu">=</span>
      <span class="kw">let</span> earthGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>
      <span class="kw">in</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthGravity</code></pre></div>
<p></details></p>
<p><details> <summary>asthetaperlight’s recommendations</summary></p>
<h3 id="asthetaperlight">asthetaperlight</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Asthetaperlight/Planets.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Asthetaperlight.Planets</span>(runPlanets) <span class="kw">where</span>

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }


<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Weight</span> <span class="fu">=</span> <span class="dt">Weight</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>

<span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">Weight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetValues ::</span> [<span class="dt">Planet</span>]
        planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]

<span class="ot">        printSurfaceWeight ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
        printSurfaceWeight planet (<span class="dt">Weight</span> sw) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> (show planet) <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show sw)

<span class="ot">        planetStatsStrings ::</span> [<span class="dt">String</span>]
        planetStatsStrings <span class="fu">=</span> (\p <span class="ot">-&gt;</span> printSurfaceWeight p (surfaceWeight massOnEarth p)) <span class="fu">&lt;$&gt;</span> planetValues
    <span class="kw">in</span>
       traverse_ putStrLn planetStatsStrings</code></pre></div>
<p></details></p>
<p><details open> <summary>Final Update</summary></p>
<p>And here’s the final implementation I decided to use given the above recommendations:</p>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Final/Planets.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Final.Planets</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="kw">newtype</span> <span class="dt">Gravity</span> <span class="fu">=</span> <span class="dt">Gravity</span> <span class="dt">Double</span> <span class="kw">deriving</span> <span class="dt">Show</span>

<span class="kw">newtype</span> <span class="dt">Weight</span> <span class="fu">=</span> <span class="dt">Weight</span> <span class="dt">Double</span> <span class="kw">deriving</span> <span class="dt">Show</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Gravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> mass&#39;)     <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> radius&#39;) <span class="fu">=</span> radius planet
    <span class="kw">in</span> <span class="dt">Gravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass&#39; <span class="fu">/</span> (radius&#39; <span class="fu">*</span> radius&#39;)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Gravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">Weight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets sampleWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Gravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> sampleWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetToWeight ::</span> [(<span class="dt">Planet</span>, <span class="dt">Weight</span>)]
        planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]

<span class="ot">        render ::</span> (<span class="dt">Planet</span>, <span class="dt">Weight</span>) <span class="ot">-&gt;</span> <span class="dt">String</span>
        render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show weight)

    <span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<p></details></p>]]></description>
    <pubDate>Thu, 09 Sep 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-09-09-feedback-on-java-planet-enum-in-Haskell.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Java Planet Enum in Haskell</title>
    <link>http://blog.ssanj.net/posts/2021-08-26-java-planet-enum-in-Haskell.html</link>
    <description><![CDATA[<p>A while back I was trying to implement the <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Planet Enum example</a> in Haskell. Below is the Java source taken directly from the Oracle documentation:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> <span class="kw">enum</span> Planet {
    <span class="fu">MERCURY</span> (<span class="fl">3.303e+23</span>, <span class="fl">2.4397e6</span>),
    <span class="fu">VENUS</span>   (<span class="fl">4.869e+24</span>, <span class="fl">6.0518e6</span>),
    <span class="fu">EARTH</span>   (<span class="fl">5.976e+24</span>, <span class="fl">6.37814e6</span>),
    <span class="fu">MARS</span>    (<span class="fl">6.421e+23</span>, <span class="fl">3.3972e6</span>),
    <span class="fu">JUPITER</span> (<span class="fl">1.9e+27</span>,   <span class="fl">7.1492e7</span>),
    <span class="fu">SATURN</span>  (<span class="fl">5.688e+26</span>, <span class="fl">6.0268e7</span>),
    <span class="fu">URANUS</span>  (<span class="fl">8.686e+25</span>, <span class="fl">2.5559e7</span>),
    <span class="fu">NEPTUNE</span> (<span class="fl">1.024e+26</span>, <span class="fl">2.4746e7</span>);

    <span class="kw">private</span> <span class="dt">final</span> <span class="dt">double</span> mass;   <span class="co">// in kilograms</span>
    <span class="kw">private</span> <span class="dt">final</span> <span class="dt">double</span> radius; <span class="co">// in meters</span>
    <span class="fu">Planet</span>(<span class="dt">double</span> mass, <span class="dt">double</span> radius) {
        <span class="kw">this</span>.<span class="fu">mass</span> = mass;
        <span class="kw">this</span>.<span class="fu">radius</span> = radius;
    }
    <span class="kw">private</span> <span class="dt">double</span> <span class="fu">mass</span>() { <span class="kw">return</span> mass; }
    <span class="kw">private</span> <span class="dt">double</span> <span class="fu">radius</span>() { <span class="kw">return</span> radius; }

    <span class="co">// universal gravitational constant  (m3 kg-1 s-2)</span>
    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">double</span> G = <span class="fl">6.67300E-11</span>;

    <span class="dt">double</span> <span class="fu">surfaceGravity</span>() {
        <span class="kw">return</span> G * mass / (radius * radius);
    }
    <span class="dt">double</span> <span class="fu">surfaceWeight</span>(<span class="dt">double</span> otherMass) {
        <span class="kw">return</span> otherMass * <span class="fu">surfaceGravity</span>();
    }
    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(String[] args) {
        <span class="kw">if</span> (args.<span class="fu">length</span> != <span class="dv">1</span>) {
            System.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;Usage: java Planet &lt;earth_weight&gt;&quot;</span>);
            System.<span class="fu">exit</span>(-<span class="dv">1</span>);
        }
        <span class="dt">double</span> earthWeight = Double.<span class="fu">parseDouble</span>(args[<span class="dv">0</span>]);
        <span class="dt">double</span> mass = earthWeight/EARTH.<span class="fu">surfaceGravity</span>();
        <span class="kw">for</span> (Planet p : Planet.<span class="fu">values</span>())
           System.<span class="fu">out.printf</span>(<span class="st">&quot;Your weight on </span><span class="ch">%s</span><span class="st"> is </span><span class="ch">%f%n</span><span class="st">&quot;</span>,
                             p, p.<span class="fu">surfaceWeight</span>(mass));
    }
}</code></pre></div>
<p>This seemed fairly easy. I started off by modelling a Planet and associated data:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }

<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">SurfaceWeight</span> <span class="fu">=</span> <span class="dt">SurfaceWeight</span> <span class="dt">Double</span>

<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span></code></pre></div>
<p>One difference between Haskell and OOP languages is that Haskell separates out data from behaviour while OOP languages combine data (or state) and behaviour into one construct - a class.</p>
<div class="figure">
<img src="/images/java-planet-enum/java-haskell-state-behaviour.png" alt="State and Behaviour in OOP vs FP" />
<p class="caption">State and Behaviour in OOP vs FP</p>
</div>
<p>In Java, <code>surfaceGravity</code> and <code>surfaceWeight</code> are bound to a particular Planet instance. In Haskell, as mentioned above, we don’t have behaviour and state stored together. How do we go about implementing these functions in Haskell?</p>
<p>Instead of having state and behaviour combined, we can <strong>use</strong> the state to derive any behaviour we need:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">SurfaceWeight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg</code></pre></div>
<p>Notice how we pass in the <code>Planet</code> instance we need to each function above. We don’t have a <code>this</code> reference as in most OOP languages. Here’s the Java implementation of the above functions with an explicit <code>this</code> reference added:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java">    <span class="dt">double</span> <span class="fu">surfaceGravity</span>() {
        <span class="kw">return</span> G * <span class="kw">this</span>.<span class="fu">mass</span> / (<span class="kw">this</span>.<span class="fu">radius</span> * <span class="kw">this</span>.<span class="fu">radius</span>);
    }

    <span class="dt">double</span> <span class="fu">surfaceWeight</span>(<span class="dt">double</span> otherMass) {
        <span class="kw">return</span> otherMass * <span class="kw">this</span>.<span class="fu">surfaceGravity</span>();
    }</code></pre></div>
<p>That solves one problem, but there’s another. It has to do with retrieving all the values of an enumeration. In the Java example we use:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java">Planet.<span class="fu">values</span>()</code></pre></div>
<p>How do we get all the values of an enumeration in Haskell?</p>
<p>You may have noticed the <code>deriving (Enum, Bounded ...)</code> syntax against the <code>Planet</code> data type. Using the <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#t:Enum">Enum</a> and <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#t:Bounded">Bounded</a> type classes we can retrieve all the values of the <code>Planet</code> sum type:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetValues ::</span> [<span class="dt">Planet</span>]
planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]</code></pre></div>
<p>The above code, grabs the first (<code>minBound</code>) and last (<code>maxBound</code>) values of the <code>Planet</code> sum type and the range syntax (<code>..</code>) makes it possible to enumerate all the values in between. Pretty nifty! The range syntax is made possible by having an <code>Enum</code> instance for a data type. See the <code>enumFrom</code>, <code>enumFromThen</code>, <code>enumFromThenTo</code> and <code>enumFromTo</code> functions on the <code>Enum</code> type class for more information.</p>
<p>It’s starting to look like we’ve got this solved pretty easily. Unfortunately we have another small problem. The <code>planetValues</code> function only gives us the <code>Planet</code> sum type - essentially the names of the planets. We also need to retrieve the mass and radius for each planet as per Java:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> <span class="kw">enum</span> Planet {
    <span class="fu">MERCURY</span> (<span class="fl">3.303e+23</span>, <span class="fl">2.4397e6</span>),
    <span class="fu">VENUS</span>   (<span class="fl">4.869e+24</span>, <span class="fl">6.0518e6</span>),
    <span class="fu">EARTH</span>   (<span class="fl">5.976e+24</span>, <span class="fl">6.37814e6</span>),
    <span class="fu">MARS</span>    (<span class="fl">6.421e+23</span>, <span class="fl">3.3972e6</span>),
    <span class="fu">JUPITER</span> (<span class="fl">1.9e+27</span>,   <span class="fl">7.1492e7</span>),
    <span class="fu">SATURN</span>  (<span class="fl">5.688e+26</span>, <span class="fl">6.0268e7</span>),
    <span class="fu">URANUS</span>  (<span class="fl">8.686e+25</span>, <span class="fl">2.5559e7</span>),
    <span class="fu">NEPTUNE</span> (<span class="fl">1.024e+26</span>, <span class="fl">2.4746e7</span>);
    ...</code></pre></div>
<p>How do we go about doing this?</p>
<p>We could create a <a href="https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html">Map</a> with <code>Planet</code> as the key and <code>PlanetStat</code> as the value. So far so good. But when we go to look up a value we have to use the <a href="https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#g:9">lookup</a> function:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">lookup<span class="ot"> ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Map</span> k a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</code></pre></div>
<p>The return type of the <code>lookup</code> function is a <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Maybe.html#t:Maybe">Maybe</a>. This means we have to deal with the possibility of not finding a particular <code>Planet</code> (the <code>Nothing</code> case):</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- planetMap :: Map Planet PlanetStat</span>

<span class="kw">case</span> (lookup somePlanet planetMap) <span class="kw">of</span>
  <span class="dt">Just</span> planet <span class="ot">-&gt;</span> <span class="co">-- cool planet-related stuff</span>
  <span class="dt">Nothing</span>     <span class="ot">-&gt;</span> <span class="co">-- this should never happen!</span></code></pre></div>
<p>We know this is impossible because we have a sum type for <code>Planet</code>, but because we are using a <code>Map</code> we need to deal with it.</p>
<p>Another way to encode this mapping is like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )</code></pre></div>
<p>This way we don’t have to deal with any optionality; this is a total function.</p>
<p>It’s interesting that Java gives us this mapping for “free” because it combines state and behaviour. In Haskell you need to bring state and behaviour together as required. A big thanks to my friend <a href="http://twitter.com/ajfitzpatrick">Adam</a> for pointing this out. In hindsight it seems obvious.</p>
<p>And that’s about it for surprises. Here’s the full solution:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }


<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">SurfaceWeight</span> <span class="fu">=</span> <span class="dt">SurfaceWeight</span> <span class="dt">Double</span>

<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>

<span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">SurfaceWeight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetValues ::</span> [<span class="dt">Planet</span>]
        planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]

<span class="ot">        printSurfaceWeight ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
        printSurfaceWeight planet (<span class="dt">SurfaceWeight</span> sw) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> (show planet) <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show sw)

<span class="ot">        planetStatsStrings ::</span> [<span class="dt">String</span>]
        planetStatsStrings <span class="fu">=</span> (\p <span class="ot">-&gt;</span> printSurfaceWeight p (surfaceWeight massOnEarth p)) <span class="fu">&lt;$&gt;</span> planetValues
    <span class="kw">in</span>
       traverse_ putStrLn planetStatsStrings</code></pre></div>
<p>The <a href="https://github.com/ssanj/java-plants-enum-in-haskell">source code</a> for the example can be found on Github.</p>
<p>If there are any easier/better ways to encode this example in Haskell, please free to drop in comment.</p>]]></description>
    <pubDate>Thu, 26 Aug 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-08-26-java-planet-enum-in-Haskell.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>If it's memorable it's reusable</title>
    <link>http://blog.ssanj.net/posts/2021-06-09-if-its-memorable-its-reusable.html</link>
    <description><![CDATA[<p>Memorable phrases are like a catchy tune; you can’t get them out of your head. Take this phrase for instance:</p>
<blockquote>
<p>Make the change easy, then make the easy change</p>
</blockquote>
<p>I heard it first on the <a href="https://elm-radio.com/episode/incremental-steps">Elm Radio</a> podcast. This was some very useful advice on how to introduce changes to a code base. First make it easy to introduce the change by refactoring your code, adding in tests etc. Then swoop in an add your change with minimal fuss. This is a nice reusable technique.</p>
<p><a href="https://twitter.com/KentBeck/status/250733358307500032?s=20">Kent Beck</a> originally said this back in 2012. I remember mentioning this pattern to a few colleagues at work and sure enough even months later they still keep referring to it.</p>
<p>If something is memorable, you are more likely to use it solve a given problem.</p>
<p>This got me thinking:</p>
<blockquote>
<p>Is memorable advice more useful than unmemorable advice?</p>
</blockquote>
<p>It seems obvious in hindsight. What good is advice if no one remembers it?</p>
<p>Another phrase I heard of recently was</p>
<blockquote>
<p>Teach me how to message</p>
</blockquote>
<p>a technique used by <a href="https://youtu.be/RN2_NchjrJQ">Richard Feldman</a> to identify functions of the following type in Elm:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">CustomType</span> <span class="ot">-&gt;</span> msg)</code></pre></div>
<p>Based on how you implement this function, you “teach” it how to create the appropriate message. Here’s an example from Richard’s presentation:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">Article.view <span class="fu">:</span>
  (<span class="dt">Article</span> a <span class="ot">-&gt;</span> msg) <span class="fu">//</span>teach this how to message
  <span class="ot">-&gt;</span> <span class="dt">Article</span> a
  <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</code></pre></div>
<p>Now everytime I see a function of the above shape I always think that it needs me to teach it how to message. Somehow that makes it easier to implement this function. I know what it “needs”.</p>
<p>There is something calming about seeing a problem in the code and knowing how to go about solving it. These catchy phrases become part of your swissarmy knife used to carve out solutions.</p>
<p>The next time you has stumbled on a great technique on how to solve a problem try and package it in memorable way.</p>]]></description>
    <pubDate>Wed, 09 Jun 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-06-09-if-its-memorable-its-reusable.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Rerun a Failed Hedgehog Test Through Tasty with Stack</title>
    <link>http://blog.ssanj.net/posts/2020-12-15-how-to-rerun-a-failed-hedgehog-test-through-tasy.html</link>
    <description><![CDATA[<p>I recently had a failing <a href="https://hackage.haskell.org/package/hedgehog">Hedgehog</a> property while running some tests on a personal project. The output was something like:</p>
<pre class="terminal scrollx"><code>    versionRange failure: FAIL
        ✗ versionRange failure failed at test/DBPropSpec.hs:41:54
          after 1 test and 2 shrinks.

             ┏━━ test/DBPropSpec.hs ━━━
          25 ┃ hprop_versionRange_failure :: H.Property
          26 ┃ hprop_versionRange_failure =
          27 ┃   H.property $ do
          28 ┃     minR  &lt;- H.forAll $ Gen.int (Range.linear 0 99)
             ┃     │ 0
          29 ┃     maxR  &lt;- H.forAll $ Gen.int (Range.linear (minR + 1) 200)
             ┃     │ 1
          30 ┃     let upperG :: H.Gen Int =  Gen.int (Range.linear maxR (maxR + 100))
          31 ┃         lowerG :: H.Gen Int =  Gen.int (Range.linear (minR - 100) minR)
          32 ┃         minMax = (D.VersionRange minR maxR)
          33 ┃     versionE &lt;- H.forAll $ Gen.either lowerG upperG
             ┃     │ Left 0
          34 ┃     either (assertVersionRangeFailure minMax) (assertVersionRangeFailure minMax) versionE
          35 ┃       where
          36 ┃             assertVersionRangeFailure :: D.VersionRange -&gt; Int -&gt; H.PropertyT IO ()
          37 ┃             assertVersionRangeFailure maxMin version =
          38 ┃               let range = D.versionRange maxMin (D.mkNoteVersion version)
          39 ┃               in case range of
          40 ┃                   (D.InvalidNoteVersionRange v r) -&gt; (r H.=== maxMin) &gt;&gt; (v H.=== version)
          41 ┃                   (D.ValidNoteVersionRange _)     -&gt; H.failure
             ┃                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

          This failure can be reproduced by running:
          &gt; recheck (Size 99) (Seed 15737640735508047734 16943050916655939693) versionRange failure

      Use &#39;--hedgehog-replay &quot;Size 99 Seed 15737640735508047734 16943050916655939693&quot;&#39; to reproduce.</code></pre>
<p>While the output mentions that we can rerun the failed property with:</p>
<pre class="terminal scrollx"><code>Use &#39;--hedgehog-replay &quot;Size 99 Seed 15737640735508047734 16943050916655939693&quot;&#39; to reproduce.</code></pre>
<p>We can’t use this information directly if we are running the tests through <a href="https://hackage.haskell.org/package/tasty">Tasty</a> and <a href="https://github.com/commercialhaskell/stack">Stack</a>. I had previously blogged about <a href="https://sanj.ink/posts/2018-02-01-how-to-run-specific-tests-through-stack-with-tasy-in-haskell.html">How to run specific tests through Stack with Tasty in Haskell</a>. From that article we know about the <code>--ta</code> parameter which enables us to pass parameters to the underlying testing framework:</p>
<pre class="terminal scrollx"><code>--ta,--test-arguments TEST_ARGS Arguments passed in to the test suite program</code></pre>
<p>Using that information we can now rerun the Hedgehog property like so:</p>
<pre class="terminal scrollx"><code>stack test --ta &#39;--hedgehog-replay &quot;Size 100 Seed 15737640735508047734 16943050916655939693&quot;&#39;</code></pre>
<p>Unfortunately this will run all the tests including the ones that are not affected by the failing seed. From the post mentioned previously we know how to use the <code>-p</code> parameter to run specific tests:</p>
<pre class="terminal scrollx"><code>-p,--pattern ARG         Select only tests that match pattern</code></pre>
<p>Using that information we can now rerun just the affect Hedgehog test with the provided seed:</p>
<pre class="terminal scrollx"><code>stack test --ta &#39;--hedgehog-replay &quot;Size 100 Seed 15737640735508047734 16943050916655939693&quot; -p &quot;your_spec_name&quot;&#39;</code></pre>
<p>While this is quite cumbersome to use I hope this will help anyone else who was stumped by how to simply rerun a failed Hedgehog property through tasty and Stack.</p>]]></description>
    <pubDate>Tue, 15 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2020-12-15-how-to-rerun-a-failed-hedgehog-test-through-tasy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Random Freezing of MacBook Pro</title>
    <link>http://blog.ssanj.net/posts/2020-10-23-random-freezing-of-macbook-pro.html</link>
    <description><![CDATA[<p>Quite recently my 2017 MacBook Pro would freeze up for anywhere between five to thirty seconds. And what I mean by “freeze up” is that it would not accept any keyboard commands at all. I checked to see if the keyboard was working by pressing the <code>Capslock</code> button and it was - I could see the <code>Capslock</code> light turning on and off. Surprisingly I could still move the mouse pointer around the screen but I couldn’t click on any of the UIs and make them do anything.</p>
<p>As you can imagine this was quite frustrating and I was wondering if I should upgrade my Macosx from <code>Mojave</code> to <code>Catalina</code>. I had been dreading this upgrade because Apple usually ends up breaking something and then I have to waste my time tending to those issues.</p>
<p>I also seemed to be able to quite regularly make the system freeze by switching between windows in <a href="https://www.sublimetext.com/">Sublime Text</a> or moving to another window or typing in the terminal. Almost anything really, but nothing conclusive.</p>
<p>I had also had a look in <code>Activity Monitor</code> after a freeze and didn’t find anything out of the ordinary using of a lot of CPU or RAM. I also had plenty of disc space.</p>
<h1 id="suspects">Suspects</h1>
<h2 id="com.apple.hiservices-xpcservice">com.apple.hiservices-xpcservice</h2>
<p>One of the services I did notice in <code>Activity Monitor</code> was <code>com.apple.hiservices-xpcservice</code> - which was <code>not responding</code>. I killed it manually but it didn’t make things better (or worse). It was not always <code>not responding</code> after a freeze.</p>
<p>Some people had <a href="https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac">different</a> results though.</p>
<h2 id="alfred">Alfred</h2>
<p>The freezes were getting progressively more frequent. Suddenly one day I couldn’t launch <a href="https://www.alfredapp.com/">Alfred</a> with my usual key combination. I could see that <code>Alfred</code> was working and I could manually launch it by clicking on its icon in the system tray but my key combinations no longer worked :(</p>
<h2 id="keyboard">Keyboard</h2>
<p>I had recently purchased a <a href="https://www.amazon.com.au/Durgod-Taurus-Mechanical-Gaming-Keyboard/dp/B07VZVY1NT">Durgod K320 Taurus</a> and I thought that maybe it was failing - after all, most of my freezes had happened when using the keyboard to do one thing or another.</p>
<p>After the next freeze, I noticed that my character set had changed and now when I typed I was seeing some weird characters. This seemed to confirm my suspicions of the <code>Durgod</code> and I unplugged and replugged it into my USB hub. The character set was back to normal. So I figured that the keyboard was faulty. I did some Google searches but didn’t find too many people complaining about this issue with the <code>Durgod</code>.</p>
<h2 id="sublime-text">Sublime Text</h2>
<p>After a while I came across a sure-fire way to cause my laptop to freeze - Switching between windows of by various Sublime Text windows.</p>
<p>So maybe the problem was with Sublime Text? Given that I did most of my development in Sublime Text it might be the culprit. I found a newer version of Sublime Text than I was using and installed it. I even considered installing an alpha version of <code>Sublime Text 4</code> to see if that was any better.</p>
<p>Unfortunately that did not solve the problem.</p>
<h2 id="hardware-failure">Hardware Failure</h2>
<p>At this point I launched into a full hardware <a href="https://support.apple.com/en-au/HT202731">diagnostic</a>:</p>
<blockquote>
<p>Restart your Mac and then hold the <code>D</code> key when it starts up</p>
</blockquote>
<p>It came back clean except for the battery which was not at a 100%. This was fine given its age.</p>
<p>The diagnostic recommended unplugging all peripherals before running it. So I unplugged my keyboard, mouse, 4K monitor and headphones before proceeding.</p>
<p>The interesting thing was that, when I used the laptop by itself, I couldn’t cause the freeze by switching between <code>Sublime Text</code> windows. Wow! At least my laptop was not dying and I probably didn’t have to reinstall or upgrade MacOS versions. Yay?</p>
<h2 id="monitor">Monitor</h2>
<p>At this point it looked like the output to the 4K monitor maybe causing the issue. I did some investigation and some people had <a href="https://discussions.apple.com/thread/7370642">issues</a> around using <a href="https://discussions.apple.com/thread/6777878">4K monitors</a> with the Mac.</p>
<h2 id="nvram">NVRam</h2>
<p>One of the <a href="https://support.apple.com/en-au/HT204063">remedies</a> recommended with hardware issues was to reset the <code>NVRAM</code> and <code>PRAM</code>:</p>
<blockquote>
<p>NVRAM (nonvolatile random-access memory) is a small amount of memory that your Mac uses to store certain settings and access them quickly. PRAM (Parameter RAM) stores similar information, and the steps for resetting NVRAM and PRAM are the same.</p>
</blockquote>
<p>I noticed that <code>display resolution</code> was among the settings that were stored in NVRAM:</p>
<blockquote>
<p>Settings that can be stored in NVRAM include sound volume, display resolution, startup disk selection, time zone and recent kernel panic information. The settings stored in NVRAM depend on your Mac and the devices that you’re using with your Mac</p>
</blockquote>
<p>I followed the recommended instructions to reset the NVRam:</p>
<ul>
<li>Shutdown mac</li>
<li>Press the power button</li>
<li>Press and hold <code>ALT</code> + <code>CMD</code> + <code>P</code> + <code>R</code> until you hear the second chime sound</li>
</ul>
<p>And voila! All my issues were fixed!! Hooray!!</p>
<p>So there you have it. If you have similar issues NVRAM might be the culprit! Also try just using the laptop without any peripherals plugged in to see if any of them are causing the issue.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://apple.stackexchange.com/questions/348876/whats-causing-my-macbook-to-freeze-and-reset-keyboard-settings-when-i-bring-it">whats-causing-my-macbook-to-freeze-and-reset-keyboard-settings-when-i-bring-it</a></li>
<li><a href="https://support.apple.com/en-au/HT202731" class="uri">https://support.apple.com/en-au/HT202731</a></li>
<li><a href="https://www.ifixit.com/Answers/View/141693/Why+is+my+keyboard-trackpad+not+working" class="uri">https://www.ifixit.com/Answers/View/141693/Why+is+my+keyboard-trackpad+not+working</a></li>
<li><a href="https://discussions.apple.com/thread/251312151" class="uri">https://discussions.apple.com/thread/251312151</a></li>
<li><a href="https://support.apple.com/en-au/HT204063" class="uri">https://support.apple.com/en-au/HT204063</a></li>
<li><a href="https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac" class="uri">https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac</a></li>
<li><a href="https://discussions.apple.com/thread/7370642" class="uri">https://discussions.apple.com/thread/7370642</a></li>
<li><a href="https://discussions.apple.com/thread/6777878" class="uri">https://discussions.apple.com/thread/6777878</a></li>
</ul>]]></description>
    <pubDate>Fri, 23 Oct 2020 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2020-10-23-random-freezing-of-macbook-pro.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Contravariant functors are Weird</title>
    <link>http://blog.ssanj.net/posts/2020-06-13-contravariant-functors-are-weird.html</link>
    <description><![CDATA[<p>Just a note about nomenclature before we start; I’ll use “functor” to represent the <a href="https://bartoszmilewski.com/2015/01/20/functors/">categorical meaning</a> of the concept:</p>
<blockquote>
<p>A functor is a mapping between categories</p>
</blockquote>
<p>and <code>Functor</code> and <code>Contravariant</code> to specify the typeclass encodings of functors.</p>
<hr />
<p>Let’s begin!</p>
<p>Contravariant functors are odd aren’t they? Covariant functors (which are modelled by the <code>Functor</code> typeclass) are quite straightforward but <strong>contra</strong>variant functors as their name implies seem to be the complete opposite.</p>
<p>Before we get into what a contravariant functor is, it’s useful to look at the <code>Functor</code> <a href="https://wiki.haskell.org/Typeclassopedia">typeclass</a> which we know and love.</p>
<h1 id="functor">Functor</h1>
<p>A <code>Functor</code> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span>
<span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</code></pre></div>
<p>We often understand a <code>Functor</code> to be a “container” or a “producer” of some type, where the function supplied to <code>fmap</code> is applied to the elements that are “contained” or “produced” in some type constructor<a href="#type-constructor-1"><sup>1</sup></a> <code>f</code>.</p>
<p>A simple example would be the list (<code>[]</code>) type, that can represent zero or more values. Given a <code>[a]</code> we can turn it into a <code>[b]</code> when given a function <code>a -&gt; b</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">data</span> [] a <span class="fu">=</span> [] <span class="fu">|</span> a <span class="fu">:</span> [a]  <span class="co">-- an approximation of the [] data type</span>

<span class="kw">instance</span> <span class="dt">Functor</span> [] <span class="kw">where</span>
  fmap _ [] <span class="fu">=</span> []
  fmap f (x<span class="fu">:</span>xs) <span class="fu">=</span> f x <span class="fu">:</span> fmap f xs</code></pre></div>
<p>In the example below we convert a <code>[Int]</code> into a <code>[String]</code> given a function <code>Int -&gt; String</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Semigroup</span> ((&lt;&gt;))

<span class="ot">myInts ::</span> [<span class="dt">Int</span>]
myInts <span class="fu">=</span> [<span class="dv">1</span> <span class="fu">..</span> <span class="dv">5</span>]

<span class="ot">emptyInts ::</span> [<span class="dt">Int</span>]
emptyInts <span class="fu">=</span> []

<span class="ot">intToString ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
intToString n <span class="fu">=</span> (show n) <span class="fu">&lt;&gt;</span> <span class="st">&quot;!&quot;</span>

<span class="ot">myStrings ::</span> [<span class="dt">String</span>]
myStrings <span class="fu">=</span> fmap intToString myInts <span class="co">-- [&quot;1!&quot;,&quot;2!&quot;,&quot;3!&quot;,&quot;4!&quot;,&quot;5!&quot;]</span>

<span class="ot">myEmptyString ::</span> []
myEmptyString <span class="fu">=</span> fmap intToString emptyInts  <span class="co">-- []</span></code></pre></div>
<p>Another example would the <code>Maybe</code> data type, that represents a value that may or may not exist.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="fu">=</span> <span class="dt">Nothing</span> <span class="fu">|</span> <span class="dt">Just</span> a

<span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Maybe</span> <span class="kw">where</span>
  fmap _ <span class="dt">Nothing</span> <span class="fu">=</span> <span class="dt">Nothing</span>
  fmap f (<span class="dt">Just</span> x) <span class="fu">=</span> <span class="dt">Just</span> (f x)</code></pre></div>
<p>In the example below we convert a <code>Maybe Int</code> into a <code>Maybe String</code> given a function <code>Int -&gt; String</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Semigroup</span> ((&lt;&gt;))

<span class="ot">maybeInt ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span>
maybeInt <span class="fu">=</span> <span class="dt">Just</span> <span class="dv">10</span>

<span class="ot">notInt ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span>
notInt <span class="fu">=</span> <span class="dt">Nothing</span>

<span class="ot">intToString ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
intToString n <span class="fu">=</span> (show n) <span class="fu">&lt;&gt;</span> <span class="st">&quot;!&quot;</span>

<span class="ot">maybeString ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>
maybeString <span class="fu">=</span> fmap intToString maybeInt <span class="co">-- Just &quot;10!&quot;</span>

<span class="ot">notString ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>
notString <span class="fu">=</span> fmap intToString notInt <span class="co">-- Nothing</span></code></pre></div>
<p>The <code>Functor</code> typeclass has laws, that ensure <code>Functor</code> instances behave in a predictable way.</p>
<h2 id="laws">Laws</h2>
<h3 id="identity">Identity</h3>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">fmap id <span class="fu">==</span> id</code></pre></div>
<p>Essentially if you do nothing to the value of a <code>Functor</code>, you get the same <code>Functor</code> you started with.</p>
<h3 id="composition">Composition</h3>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">fmap (f <span class="fu">.</span> g) <span class="fu">==</span> fmap f <span class="fu">.</span> fmap g</code></pre></div>
<p>If you convert the result of a Functor by <code>fmap</code>ing with a function <code>g</code> and then <code>fmap</code>ing that result with a subsequent function <code>f</code>, it’s the same as composing functions <code>g</code> and <code>f</code> (<code>f . g</code>) and then <code>fmap</code>ing once.</p>
<div class="figure">
<img src="/images/contravariant/functor-laws-ct.png" alt="Functor Laws" />
<p class="caption">Functor Laws</p>
</div>
<h2 id="the-wrong-type-of-fmap">The Wrong Type of fmap</h2>
<p>Now let’s look at something a little different. Let’s create a data type to wrap a predicate of some sort. A predicate is something that will evaluate to a <code>Bool</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Predicate</span> a <span class="fu">=</span> <span class="dt">Predicate</span> {<span class="ot"> getPredicate ::</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span> }</code></pre></div>
<p>An example of a Predicate is <code>greaterThanTen</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">greaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
greaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>that tests whether a number is greater than ten.</p>
<p>We can run with it <code>getPredicate</code> and an <code>Int</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">getPredicate greateThanTen <span class="dv">5</span>  <span class="co">-- False</span>
getPredicate greateThanTen <span class="dv">11</span> <span class="co">-- True</span></code></pre></div>
<p>It could be useful to define a <code>Functor</code> instance for Predicate - say if we have a <code>Predicate Int</code> and we want to convert it into a <code>Predicate String</code> when we have a <code>Int -&gt; String</code> function. Let’s try and implement that:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Predicate</span> <span class="kw">where</span>
  <span class="co">-- fmap (a -&gt; b) -&gt; Predicate a -&gt; Predicate b</span>
  fmap f (<span class="dt">Predicate</span> p) <span class="fu">=</span> <span class="dt">Predicate</span> (\b <span class="ot">-&gt;</span> undefined)
  fmap f (<span class="dt">Predicate</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>)) <span class="fu">=</span> <span class="dt">Predicate</span> (\b <span class="ot">-&gt;</span> undefined)  <span class="co">-- expanding p</span>
  fmap (a <span class="ot">-&gt;</span> b) (<span class="dt">Predicate</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>)) <span class="fu">=</span> <span class="dt">Predicate</span> (\b <span class="ot">-&gt;</span> undefined) <span class="co">-- expanding f</span></code></pre></div>
<p>Now we’ve run into a small problem:</p>
<blockquote>
<p>How do we compose (a -&gt; Bool) and (a -&gt; b) to give us a (b -&gt; Bool) ?</p>
</blockquote>
<p>We are given a <code>b</code> but we don’t have access to any functions that actually use a <code>b</code>.</p>
<p>The problem is that we can’t. It’s because of something called “polarity” of the type variable <code>a</code>. No <code>Functor</code> instance for you <code>Predicate</code>.</p>
<div class="figure">
<img src="/images/contravariant/sad-panda.png" alt="sad-panda by Nick Bluth" />
<p class="caption">sad-panda by <a href="https://thenounproject.com/nickbluth/collection/pandas">Nick Bluth</a></p>
</div>
<h1 id="polarity">Polarity</h1>
<p>Polarity is a way of representing <a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">variance</a> using the position of type variables. Let’s take a simple function <code>a -&gt; b</code> as an example.</p>
<div class="figure">
<img src="/images/contravariant/function-polarity.png" alt="Function Polarity" />
<p class="caption">Function Polarity</p>
</div>
<p>If a type variable is in <strong>input</strong> position like <code>a</code> it is given a <strong>negative</strong> polarity. If it is in an <strong>output</strong> position like <code>b</code> then it is given a <strong>positive</strong> polarity.</p>
<p>These polarities map directly to variant types.</p>
<table>
<thead>
<tr class="header">
<th align="left">Polarity</th>
<th align="left">Variance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Positive</td>
<td align="left">Covariant</td>
</tr>
<tr class="even">
<td align="left">Negative</td>
<td align="left">Contravariant</td>
</tr>
<tr class="odd">
<td align="left">Both</td>
<td align="left">Invariant</td>
</tr>
</tbody>
</table>
<p>What this means is that <code>Functor</code>s (which are actually covariant functors) require a type constructor in a covariant position in order for you to define a <code>Functor</code> instance for that type.</p>
<p>Let’s look at a type that we know has a <code>Functor</code> instance like <code>Maybe</code>:</p>
<div class="figure">
<img src="/images/contravariant/maybe-polarity.png" alt="Polarity of the Maybe data type" />
<p class="caption">Polarity of the Maybe data type</p>
</div>
<p>We can see that the type variable <code>a</code> occurs in a covariant (or output) position within the definition of the <code>Just</code> constructor.</p>
<p>Now let’s look at the definition of <code>Predicate</code> data type:</p>
<div class="figure">
<img src="/images/contravariant/predicate-polarity.png" alt="Polarity of the Predicate data type" />
<p class="caption">Polarity of the Predicate data type</p>
</div>
<p>We can see that the type variable <code>a</code> occurs in a contravariant (or input) position. This indicates that we can’t create a (covariant) <code>Functor</code> instance for this data type.</p>
<p>But we want to map things! What do we do?</p>
<h1 id="contravariant">Contravariant</h1>
<p>Welcome the <code>Contravariant</code> typeclass to the stage! It’s defined as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Contravariant</span> f <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a</code></pre></div>
<p>Snazzy! <code>Contravariant</code> also takes some kind of type constructor <code>f</code> just like <code>Functor</code> but it has this weirdly named <code>contramap</code> function instead of <code>fmap</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">     fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b <span class="co">-- Functor</span>
<span class="ot">contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a <span class="co">-- Contravariant</span>
                         <span class="fu">^^^</span></code></pre></div>
<p>If we read <code>fmap</code> as:</p>
<blockquote>
<p>If you have an <code>a</code> in some context and a function that takes that <code>a</code> and converts it to a <code>b</code>, I can give you a context with a <code>b</code> in it.</p>
</blockquote>
<p>we can then read <code>contramap</code> as:</p>
<blockquote>
<p>If you have a context that needs an <code>a</code> and a function that can convert <code>b</code>s to <code>a</code>s, I can give you a context that needs <code>b</code>s.</p>
</blockquote>
<p>But that probably doesn’t make much sense. So let’s try and look at this in terms of our non-<code>Functor</code>: <code>Predicate</code>. <code>Predicate</code> has a <strong>need</strong> for an <code>a</code>, which it then uses to tell if something about that <code>a</code> is True or False.</p>
<p>Let’s try and write a <code>Contravariant</code> instance for <code>Predicate</code> given that we know that the type <code>a</code> in <code>Predicate</code> occurs in an input position.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Predicate</span> <span class="kw">where</span>
  <span class="co">-- contramp (a -&gt; b) -&gt; f b -&gt; f a</span>
  contramap (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Predicate</span> b <span class="ot">-&gt;</span> <span class="dt">Predicate</span> a <span class="co">-- substituting for `f` for Predicate</span>
  contramap aToB (<span class="dt">Predicate</span> bToBool) <span class="fu">=</span> <span class="dt">Predicate</span> (\a <span class="ot">-&gt;</span> undefined)</code></pre></div>
<p>Given that we have a function <code>a -&gt; b</code> and essentially a function of type <code>b -&gt; Bool</code> (wrapped inside a <code>Predicate b</code>), we can if given an <code>a</code>, convert it to a <code>b</code> using <code>aToB</code> and then give that <code>b</code> to <code>bToBool</code> to give us a <code>Bool</code>.</p>
<p>Here’s a slightly long-form implementation of the <code>Contravariant</code> instance for <code>Predicate</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Predicate</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Predicate</span> b <span class="ot">-&gt;</span> <span class="dt">Predicate</span> a
  contramap aToB (<span class="dt">Predicate</span> bToBool) <span class="fu">=</span>
    <span class="dt">Predicate</span> <span class="fu">$</span> \a <span class="ot">-&gt;</span>
      <span class="kw">let</span> b    <span class="fu">=</span> aToB a
          bool <span class="fu">=</span> bToBool b
      <span class="kw">in</span> bool</code></pre></div>
<div class="figure">
<img src="/images/contravariant/contramap-predicate.png" alt="contramap on Predicate" />
<p class="caption">contramap on Predicate</p>
</div>
<p>or more succinctly:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Predicate</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Predicate</span> b <span class="ot">-&gt;</span> <span class="dt">Predicate</span> a
  contramap f (<span class="dt">Predicate</span> b) <span class="fu">=</span> <span class="dt">Predicate</span> <span class="fu">$</span> b <span class="fu">.</span> f</code></pre></div>
<p>We can see from the definition of <code>Predicate a</code> that all we are doing is running the supplied function <code>f</code> <strong>before</strong> the function within <code>Predicate b</code>. The reason we do that is to adapt a new input type to match an existing input type to gain some functionality.</p>
<p>If we revisit the (covariant) <code>Functor</code> instance for <code>Maybe</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Maybe</span> <span class="kw">where</span>
  fmap _ <span class="dt">Nothing</span> <span class="fu">=</span> <span class="dt">Nothing</span>
  fmap aToB (<span class="dt">Just</span> a) <span class="fu">=</span> <span class="dt">Just</span> (aToB a)</code></pre></div>
<p>we can see that the function <code>aToB</code> is run <strong>after</strong> we have a value of <code>a</code>. We do that to convert a result of some type to another type.</p>
<div class="figure">
<img src="/images/contravariant/fmap-maybe.png" alt="fmap on Maybe" />
<p class="caption">fmap on Maybe</p>
</div>
<p>These are the essential differences between covariant and contravariant functors:</p>
<table>
<thead>
<tr class="header">
<th align="left">Typeclass</th>
<th align="left">Function runs</th>
<th align="left">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Functor</td>
<td align="left">after</td>
<td align="left">Convert results</td>
</tr>
<tr class="even">
<td align="left">Contravariant</td>
<td align="left">before</td>
<td align="left">Adapt inputs</td>
</tr>
</tbody>
</table>
<p>Now that we know the essential difference between <code>Functor</code> and <code>Contravariant</code>, let’s look at how we can use <code>contramap</code> with our <code>Predicate</code> class.</p>
<p>Given that we already have a <code>Predicate</code> that determines whether a number is greater than ten:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">numGreaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
numGreaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>say we want to write another <code>Predicate</code> that verifies that the length of String is greater than ten characters.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">strLengthGreaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">String</span>
strLengthGreaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\s <span class="ot">-&gt;</span> (length s) <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>Sure, that’s pretty contrived but bear with me. Let’s also say we have a <code>Person</code> data type and we want to know if a person’s name is over ten characters long - if so we consider that to be a long name.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span> {<span class="ot"> personName ::</span> <span class="dt">String</span>,<span class="ot"> personAge ::</span> <span class="dt">Int</span> }

<span class="ot">personLongName ::</span> <span class="dt">Predicate</span> <span class="dt">Person</span>
personLongName <span class="fu">=</span> <span class="dt">Predicate</span> (\p <span class="ot">-&gt;</span> (length <span class="fu">.</span> personName <span class="fu">$</span> p) <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>And we can run these <code>Predicate</code>s as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">getPredicate numGreaterThanTen <span class="dv">5</span> <span class="co">-- False</span>
getPredicate numGreaterThanTen <span class="dv">20</span> <span class="co">-- True</span>

getPredicate strLengthGreaterThanTen <span class="st">&quot;hello&quot;</span>       <span class="co">-- False</span>
getPredicate strLengthGreaterThanTen <span class="st">&quot;hello world&quot;</span> <span class="co">-- True</span>

getPredicate personLongName <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;John&quot;</span> <span class="dv">30</span>        <span class="co">-- False</span>
getPredicate personLongName <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;Bartholomew&quot;</span> <span class="dv">30</span> <span class="co">-- True</span></code></pre></div>
<p>And this is fine, but there’s some duplication across each of the <code>Predicate</code>s - namely the part where we compare a number to ten:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">(\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)  <span class="co">-- Int</span>
(\s <span class="ot">-&gt;</span> (length s) <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="co">-- String</span>
(\p <span class="ot">-&gt;</span> (length <span class="fu">.</span> personName <span class="fu">$</span> p) <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="co">-- Person</span></code></pre></div>
<p>It would be nice if we didn’t have to repeat ourselves.</p>
<p>If we look at the differences between <code>numGreaterThanTen</code>, <code>strLengthGreaterThanTen</code> and <code>personLongName</code> we can see that the only difference is that one works on an <code>Int</code> and the others work on <code>String</code> and <code>Person</code> respectively. <code>strLengthGreaterThanTen</code> and <code>personLongName</code> each convert their input types to an <code>Int</code> and then do the same comparison:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="dt">Predicate</span> (\(<span class="ot">n ::</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span>
  <span class="kw">let</span> num <span class="fu">=</span> id n
  <span class="kw">in</span> num <span class="fu">&gt;</span> <span class="dv">10</span> <span class="co">-- (1)</span>
) <span class="co">-- numGreaterThanTen</span>


<span class="dt">Predicate</span> (\(<span class="ot">s ::</span> <span class="dt">String</span>) <span class="ot">-&gt;</span>
  <span class="kw">let</span> num <span class="fu">=</span> length s
  <span class="kw">in</span> num <span class="fu">&gt;</span> <span class="dv">10</span> <span class="co">-- (1)</span>
) <span class="co">-- strLengthGreaterThanTen</span>

<span class="dt">Predicate</span> (\(<span class="ot">p ::</span> <span class="dt">Person</span>) <span class="ot">-&gt;</span>
  <span class="kw">let</span> name <span class="fu">=</span> personName p
      num  <span class="fu">=</span> length name
  <span class="kw">in</span> num <span class="fu">&gt;</span> <span class="dv">10</span> <span class="co">-- (1)</span>
) <span class="co">-- personLongName</span></code></pre></div>
<p>The above expansion of the functions demonstrates that even though the <code>Predicate</code>s themselves have different input types, at the end they are all converted to a number which is compared against the number ten. This is tagged with <code>(1)</code> in the above example.</p>
<p>We can also see that the only changes between the <code>Predicate</code>s is the conversion from one type to another <strong>before</strong> running our comparison function <code>(1)</code>. This is our clue that we can use <code>contramap</code> here to reuse some functionality.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">numGreaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
numGreaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)

<span class="ot">strLengthGreaterThanTen2 ::</span> <span class="dt">Predicate</span> <span class="dt">String</span>
strLengthGreaterThanTen2 <span class="fu">=</span> contramap length numGreaterThanTen <span class="co">-- convert the String to an Int, then pass it to numGreaterThanTen</span>

<span class="ot">personLongName2 ::</span> <span class="dt">Predicate</span> <span class="dt">Person</span>
personLongName2 <span class="fu">=</span> contramap (length <span class="fu">.</span> personName) numGreaterThanTen <span class="co">-- convert the Person to an Int, then pass it to numGreaterThanTen</span></code></pre></div>
<p>We get the same results as before:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">getPredicate strLengthGreaterThanTen2 <span class="st">&quot;hello&quot;</span>       <span class="co">-- False</span>
getPredicate strLengthGreaterThanTen2 <span class="st">&quot;hello world&quot;</span> <span class="co">-- True</span>

getPredicate personLongName2 <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;John&quot;</span> <span class="dv">30</span>        <span class="co">-- False</span>
getPredicate personLongName2 <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;Bartholomew&quot;</span> <span class="dv">30</span> <span class="co">-- True</span></code></pre></div>
<p>Now we have rewritten <code>strLengthGreaterThanTen</code> and <code>personLongName</code> in terms of <code>numGreaterThanTen</code> by just running a function before it to convert the types. This is a simple example of a Contravariant Functor where we can reuse some existing functionality for a given type if we can convert from our other types to that type through some mapping function.</p>
<p>We can also go a little further and reuse even more:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">personLongName3 ::</span> <span class="dt">Predicate</span> <span class="dt">Person</span>
personLongName3 <span class="fu">=</span> contramap personName strLengthGreaterThanTen <span class="co">-- convert the Person to a String, then pass it to strLengthGreaterThanTen</span></code></pre></div>
<h2 id="laws-1">Laws</h2>
<p>Just like <code>Functor</code> has laws, <code>Contravariant</code> also has laws. This is awesome - because laws make our lives easier.</p>
<h3 id="identity-1">Identity</h3>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">contramap id <span class="fu">==</span> id</code></pre></div>
<p>Essentially if you do not change the value of a <code>Contravariant</code> functor, you get the same <code>Contravariant</code> functor you started with.</p>
<h3 id="composition-1">Composition</h3>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">contramap f <span class="fu">.</span> contramap g <span class="fu">=</span> contramap (g <span class="fu">.</span> f)</code></pre></div>
<p>If you convert the input to some <code>Contravariant</code> functor by <code>contramap</code>ing with function <code>g</code> and then convert its input to some other type by <code>contramap</code>ing again with a function <code>f</code>, it’s the same as composing the functions <code>f</code> and <code>g</code> (<code>g . f</code>) and then <code>contramap</code>ing once. Notice the order of composition is switched as opposed to when we looked at the <code>Functor</code> laws.</p>
<div class="figure">
<img src="/images/contravariant/contravariant-laws-ct.png" alt="Contravariant Laws" />
<p class="caption">Contravariant Laws</p>
</div>
<p>Let’s take <code>Predicate</code> as an example and try out the identity law. The <code>Contravariant</code> instance for <code>Predicate</code> is defined as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"> <span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Predicate</span> <span class="kw">where</span>
<span class="ot">   contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a
   contramap f (<span class="dt">Predicate</span> p) <span class="fu">=</span> <span class="dt">Predicate</span> (p <span class="fu">.</span> f)</code></pre></div>
<p>Given that we have a <code>Predicate Int</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">numGreaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
numGreaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>Using <code>contramap id</code> on the above:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- identity law</span>
contramap id numGreaterThanTen <span class="fu">==</span> numGreaterThanTen

<span class="co">-- lhs</span>
<span class="dt">Predicate</span> (p <span class="fu">.</span> f) <span class="co">-- applying contramap</span>
<span class="dt">Predicate</span> (p <span class="fu">.</span> id) <span class="co">-- expanding f</span>
<span class="dt">Predicate</span> (p) <span class="co">-- applying f</span>
<span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="co">-- expanding p</span>

<span class="co">-- rhs</span>
numGreaterThanTen
<span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="co">-- expanding numGreaterThanTen</span>

<span class="co">-- equality</span>
lhs                      <span class="fu">==</span> rhs
<span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="fu">==</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)</code></pre></div>
<p>Once again using <code>Predicate</code> as an example, let’s explore the compositional law of <code>Contravariant</code>.</p>
<p>Given that we have the following <code>Predicate</code>s:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">numGreaterThanTen ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
numGreaterThanTen <span class="fu">=</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>)

length<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="ot">personName ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre></div>
<p>Using <code>numGreaterThanTen</code>, with <code>length</code> and <code>personName</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- composition law</span>
contramap personName <span class="fu">.</span> contramap length <span class="fu">$</span> numGreaterThanTen <span class="fu">=</span> contramap (length <span class="fu">.</span> personName) numGreaterThanTen


<span class="co">-- lhs</span>
contramap personName <span class="fu">.</span> contramap length <span class="fu">$</span> numGreaterThanTen
contramap personName <span class="fu">.</span> contramap length <span class="fu">$</span> <span class="dt">Predicate</span> (\n <span class="ot">-&gt;</span> n <span class="fu">&gt;</span> <span class="dv">10</span>) <span class="co">-- expanding numGreaterThanTen</span>
contramap personName (<span class="dt">Predicate</span> <span class="fu">$</span> \str <span class="ot">-&gt;</span>
  <span class="kw">let</span> num  <span class="fu">=</span> length str
     bool  <span class="fu">=</span> num <span class="fu">&gt;</span> <span class="dv">10</span>
  <span class="kw">in</span> bool
) <span class="co">-- applying length</span>
<span class="dt">Predicate</span> <span class="fu">$</span> \person <span class="ot">-&gt;</span>
  <span class="kw">let</span> str <span class="fu">=</span> personName person
      num <span class="fu">=</span> length str
     bool <span class="fu">=</span> num <span class="fu">&gt;</span> <span class="dv">10</span>
  <span class="kw">in</span> bool
) <span class="co">-- applying personName</span>
<span class="ot">=&gt;</span> <span class="dt">Predicate</span> <span class="dt">Person</span>

<span class="co">-- rhs</span>
contramap (length <span class="fu">.</span> personName) numGreaterThanTen
contramap (\person <span class="ot">-&gt;</span>
    <span class="kw">let</span> str <span class="fu">=</span> personName person
        num <span class="fu">=</span> length str
    <span class="kw">in</span> num
) numGreaterThanTen <span class="co">-- expanding length . personName</span>
<span class="dt">Predicate</span> (\person <span class="ot">-&gt;</span>
   <span class="kw">let</span> str  <span class="fu">=</span> personName person
       num  <span class="fu">=</span> length str
       bool <span class="fu">=</span> num <span class="fu">&gt;</span> <span class="dv">10</span> <span class="co">-- expanding numGreaterThanTen</span>
   <span class="kw">in</span> bool
)
<span class="ot">=&gt;</span> <span class="dt">Predicate</span> <span class="dt">Person</span>

<span class="co">-- equality</span>
lhs <span class="fu">==</span> rhs

<span class="dt">Predicate</span> (\person <span class="ot">-&gt;</span>
  <span class="kw">let</span> str  <span class="fu">=</span> personName person
      num  <span class="fu">=</span> length str
      bool <span class="fu">=</span> num <span class="fu">&gt;</span> <span class="dv">10</span>
  <span class="kw">in</span> bool

) <span class="fu">==</span>
<span class="dt">Predicate</span> (\person <span class="ot">-&gt;</span>
   <span class="kw">let</span> str  <span class="fu">=</span> personName person
       num  <span class="fu">=</span> length str
       bool <span class="fu">=</span> num <span class="fu">&gt;</span> <span class="dv">10</span>
   <span class="kw">in</span> bool
)</code></pre></div>
<h2 id="combinators">Combinators</h2>
<p>There are some built-in combinators that go with <code>Contravariant</code>.</p>
<h3 id="infix-contramap">Infix contramap</h3>
<p>Similar to the <code>contramap</code> function the following functions can be used infix:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- infixl 4</span>
<span class="ot">(&gt;$&lt;)        ::</span> <span class="dt">Contravariant</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a
<span class="co">-- contramap :: Contravariant f =&gt; (a -&gt; b) -&gt; f b -&gt; f a</span></code></pre></div>
<p>A simple example of it in use:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">p5 ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
p5 <span class="fu">=</span> <span class="dt">Predicate</span> <span class="fu">$</span> \n <span class="ot">-&gt;</span> n <span class="fu">==</span> <span class="dv">5</span>

<span class="ot">pLength5 ::</span> <span class="dt">Predicate</span> [a]
pLength5 <span class="fu">=</span> length <span class="fu">&gt;$&lt;</span> p5

getPredicate pLength5 <span class="st">&quot;hello&quot;</span>
<span class="co">-- True</span>

getPredicate pLength5 <span class="st">&quot;hello world&quot;</span>
<span class="co">-- False</span></code></pre></div>
<p>Same as <code>contramap</code> but with the parameters switched:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- infixl 4</span>
<span class="ot">(&gt;$$&lt;)       ::</span> <span class="dt">Contravariant</span> f <span class="ot">=&gt;</span> f b      <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a
<span class="co">-- contramap :: Contravariant f =&gt; (a -&gt; b) -&gt; f b      -&gt; f a</span></code></pre></div>
<h3 id="infix-const">Infix const</h3>
<p>These combinators take in a constant input and completely ignore the input supplied when running the <code>Contravariant</code> instance.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- infixl 4</span>
<span class="ot">(&gt;$) ::</span> b <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a</code></pre></div>
<p>It has a default implementation of:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">(&gt;$) ::</span> b <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a
(<span class="fu">&gt;$</span>) <span class="fu">=</span> contramap <span class="fu">.</span> const</code></pre></div>
<p>Let’s see how that works:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- const when given two values returns the first value ignoring the second</span>
const<span class="ot"> ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a
const x _ <span class="fu">=</span>  x

<span class="ot">contramap ::</span> <span class="dt">Contravariant</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a

<span class="ot">(&gt;$) ::</span> b <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a
(<span class="fu">&gt;$</span>)      <span class="fu">=</span> contramap <span class="fu">.</span> const
(<span class="fu">&gt;$</span>) b    <span class="fu">=</span> contramap (const b)   <span class="co">-- simplifying with b</span>
(<span class="fu">&gt;$</span>) b    <span class="fu">=</span> contramap (a <span class="ot">-&gt;</span> b)    <span class="co">-- applying `const b`</span>
(<span class="fu">&gt;$</span>) b fb <span class="fu">=</span> contramap (a <span class="ot">-&gt;</span> b) fb <span class="co">-- simplifying with fb</span>
(<span class="fu">&gt;$</span>) b fb <span class="fu">=</span> fa                    <span class="co">-- simplifying `contramap (a -&gt; b) fb`</span></code></pre></div>
<p>A simple example of it in use:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">p5 ::</span> <span class="dt">Predicate</span> <span class="dt">Int</span>
p5 <span class="fu">=</span> <span class="dt">Predicate</span> <span class="fu">$</span> \n <span class="ot">-&gt;</span> n <span class="fu">==</span> <span class="dv">5</span>

<span class="ot">pLength5 ::</span> <span class="dt">Predicate</span> [a]
pLength5 <span class="fu">=</span> contramap length p5

getPredicate pLength5 <span class="st">&quot;hello&quot;</span>
<span class="co">-- True</span>

getPredicate pLength5 <span class="st">&quot;hello world&quot;</span>
<span class="co">-- False</span>

<span class="ot">pAlwaysFalse ::</span> <span class="dt">Predicate</span> [a]
pAlwaysFalse <span class="fu">=</span> <span class="dv">10</span> <span class="fu">&gt;$</span> p5

getPredicate pAlwaysFalse <span class="st">&quot;hello&quot;</span>
<span class="co">-- False (because 10 /= 5)</span>

getPredicate pAlwaysFalse <span class="st">&quot;hello world&quot;</span>
<span class="co">-- False</span></code></pre></div>
<p>Same as above but with the parameters switched:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- infixl 4</span>
<span class="ot">($&lt;) ::</span> <span class="dt">Contravariant</span> f <span class="ot">=&gt;</span> f b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> f a</code></pre></div>
<h2 id="logaction">LogAction</h2>
<p>Let’s look at another example of <code>Contravariant</code>. Imagine you have the following data type that encapsulates performing some side effect on some polymorphic type <code>a</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">LogAction</span> a <span class="fu">=</span> <span class="dt">LogAction</span> {<span class="ot"> unlog ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> () }</code></pre></div>
<p>For our purposes we can assume that we are going to use this to log some value either to the console or to a file or some other medium. This example has been adapted from the <a href="https://github.com/kowainik/co-log/blob/master/co-log-core/src/Colog/Core/Action.hs#L105">LogAction</a> class of the <a href="https://kowainik.github.io/posts/2018-09-25-co-log">CO-LOG</a> logging library. Definitely check out the library for real-world uses of <code>Contravariant</code> and friends.</p>
<p>As we can see the type variable <code>a</code> occurs in input position so we should be able to define a <code>Contravariant</code> instance for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">LogAction</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">LogAction</span> a <span class="ot">-&gt;</span> <span class="dt">LogAction</span> b
  contramap bToA logActionA <span class="fu">=</span> <span class="dt">LogAction</span> <span class="fu">$</span> \b <span class="ot">-&gt;</span> unlog logActionA (bToA b)</code></pre></div>
<p>There should be no surprises here; we run the supplied function <code>bToA</code> on the input <em>before</em> passing it to the log action.</p>
<p>Here’s a slightly simplified implementation of the above:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">LogAction</span> <span class="kw">where</span>
  contramap f logActionA <span class="fu">=</span> <span class="dt">LogAction</span> <span class="fu">$</span> unlog logActionA <span class="fu">.</span> f</code></pre></div>
<p>So how can we use <code>LogAction</code>? Let’s define a couple of implementations:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">putStrLog ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
putStrLog <span class="fu">=</span> <span class="dt">LogAction</span> putStr

<span class="ot">putStrLnLog ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
putStrLnLog <span class="fu">=</span> <span class="dt">LogAction</span> putStrLn</code></pre></div>
<p><code>putStrLog</code> and <code>putStrLn</code> are just wrappers around <code>putStr</code> and <code>putStrLn</code> from <code>base</code>. Both log a String to the console, the difference being that <code>putStrLn</code> sends a newline character to the console after each call.</p>
<p>Here’s how we’d use <code>putStrLnLog</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">unlog putStrLnLog <span class="st">&quot;Hello World&quot;</span>
<span class="co">-- Hello World</span></code></pre></div>
<p>Remember that <code>LogAction</code> <em>needs</em> an <code>a</code> which in this case is a <code>String</code>.</p>
<p>Now because we have the power of contravariance, we should be able to log out other types if we can convert them to a <code>String</code>.</p>
<p>Here are some examples:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- simple function around contramap for LogAction</span>
<span class="ot">putStringlyLnLog ::</span> (a <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">LogAction</span> a
putStringlyLnLog f <span class="fu">=</span> contramap f putStrLnLog

<span class="co">-- Now we can log Ints</span>
<span class="ot">putStrLnInt ::</span> <span class="dt">LogAction</span> <span class="dt">Int</span>
putStrLnInt <span class="fu">=</span> putStringlyLnLog show

<span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> age ::</span> <span class="dt">Int</span> }

<span class="co">-- custom String representation of Person</span>
<span class="ot">showPerson ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
showPerson (<span class="dt">Person</span> name age) <span class="fu">=</span> <span class="st">&quot;Person(name:&quot;</span> <span class="fu">&lt;&gt;</span> name <span class="fu">&lt;&gt;</span> <span class="st">&quot;, age: &quot;</span> <span class="fu">&lt;&gt;</span> (show age) <span class="fu">&lt;&gt;</span> <span class="st">&quot;)&quot;</span>

<span class="co">-- Now we can log people</span>
<span class="ot">putStrLnPerson ::</span> <span class="dt">LogAction</span> <span class="dt">Person</span>
putStrLnPerson <span class="fu">=</span> putStringlyLnLog showPerson

<span class="co">-- custom String representation of Person that only displays age</span>
<span class="ot">showPersonAge ::</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
showPersonAge person <span class="fu">=</span>  <span class="st">&quot;age: &quot;</span> <span class="fu">&lt;&gt;</span> (show <span class="fu">$</span> age person)

<span class="co">-- Additional Person LogAction which outputs only age</span>
<span class="ot">putStrLnPersonAge ::</span> <span class="dt">LogAction</span> <span class="dt">Person</span>
putStrLnPersonAge <span class="fu">=</span> putStringlyLnLog showPersonAge</code></pre></div>
<p>Here’s how we can run the above:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">unlog putStrLnInt <span class="dv">42</span>
<span class="co">-- 42</span>

unlog putStrLnPerson <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;Neelix&quot;</span> <span class="dv">60</span>
<span class="co">-- Person(name:Neelix, age: 60)</span>

unlog putStrLnPersonAge <span class="fu">$</span> <span class="dt">Person</span> <span class="st">&quot;Tuvok&quot;</span> <span class="dv">240</span>
<span class="co">-- age: 240</span></code></pre></div>
<p>We can see that <code>LogAction</code> for <code>Person</code>, <em>needs</em> a <code>Person</code> instance as input to perform the log action.</p>
<p>Something that might not be obvious is that we can also adapt an input type to itself. It’s not necessary to always convert from one type to another.</p>
<p>Here are some example functions which we can use with <code>contramap</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">hello ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
hello <span class="fu">=</span> (<span class="st">&quot;Hello&quot;</span> <span class="fu">&lt;&gt;</span>)

<span class="ot">there ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
there <span class="fu">=</span> (<span class="st">&quot;there&quot;</span> <span class="fu">&lt;&gt;</span>)

<span class="ot">doctor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
doctor <span class="fu">=</span> (<span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span>)

<span class="ot">space ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
space <span class="fu">=</span> (<span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span>)</code></pre></div>
<p>Here’s how we compose the above functions into a <code>LogAction</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">putStrLnGreeting ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
putStrLnGreeting <span class="fu">=</span> contramap space <span class="fu">.</span> contramap doctor <span class="fu">.</span> contramap space <span class="fu">.</span> contramap there <span class="fu">.</span> contramap space <span class="fu">.</span> contramap hello <span class="fu">$</span> putStrLnLog</code></pre></div>
<p>Whoa! That’s even hard to read. What does it do? Remember from the second law of <code>Contravariant</code> that:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">contramap f <span class="fu">.</span> contramap g <span class="fu">=</span> contramap (g <span class="fu">.</span> f)</code></pre></div>
<p>Given that, we can rewrite our highly compositional <code>LogAction</code> like so:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">putStrLnGreeting ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
putStrLnGreeting <span class="fu">=</span> contramap  (hello <span class="fu">.</span> space <span class="fu">.</span> there <span class="fu">.</span> space <span class="fu">.</span> doctor <span class="fu">.</span> space) <span class="fu">$</span> putStrLnLog</code></pre></div>
<p>At least this is somewhat more readable - but the great thing is that knowing the laws helped us make our code more legible. But still - what does this do?</p>
<p>The trick is to remember that <code>Contravaraint</code> composition works in <strong>reverse</strong> to normal composition:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">contramap f <span class="fu">.</span> contramap g <span class="fu">=</span> contramap (g <span class="fu">.</span> f) <span class="co">-- notice the (g . f) instead of (f. g)</span></code></pre></div>
<p>This is how <code>putStrLnGreeting</code> is evaluated:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">putStrLnGreeting ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
putStrLnGreeting <span class="fu">=</span> contramap  (hello <span class="fu">.</span> space <span class="fu">.</span> there <span class="fu">.</span> space <span class="fu">.</span> doctor <span class="fu">.</span> space) <span class="fu">$</span> putStrLnLog

unlog putStrLnGreeting <span class="st">&quot;Switzer&quot;</span> <span class="co">-- run the logger with &quot;Switzer&quot; as the input</span>

<span class="co">-- the input is going to go through this sequence of functions:</span>
<span class="co">-- (hello . space . there . space . doctor . space)</span>

<span class="co">-- applying space</span>
<span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- applying doctor</span>
<span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- applying space</span>
<span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- applying there</span>
<span class="st">&quot;there&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- applying space</span>
<span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;there&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- applying hello</span>
<span class="st">&quot;Hello&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;there&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot;Doctor&quot;</span> <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Switzer</span>
<span class="co">-- final output:</span>
<span class="co">-- Hello there Doctor Switzer</span></code></pre></div>
<p>Let’s look at one more <code>LogAction</code> which might be interesting; One where we ignore the input and return some constant output:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">override ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a
override value <span class="fu">=</span> const value</code></pre></div>
<p>A we mentioned previously, <code>const</code> is defined as <code>a -&gt; b -&gt; a</code>, where it accepts two inputs but returns the value of the first input (ignoring the second input).</p>
<p>Here’s how we use it with <code>LogAction</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">qPutStrLn ::</span><span class="dt">LogAction</span> <span class="dt">String</span>
qPutStrLn <span class="fu">=</span> contramap (override <span class="st">&quot;This is Q!!&quot;</span>) putStrLnLog

<span class="co">-- run it</span>
unlog qPutStrLn <span class="st">&quot;Picard J L&quot;</span>
<span class="co">-- This is Q!!</span></code></pre></div>
<p>Now if our memory serves, we should be able to do the same with <code>&gt;$</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">qPutStrLnOp ::</span> <span class="dt">LogAction</span> <span class="dt">String</span>
qPutStrLnOp <span class="fu">=</span> <span class="st">&quot;This is Q!!&quot;</span> <span class="fu">&gt;$</span> putStrLnLog

<span class="co">-- run it</span>
unlog qPutStrLnOp <span class="st">&quot;Sisko B L&quot;</span>
<span class="co">-- This is Q!!</span></code></pre></div>
<h2 id="equality-and-ordering">Equality and Ordering</h2>
<p>Now let’s look at two somewhat related concepts: equality and ordering</p>
<h3 id="equivalence">Equivalence</h3>
<p>Let’s imagine that we have a datatype called <code>Equivalence</code> that wraps an equality expression:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Equivalence</span> a <span class="fu">=</span> <span class="dt">Equivalence</span> {<span class="ot"> getEquivalence ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span> }</code></pre></div>
<p>Given two values of type <code>a</code> the <code>getEquivalence</code> function will return a <code>Bool</code> indicating if they are equal or not.</p>
<p>Now we can see that both <code>a</code> type variables are in input position. Let’s define a <code>Contravariant</code> instance for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Equivalence</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Equivalence</span> b <span class="ot">-&gt;</span> <span class="dt">Equivalence</span> a
  contramap aToB (<span class="dt">Equivalence</span> eqB1B2) <span class="fu">=</span> <span class="dt">Equivalence</span> <span class="fu">$</span> \a1 a2 <span class="ot">-&gt;</span>
    <span class="kw">let</span> b1 <span class="fu">=</span> aToB a1
        b2 <span class="fu">=</span> aToB a2
    <span class="kw">in</span> eqB1B2 b1 b2</code></pre></div>
<p>Something important to note is that the function we supply to <code>contramap</code> (<code>a -&gt; b</code>) is run on twice - once on each of the input parameters (<code>b</code>).</p>
<div class="figure">
<img src="/images/contravariant/equivalence-polarity.png" alt="Polarity of Equivalence" />
<p class="caption">Polarity of Equivalence</p>
</div>
<p>Given an <code>Equivalence</code> for <code>Int</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">intEq ::</span> <span class="dt">Equivalence</span> <span class="dt">Int</span>
intEq <span class="fu">=</span> <span class="dt">Equivalence</span> (<span class="fu">==</span>)</code></pre></div>
<p>We can run it as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">getEquivalence intEq <span class="dv">1</span> <span class="dv">2</span>
<span class="co">-- False</span>

getEquivalence intEq <span class="dv">1</span> <span class="dv">1</span>
<span class="co">-- True</span></code></pre></div>
<p>We can calculate the equivalence of other types using <code>contramap</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">strLengthEq ::</span> <span class="dt">Equivalence</span> <span class="dt">String</span>
strLengthEq <span class="fu">=</span> contramap length intEq

<span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span> {<span class="ot"> name ::</span> <span class="dt">String</span>,<span class="ot"> age ::</span> <span class="dt">Int</span> }

<span class="ot">personAgeEq ::</span> <span class="dt">Equivalence</span> <span class="dt">Person</span> <span class="co">-- equality by age</span>
personAgeEq <span class="fu">=</span> contramap age intEq

<span class="ot">personNameLengthEq ::</span> <span class="dt">Equivalence</span> <span class="dt">Person</span> <span class="co">-- equality by length of name</span>
personNameLengthEq <span class="fu">=</span> contramap name strLengthEq</code></pre></div>
<p>Here’s how we can run the above:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- t1 = Person &quot;Tuvok1&quot; 240</span>
<span class="co">-- t2 = Person &quot;Tuvok2&quot; 340</span>
<span class="co">-- t3 = Person &quot;Neelix&quot; 60</span>
<span class="co">-- t4 = Person &quot;Janeway&quot; 40</span>

getEquivalence personAgeEq t1 t2
<span class="co">-- False</span>

getEquivalence personAgeEq t1 t1
<span class="co">-- True</span>

getEquivalence personAgeEq t2 t2
<span class="co">-- True</span>

getEquivalence personAgeEq t2 t3
<span class="co">-- False</span>

getEquivalence personNameLengthEq t1 t2
<span class="co">-- True</span>

getEquivalence personNameLengthEq t3 t4
<span class="co">-- False</span>

getEquivalence personNameLengthEq t1 t4
<span class="co">-- False</span></code></pre></div>
<h3 id="comparison">Comparison</h3>
<p>Let’s imagine that we have a datatype called <code>Comparison</code> that wraps a comparison expression:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Comparison</span> a <span class="fu">=</span> <span class="dt">Comparison</span> {<span class="ot"> getComparison ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span> }</code></pre></div>
<p>Given two values of type <code>a</code> the <code>getComparison</code> function will return an <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#t:Ordering">Ordering</a> (<code>LT</code>, <code>GT</code> or <code>EQ</code>) with respect to each other.</p>
<p>Now we can see that both <code>a</code> type variables are in input position as before. Let’s define a <code>Contravariant</code> instance for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Comparison</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Comparison</span> b <span class="ot">-&gt;</span> <span class="dt">Comparison</span> a
  contramap aToB (<span class="dt">Comparison</span> cmpB1B2) <span class="fu">=</span> <span class="dt">Comparison</span> <span class="fu">$</span> \a1 a2 <span class="ot">-&gt;</span>
    <span class="kw">let</span> b1 <span class="fu">=</span> aToB a1
        b2 <span class="fu">=</span> aToB a2
    <span class="kw">in</span> cmpB1B2 b1 b2</code></pre></div>
<div class="figure">
<img src="/images/contravariant/comparison-polarity.png" alt="Polarity of Comparison" />
<p class="caption">Polarity of Comparison</p>
</div>
<p>We can see that the wrappers for <code>Equivalence</code> and <code>Comparison</code> are almost the same, as are their <code>Contravariant</code> instances.</p>
<p>Given a <code>Comparison</code> for Int as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">intCmp ::</span> <span class="dt">Comparison</span> <span class="dt">Int</span>
intCmp <span class="fu">=</span> <span class="dt">Comparison</span> compare</code></pre></div>
<p>We can run it as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">getComparison intCmp <span class="dv">1</span> <span class="dv">1</span>
<span class="co">-- EQ</span>

getComparison intCmp <span class="dv">1</span> <span class="dv">2</span>
<span class="co">-- LT</span>

getComparison intCmp <span class="dv">2</span> <span class="dv">1</span>
<span class="co">-- GT</span></code></pre></div>
<p>We can now calculate the comparison of other types using <code>contramap</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">strCmp ::</span> <span class="dt">Comparison</span> <span class="dt">String</span>
strCmp <span class="fu">=</span> contramap length intCmp

<span class="ot">personAgeCmp ::</span> <span class="dt">Comparison</span> <span class="dt">Person</span>
personAgeCmp <span class="fu">=</span> contramap age intCmp

<span class="ot">fstCmp ::</span> <span class="dt">Comparison</span> a <span class="ot">-&gt;</span> <span class="dt">Comparison</span> (a, b)
fstCmp compA <span class="fu">=</span> contramap fst compA</code></pre></div>
<p>Nothing new here. Let’s have a look at how to sort numbers. We use the <code>sortBy</code> function defined in <code>Data.List</code> from the <code>base</code> package:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">sortBy ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</code></pre></div>
<p>We can see from the <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-List.html#v:sortBy">sortBy</a> function definition that it can accept the data wrapped in the <code>Comparison</code> data type:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">sortBy        ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]
<span class="ot">getComparison ::</span>  a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span></code></pre></div>
<p>Sorting numbers with the above function:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- unsortedNumbers = [3, 5, 1, 4, 2]</span>

<span class="co">-- ascending sort</span>
sortBy (getComparison intCmp) unsortedNumbers
<span class="co">-- [1,2,3,4,5]</span>

<span class="co">-- descending sort</span>
sortBy (flip <span class="fu">$</span> getComparison intCmp) unsortedNumbers
<span class="co">-- [5,4,3,2,1]</span></code></pre></div>
<p>Notice how we just use the <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#v:flip">flip</a> function to change between ascending and descending sort:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">flip<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</code></pre></div>
<p><code>flip</code> just changes the order of input parameters. <code>flip</code> is awesome :) I saw this technique first used at <a href="https://ro-che.info/articles/2016-04-02-descending-sort-haskell">Roman Cheplyaka</a>’s blog.</p>
<p>But here’s something interesting: since we know how to sort <code>Int</code>s we also know how to sort people by age via <code>personAgeCmp</code>! Let’s see that in action:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- unsortedPeople = [Person &quot;Tuvok1&quot; 240, Person &quot;Janeway&quot; 40, Person &quot;Neelix&quot; 60]</span>

<span class="co">-- ascending sort</span>
sortBy (getComparison personAgeCmp) unsortedPeople
<span class="co">-- [Person {name = &quot;Janeway&quot;, age = 40},Person {name = &quot;Neelix&quot;, age = 60},Person {name = &quot;Tuvok1&quot;, age = 240}]</span>

<span class="co">-- descending sort</span>
sortBy (flip <span class="fu">$</span> getComparison personAgeCmp)
<span class="co">-- [Person {name = &quot;Tuvok1&quot;, age = 240},Person {name = &quot;Neelix&quot;, age = 60},Person {name = &quot;Janeway&quot;, age = 40}]</span></code></pre></div>
<h2 id="function-types">Function Types</h2>
<p>A regular function can be though of being defined as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">RegularFunc</span> a b <span class="fu">=</span> <span class="dt">RegularFunc</span> {<span class="ot"> getRegular ::</span> a <span class="ot">-&gt;</span> b }</code></pre></div>
<p>We can define a <code>Functor</code> instance for <code>RegularFunc</code> because <code>b</code> is in output position. But what about <code>a</code>, which is in input position? More on that below.</p>
<p>Let’s recall what the definition of the <code>Functor</code> type class looks like:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span>
<span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</code></pre></div>
<p>In the above declaration, <code>f</code> is a type constructor with one type hole. Given <code>RegularFunc</code> which has two type holes (<code>a</code> and <code>b</code>), we need to fill one in, in order to use it with the <code>Functor</code> instance implementation. To do this we fix <code>a</code> and get the type constructor <code>RegularFunc a</code>. We can’t fix <code>b</code> as partial application of types is done from left to right (holes can only be on the right).</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">RegularFunc</span> a) <span class="kw">where</span>
<span class="ot">  fmap ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f c
  fmap <span class="fu">=</span> (<span class="fu">.</span>)</code></pre></div>
<p>We can’t define a <code>Contravariant</code> instance for <code>a</code> because we have to fix <code>a</code> (we can’t define behaviour over it). All we have to play with is <code>b</code> which is in output position (and hence covariant)</p>
<p>Oh! Come on! If only we didn’t have to fix <code>a</code>. What if we could fix <code>b</code> instead? We don’t care about <code>b</code>. <code>b</code> is dead to us.</p>
<p>Let’s dream up such a type and call it <code>Op</code> - for <strong>op</strong>posite of regular:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Op</span> a b <span class="fu">=</span> <span class="dt">Op</span> {<span class="ot"> getOp ::</span> b <span class="ot">-&gt;</span> a }</code></pre></div>
<p>Now we can see that the type <code>b</code> is in input position within the data type. It’s also on the right of <code>Op a b</code> which means we don’t have to fix it.</p>
<p><code>Op a b</code> can be a little confusing because we have switched the position of type parameters <code>a</code> and <code>b</code> as they were in <code>RegularFunc</code>; <code>a</code> is the output and <code>b</code> is the input.</p>
<table>
<thead>
<tr class="header">
<th align="left">Data type</th>
<th align="left">Polarity of a</th>
<th align="left">Polarity of b</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">RegularFunc a b</td>
<td align="left">Input</td>
<td align="left">Output</td>
</tr>
<tr class="even">
<td align="left">Op a b</td>
<td align="left">Output</td>
<td align="left">Input</td>
</tr>
</tbody>
</table>
<p>And guess what? We can now fix <code>a</code> (which is now our output) and can define a <code>Contravariant</code> instance for <code>Op</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> (<span class="dt">Op</span> a) <span class="kw">where</span>
<span class="ot">  contramap ::</span> (c <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Op</span> a b <span class="ot">-&gt;</span> <span class="dt">Op</span> a c
  contramap cToB (<span class="dt">Op</span> bToA) <span class="fu">=</span> <span class="dt">Op</span> <span class="fu">$</span> \c <span class="ot">-&gt;</span>
    <span class="kw">let</span> b <span class="fu">=</span> cToB c
    <span class="kw">in</span> bToA b</code></pre></div>
<p>Here’s a simple example of how to use it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">stringsLength ::</span> <span class="dt">Op</span> <span class="dt">Int</span> [<span class="dt">String</span>]
stringsLength <span class="fu">=</span> <span class="dt">Op</span> <span class="fu">$</span> sum <span class="fu">.</span> fmap length

<span class="ot">unqiueStringsLength ::</span> <span class="dt">Op</span> <span class="dt">Int</span> (<span class="dt">S.Set</span> <span class="dt">String</span>)
unqiueStringsLength <span class="fu">=</span> contramap S.toList stringsLength</code></pre></div>
<p>If we know how to sum all the lengths of a <code>[String]</code> we can adapt that function to sum the lengths of a <code>Set</code> of <code>String</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Set</span> (fromList)

namesList <span class="fu">=</span> [<span class="st">&quot;Paris&quot;</span>, <span class="st">&quot;Kim&quot;</span>, <span class="st">&quot;B&#39;Elanna&quot;</span>, <span class="st">&quot;Seven&quot;</span>]
namesSet  <span class="fu">=</span> fromList namesList

getOp stringsLength <span class="fu">$</span> namesList
<span class="co">-- 21</span>

getOp unqiueStringsLength <span class="fu">$</span> namesSet
<span class="co">-- 21</span></code></pre></div>
<p>Now <code>Predicate</code>, <code>Comparison</code>, <code>Equivalence</code> and <code>Op</code> seem like useful data structures. The good news is that they already exist in the <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Functor-Contravariant.html">Data.Functor.Contravariant</a> package from <code>base</code> so you don’t have to write them yourself.</p>
<p>One interesting implementation detail of the <code>Comparison</code> and <code>Equivalence</code> <code>Contravariant</code> instances is that they are implemented using the <code>on</code> function:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Equivalence</span> a <span class="fu">=</span> <span class="dt">Equivalence</span> {<span class="ot"> getEquivalence ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span> }

<span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Equivalence</span> <span class="kw">where</span>
  contramap f g <span class="fu">=</span> <span class="dt">Equivalence</span> <span class="fu">$</span> on (getEquivalence g) f</code></pre></div>
<p>The <code>on</code> function is <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Data.Function.html#on">defined</a> as:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">on ::</span> (b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c
(<span class="fu">.*.</span>) <span class="ot">`on`</span> f <span class="fu">=</span> \x y <span class="ot">-&gt;</span> f x <span class="fu">.*.</span> f y</code></pre></div>
<p>Essentially given a function <code>b -&gt; b -&gt; c</code> and a function <code>a -&gt; b</code>, the second function will be applied to each input of type <code>a</code> converting it to a <code>b</code> and then the first function is applied on the transformed inputs. Such reuse. :)</p>
<h1 id="more-polarity">More Polarity</h1>
<p>Let’s take a look at the <code>CallbackRunner</code> example from <a href="https://tech.fpcomplete.com/blog/2016/11/covariance-contravariance/">FP Complete</a>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">CallbackRunner</span> a <span class="fu">=</span>
  <span class="dt">CallbackRunner</span> {
<span class="ot">    runCallback ::</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
  }</code></pre></div>
<p>Type variable <code>a</code> is in input position so we should be able to write a <code>Contravariant</code> instance for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">CallbackRunner</span> <span class="kw">where</span>
<span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">CallbackRunner</span> b <span class="ot">-&gt;</span> <span class="dt">CallbackRunner</span> a
  contramap aToB (<span class="dt">CallbackRunner</span> runCallbackB) <span class="fu">=</span> <span class="dt">CallbackRunner</span> <span class="fu">$</span> \aToIO <span class="ot">-&gt;</span>
    runCallbackB <span class="fu">$</span> \b <span class="ot">-&gt;</span>
      <span class="kw">let</span> a <span class="fu">=</span> undefined <span class="co">-- where do we get an `a` from?</span>
      <span class="kw">in</span> aToIO a

<span class="co">-- if we had a (b -&gt; a) we could convert the `b` to an `a`</span></code></pre></div>
<p>Hmm. Now it looks like we have a problem. There doesn’t seem to anyway for us to get an <code>a</code> to pass to <code>aToIO</code> to complete the implementation. We have a <code>b</code> and if there was a function <code>b -&gt; a</code> instead of our <code>a -&gt; b</code>, we could convert that <code>b</code> to an <code>a</code> and it would all work.</p>
<p>This is because there’s more to the polarity story than I’ve shared up until now. While <code>a</code> is in input position in <code>a -&gt; IO()</code>, it’s polarity changes when it’s also used as an input to the function <code>(a -&gt; IO ()) -&gt; IO ()</code>. I <a href="#Polarity">previously mentioned</a> that an input position is a <code>negative</code> polarity and an output position is a <code>positive</code> polarity.</p>
<p>To figure out the final polarity of something we need to multiply its polarities at every context it is used within in the function definition. More on this below.</p>
<p>Polarity multiplication is similar to the multiplication of positive and negative numbers:</p>
<h2 id="polarity-multiplication-table">Polarity Multiplication Table</h2>
<table>
<thead>
<tr class="header">
<th align="left">Polarity1</th>
<th align="left">x</th>
<th align="left">Polarity2</th>
<th align="left">Polarity</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Positive</td>
<td align="left">x</td>
<td align="left">Positive</td>
<td align="left">Positive</td>
</tr>
<tr class="even">
<td align="left">Positive</td>
<td align="left">x</td>
<td align="left">Negative</td>
<td align="left">Negative</td>
</tr>
<tr class="odd">
<td align="left">Negative</td>
<td align="left">x</td>
<td align="left">Positive</td>
<td align="left">Negative</td>
</tr>
<tr class="even">
<td align="left">Negative</td>
<td align="left">x</td>
<td align="left">Negative</td>
<td align="left">Positive</td>
</tr>
</tbody>
</table>
<p>Let’s try and figure out the polarity of <code>a</code> given our new found multiplication skills. Given <code>runCallback</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">runCallback ::</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p><code>a</code> is in input or negative position in:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p>but within whole function it’s a slightly different story:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">(a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> () <span class="co">-- func</span>
x <span class="fu">=</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> ())      <span class="co">-- assigning (a -&gt; IO ()) to x in func</span>
x <span class="ot">-&gt;</span> <span class="dt">IO</span> ()            <span class="co">-- substituting x in func</span></code></pre></div>
<p>We can see that <code>x</code> in the above example is in input or negative position as well. Given that <code>x</code> is <code>a -&gt; IO ()</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">(a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
<span class="co">-- a -&gt; IO (a is negative)</span>
<span class="co">-- (a -&gt; IO ()) -&gt; IO () (the whole parenthesis are in negative position)</span>
<span class="co">-- polarity of a: negative * negative = positive</span></code></pre></div>
<div class="figure">
<img src="/images/contravariant/callbackRunner-polarity.png" alt="Polarity Multiplication" />
<p class="caption">Polarity Multiplication</p>
</div>
<p>Given that <code>a</code> is now in output or positive position, we should be able to write a <code>Functor</code> instance for it:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">CallbackRunner</span> <span class="kw">where</span>
<span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">CallbackRunner</span> a <span class="ot">-&gt;</span> <span class="dt">CallbackRunner</span> b
  fmap aToB (<span class="dt">CallbackRunner</span> runCallbackA) <span class="fu">=</span> <span class="dt">CallbackRunner</span> <span class="fu">$</span> \bToIO <span class="ot">-&gt;</span>
    runCallbackA <span class="fu">$</span> \a <span class="ot">-&gt;</span>
      <span class="kw">let</span> b      <span class="fu">=</span> aToB a
          result <span class="fu">=</span> bToIO b
      <span class="kw">in</span> result</code></pre></div>
<p>And we can!! If you want to dig more into polarities there are some good exercises at the <a href="https://tech.fpcomplete.com/blog/2016/11/covariance-contravariance/">FP Complete article</a>.</p>
<h1 id="invariant-functors">Invariant Functors</h1>
<p>We briefly mentioned invariant functors when talking about <a href="#Polarity">Polarity</a> but never mentioned them again until now. The <code>Invariant</code> typeclass is the parent typeclass of both <code>Functor</code> and <code>Contravariant</code>)</p>
<div class="figure">
<img src="/images/contravariant/functor-hierarchy-aligned.png" alt="Simplified Functor Hierarchy" />
<p class="caption">Simplified Functor Hierarchy</p>
</div>
<p>Given that this post is quite long, I’m only going to mention that <code>Invariant</code> has both covariant and contravariant functions in its definition:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="kw">where</span>
<span class="ot">  invmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</code></pre></div>
<p>where <code>a -&gt; b</code> is the function to use if <code>f a</code> is a <code>Functor</code> and <code>b -&gt; a</code> is the function to use if <code>f a</code> is <code>Contravariant</code>.</p>
<p>I may write another article about invariant functors if I feel the need for it, but in the meantime <a href="http://oleg.fi/gists/posts/2017-12-23-functor-optics.html#t:Invariant">checkout</a> <a href="https://stackoverflow.com/questions/22103445/example-of-invariant-functor">these</a> <a href="https://cvlad.info/functor-of/">articles</a> to get you <a href="https://www.lesswrong.com/posts/KRb2x2RJjGbBMbE4M/my-functor-is-rich">started</a>.</p>
<h1 id="summary">Summary</h1>
<p>Hopefully this has shed some light onto contravariant functors and how they are used and how they can be implemented. In a future article I hope to cover <code>Divisible</code> and <code>Decidable</code> typeclasses that build up from <code>Contravariant</code>.</p>
<p>The <a href="https://github.com/ssanj/contravariant-functors">source</a> for this article can be found on Github.</p>
<p>A big “Thank You” to <a href="https://twitter.com/georgetalkscode">George Wilson</a> for inspiring me to dig deeper into this topic with his excellent <a href="#video">presentations</a> on Functors.</p>
<p>A big thanks also to <a href="https://twitter.com/andrewfnewman">Andrew Newman</a> who reviewed this article.</p>
<h1 id="epilogue">Epilogue</h1>
<p>Just when you thought you’d learned all there is to learn about variance, there appears to be a variance of the <a href="https://en.wikipedia.org/wiki/Close_Encounters_of_the_Third_Kind">fourth kind</a>. It’s known as <a href="https://www.benjamin.pizza/posts/2019-01-11-the-fourth-type-of-variance.html">phantom variance</a> or <a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">bivariance</a> as pointed by <a href="https://www.reddit.com/user/emilypii/">emilypii</a> and <a href="https://www.reddit.com/user/dbramucci/">dbramucci</a> on <a href="https://www.reddit.com/r/haskell/comments/iqpbnz/blog_post_learning_about_contravariant_functors/">reddit</a>. dbramucci also linked to a nice Scala <a href="https://speakerdeck.com/mpilquist/explorations-in-variance?slide=17">slidedeck</a> from <a href="https://twitter.com/mpilquist">Michael Pilquist</a></p>
<h1 id="links">Links</h1>
<h2 id="articles">Articles</h2>
<ul>
<li><a href="http://oleg.fi/gists/posts/2017-12-23-functor-optics.html#t:Contravariant">Functor Optics - Oleg’s Gists</a></li>
<li><a href="https://ocharles.org.uk/blog/guest-posts/2013-12-21-24-days-of-hackage-contravariant.html">24 days of Hackage - Contravariant - Ocharles</a></li>
<li><a href="https://tech.fpcomplete.com/blog/2016/11/covariance-contravariance/">Covariance and Contravariance - FP Complete</a></li>
<li><a href="https://typeclasses.com/contravariance">Understanding Contravariance - Type classes</a></li>
<li><a href="https://kowainik.github.io/posts/2018-09-25-co-log">CO-LOG - Kowainik</a></li>
</ul>
<h2 id="video">Video</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=JZPXzJ5tp9w">The Extended Functor Family - George Wilson</a></li>
<li><a href="https://www.youtube.com/watch?v=IJ_bVVsQhvc&amp;t">Contravariant Functors - The Other Side of the Coin - George Wilson</a></li>
<li><a href="https://www.youtube.com/watch?v=OJtGECfksds">Fun with Profunctors - Phil Freeman</a></li>
<li><a href="https://www.youtube.com/watch?v=SxfZ_6ynhi0">A Fistful of Functors - Itamar Ravid</a></li>
</ul>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://github.com/hmemcpy/milewski-ctfp-pdf">Category Theory for Programmers - Bartosz Milewski</a></li>
<li><a href="https://leanpub.com/thinking-with-types">Thinking in Types - Sandy Maguire</a></li>
</ul>
<h2 id="questions-and-answers">Questions and Answers</h2>
<ul>
<li><a href="https://www.reddit.com/r/haskell/comments/2p7toa/looking_for_an_abstraction_to_compose/">Looking for an abstraction to compose - Reddit</a></li>
<li><a href="https://www.reddit.com/r/haskelltil/comments/bqiyr9/datafunctorcontravariant_some_simple_applications/">datafunctorcontravariant some simple applications - Reddit</a></li>
<li><a href="https://www.reddit.com/r/haskell/comments/4rvtzy/what_is_the_motivation_behind_contravariant/">The motivation behind Contravariant - Reddit</a></li>
</ul>
<h2 id="packages">Packages</h2>
<ul>
<li><a href="http://hackage.haskell.org/package/contravariant-1.5.2">Contravariant Package</a></li>
</ul>
<h1 id="definitions">Definitions</h1>
<h3 id="type-constructor-1">Type constructor (1)</h3>
<p>A data type that needs one or more type variables to be fully defined.</p>
<p>For example, <code>Maybe</code> is a type constructor and <code>Maybe Int</code> is a type.</p>]]></description>
    <pubDate>Sat, 13 Jun 2020 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2020-06-13-contravariant-functors-are-weird.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 14 Oct 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>My Ideal Work Culture</title>
    <link>http://blog.ssanj.net/posts/2015-10-14-my-ideal-work-culture.html</link>
    <description><![CDATA[<p>Since resigning from my current workplace, I’ve been thinking about the attributes I’d like to see in my next one. Here are my thoughts:</p>
<ul>
<li>Meaningful work. Helping people and changing the world for the better in some small way.</li>
<li>Leaders who are ethical. Not people just out to make a buck. Idealists who have a vision for making humanity better. Someone who leads from the front. Someone who is a part of the team instead of some elitist-untouchable. Someone who listens to ideas from even the most junior employees.</li>
<li>Freedom to work how you want to work, when you want to work and from where you want to work.</li>
<li>Trusted to do the right thing.</li>
<li>Being part of a great hard-working team that focuses on delivering quality products or outcomes.</li>
<li>Real work/life balance.</li>
<li>Having learning and doing culture.</li>
<li>Active in the community, be it charities, open source, hosting meet ups etc. Giving back somehow.</li>
</ul>]]></description>
    <pubDate>Wed, 14 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-14-my-ideal-work-culture.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Enjoyable Work</title>
    <link>http://blog.ssanj.net/posts/2015-10-14-enjoyable-work.html</link>
    <description><![CDATA[<p>Here are some of the ways I enjoy to work.</p>
<div class="figure">
<img src="/images/enjoyable_work_mm.png" alt="Mind map of what I find enjoyable about work" />
<p class="caption">Mind map of what I find enjoyable about work</p>
</div>]]></description>
    <pubDate>Wed, 14 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-14-enjoyable-work.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Daring Greatly - Brené Brown</title>
    <link>http://blog.ssanj.net/posts/2015-10-14-daring-greatly-brene%CC%81-brown.html</link>
    <description><![CDATA[<p>Ideas from the book <a href="http://www.amazon.com/Daring-Greatly-Courage-Vulnerable-Transforms/dp/1592408419">Daring Greatly by Brené Brown</a></p>
<blockquote>
<p>It is not the critic who counts; not the man who points out how the strong man stumbles, or where the doer of deeds could have done them better.</p>
</blockquote>
<blockquote>
<p>The credit belongs to the man who is actually in the arena, whose face is marred by dust and sweat and blood; who strives valiantly; who errs, who comes short again and again,</p>
</blockquote>
<blockquote>
<p>because there is no effort without error and shortcoming; but who does actually strive to do the deeds; who knows great enthusiasms, the great devotions; who spends himself in a worthy cause;</p>
</blockquote>
<blockquote>
<p>who at the best knows in the end the triumph of high achievement, and who at the worst, if he fails, at least fails while daring greatly…</p>
</blockquote>
<ul>
<li>If we want to reignite innovation and passion, we have to rehumanize work.</li>
<li>When failure is not an option we can forget about learning, creativity and innovation.</li>
</ul>
<div class="quote">
What we know matters, but who we are matters more
</div>
<ul>
<li>The ability to acknowledge our risks and exposure, greatly increases our chances of adhering to some kind of positive health regimen.</li>
<li>We love seeing raw truth and openness in other people, but we are afraid to let them see it in us.</li>
<li>Speak openly about failing.</li>
</ul>
<div class="quote">
What’s worth doing even if I fail?
</div>
<ul>
<li>Sharing appropriately, with boundaries, means sharing with people with whom you’ve developed relationships that can bear the weight of our story.</li>
<li>Until we can receive with an open heart, we are never really giving with an open heart. When we attach judgement to receiving help, we knowingly or unknowingly attach judgement to giving help.</li>
<li>A sense of worthiness inspires us to be vulnerable, share openly, and persevere.</li>
</ul>
<h2 id="shame">Shame</h2>
<div class="quote">
Shame is the intensely painful feeling or experience of believing that we are flawed and therefore unworthy of love and belonging
</div>
<ul>
<li>Shame derives its power from being unspeakable.</li>
<li>Shame is fear of disconnection.</li>
<li>People believe they deserve their shame; they do not believe they deserve their humiliation.</li>
</ul>
<blockquote>
<p>The secret killer of innovation is shame. You can’t measure it, but it is there. Every time someone holds back on a new idea, fails to give their manager much needed feedback, and is afraid to speak up in front of a client you can be sure shame played a part. That deep fear we all have of being wrong, of being belittled and of feeling less than, is what stops us taking the very risks required to move out companies forward.</p>
</blockquote>
<ul>
<li>You are only as sick as your secrets.</li>
<li>Real belonging doesn’t necessitate disdain.</li>
<li>We judge people in areas where we are vulnerable to shame.</li>
<li>We’re hard on each other because we’re using each other as a launching pad out of our own perceived shaming deficiency.</li>
</ul>
<h2 id="shame-resilience">Shame Resilience</h2>
<ol style="list-style-type: decimal">
<li>Practise courage and reach out by sharing your experience with someone who has earned the right to hear it.</li>
<li>Talk to yourself the way you would to someone you really love and who you are trying to comfort.</li>
<li>Own your story - don’t bury it. “If you own the story you get to write the ending.”</li>
</ol>
<blockquote>
<p>Love is not something we give or get; it is something we nurture and grow, a connection that can only be cultivated between two people when it exists within each one of them - we can only love others as much as we love ourselves.</p>
</blockquote>
<blockquote>
<p>Shame, blame, disrespect, betrayal, and the withholding of affection damage the roots from which love grows. Love can only survive these injuries if they are acknowledged, healed and rare.</p>
</blockquote>
<div class="quote">
Vulnerability is the last thing I want you to see in me, but the first thing I look for in you
</div>
<h2 id="joy">Joy</h2>
<ul>
<li>Participants described happiness as an emotion that’s connected to circumstance and they described joy as a spiritual way of engaging with the world that’s connected to a practising of gratitude.</li>
<li>Joy comes to us in ordinary moments. Scarcity culture may keep us afraid of living small, ordinary lives.</li>
<li>Be grateful for what you have. Celebrate it. Share your gratitude with others.</li>
<li>Don’t squander joy. We can’t prepare for tragedy and loss.</li>
</ul>
<blockquote>
<p>But every time we allow ourselves to learn into joy and give in to those moments, we build resilience and we cultivate hope. The joy becomes part of who we are, and when bad things happen, we are stronger.</p>
</blockquote>
<h2 id="perfectionism">Perfectionism</h2>
<ul>
<li>Healthy striving is self-focused: How can I improve? Perfectionism is other-focused: What will they think?</li>
<li>The fear of failing, making mistakes, not meeting people’s expectations, and being criticised keeps us outside the arena.</li>
<li>Perfectionism is a form of shame.</li>
</ul>
<blockquote>
<p>I remind myself “Don’t let the perfect be the enemy of good” - (Cribbed from Voltaire.) A twenty-minute walk that I do is better than a four-hour run that I don’t do. The imperfect book that gets published is better than the perfect book that never leaves my computer. The dinner party of take-out Chinese food is better than the elegant dinner that I never host.</p>
</blockquote>
<ul>
<li><p>To manage perfectionism give yourself permission to do lots of things that are good enough.</p></li>
<li>Because we are hard-wired for connection, disconnection always creates pain.</li>
<li><p>If we want to fully experience love and belonging, we must believe that we are worthy of love and belonging.</p></li>
</ul>
<h2 id="rehumanise-work">Rehumanise work</h2>
<ul>
<li>Most people and most organisations can’t stand the uncertainty and the risk of real innovation. Learning and creating are inherently vulnerable. There’s never enough certainty. People want guarantees.</li>
<li>Something related to fear keeps people from going for it. They focus on what they already do well and they don’t put themselves out there.</li>
<li>No corporation or school can thrive in the absence of creativity, innovation, and learning, and the greatest threat to all three of these is disengagement.</li>
<li>When we are disengaged, we don’t show up, we don’t contribute, and we stop caring.</li>
<li>If blame is a pattern in your culture, then shame needs to addressed as an issue.</li>
<li>Cover-up cultures depend on shame keeping folks quiet.</li>
</ul>
<h3 id="vulnerability-meter">Vulnerability Meter</h3>
<p>How often to people in your business, school, communities say these things?</p>
<ul>
<li>“I don’t know.”</li>
<li>“I need help.”</li>
<li>“I’d like to give it a shot.”</li>
<li>“It’s important to me.”</li>
<li>“I disagree - can we talk about it?”</li>
<li>“It didn’t work, but I learned a lot.”</li>
<li>“Yes, I did it.”</li>
<li>“Here’s what I need.”</li>
<li>“Here’s how I feel.”</li>
<li>“I’d like some feedback.”</li>
<li>“Can I get your take on this?”</li>
<li>“What can I do better next time?”</li>
<li>“Can you teach me how to do this?”</li>
<li>“I played a part in that.”</li>
<li>“I accept responsibility for that.”</li>
<li>“I’m here for you.”</li>
<li>“I want to help.”</li>
<li>“Let’s move on.”</li>
<li>“I’m sorry.”</li>
<li>“That means a lot to me.”</li>
<li>“Thank you.”</li>
</ul>
<h2 id="parenting">Parenting</h2>
<ul>
<li>Certainty often breeds absolutes, intolerance and judgement.</li>
</ul>
<div class="quote">
Are you the adult you want your child to grow up to be?
</div>
<ul>
<li>If we want our children to love and accept who they are, our job is to love and accept who we are.</li>
<li>We can’t raise children who are more shame resilient than we are.</li>
<li>Normalising means helping our children know they’re not alone and that we’ve experienced many of the same struggles.</li>
<li>When we feel good about the choices we’re making and when we’re engaging with the world from a place of worthiness rather than scarcity, we feel no need to judge and attack.</li>
<li>Daring greatly means finding our own path and respecting what the search looks like for other folks.</li>
<li>Belonging is being somewhere you want to be, and where they want you. Fitting in is being accepted for being like everyone else.</li>
<li>Parenting perfection is not the goal. The best gifts and teaching moments happen in those imperfect moments when we allow children to help us mind the gap.</li>
</ul>]]></description>
    <pubDate>Wed, 14 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-14-daring-greatly-brene%CC%81-brown.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Your Best Life</title>
    <link>http://blog.ssanj.net/posts/2015-10-07-your-best-life.html</link>
    <description><![CDATA[<p>Your life is meant to be beautiful. Cast into the fire anything that destroys your soul. Dream your best life. Live it.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-07-your-best-life.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>The Allure of Potential</title>
    <link>http://blog.ssanj.net/posts/2015-10-07-the-allure-of-potential.html</link>
    <description><![CDATA[<p>I’ve worked at many companies over the years. Many of them had a real potential to be great. We’d say things like “Once we get more funding” or “Once we get that big customer” or “Once we fix this bug” then “things will be better”. Unfortunately most times, “things” don’t get better. In fact they usually get worse. There is no magic formula to know how long you should stick it out at a company. But there are <a href="http://sanj.ink/posts/2015-05-07-reasons.html">reasons</a>. Potential unrealised is just a false promise. A waste of time.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-07-the-allure-of-potential.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Somewhere</title>
    <link>http://blog.ssanj.net/posts/2015-10-07-somewhere.html</link>
    <description><![CDATA[<p>Sometimes you know what you must do. The path is clear, but it fills you with dread. You feel afraid. What if you fail? What if it’s not as good? What if… What if…</p>
<p>Sometimes you just have to do what you know is the right thing - no matter how hard it is. Once you take a leap of faith, you’ll always land… somewhere.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-07-somewhere.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>One Day</title>
    <link>http://blog.ssanj.net/posts/2015-10-07-one-day.html</link>
    <description><![CDATA[<p>So often in life we squander our chances. Our chance to do the right thing. To ask for forgiveness. To better ourselves. We always think “we’ll do that one day”. One day may never come.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-07-one-day.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Let Go</title>
    <link>http://blog.ssanj.net/posts/2015-10-07-let-go.html</link>
    <description><![CDATA[<p>Don’t hold onto things. Let them go. Open yourself up to new experiences. Abundance will find you wherever you are.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-07-let-go.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Encode Business Rules Within Types</title>
    <link>http://blog.ssanj.net/posts/2015-10-06-encode-business-rules-within-types.html</link>
    <description><![CDATA[<p>A technique I’ve been using quite frequently is to encode a set of rules for an object within a type.</p>
<p>Take a basic Person class as an example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">Person</span>(name: String, age: Int)</code></pre></div>
<p>While this definition is very easy to understand, it does allow some inconsistencies and bugs to creep into the code.</p>
<p>So what are some of the problems with this definition? Because <em>name</em> is a String, it will accept any String value: “Bob”, “1234”, “<span class="citation">@JOE</span>” and “”. These might not be valid names for a Person. There might be definite rules around the names that can be used. For instance any valid name should not be an empty String. It should probably not contain numbers. There could be other rules but these are some obvious ones.</p>
<p>Age similarly has problems. Because we use an Int to present it, any Int will be allowed. 1000 and -10 are valid Int values, but these are not valid ages. We may need some constraints on this age such as between 0 and 120.</p>
<p>The main issue with using imprecise types like String and Int to represent specific types is that we allow a whole range of values that are invalid to be used along with a small subset of valid values for those types.</p>
<p>Given the above definition of Person we can construct the following invalid Person instances as described:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">Person</span>(<span class="st">&quot;&quot;</span>, <span class="dv">23</span>)
<span class="fu">Person</span>(<span class="st">&quot;Bob&quot;</span>, -<span class="dv">1</span>)</code></pre></div>
<p>So now do we stop this from happening?</p>
<p>First let’s define the rules for name and age:</p>
<ul>
<li>name: A non empty String, with only alphabetic characters.</li>
<li>age: a number between 0 and 120.</li>
</ul>
<p>We need to control how a Person instance is created. There has to be only one valid way to create a Person. We do this by making the constructor on the Person case class, private. In the companion object we add a method to create a valid Person instance via this private constructor.</p>
<h2 id="option-1-encode-name-and-age-rules-into-person">Option 1: Encode name and age rules into Person</h2>
<p>If the name or age is not valid then we return an Option[Person].</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="kw">private</span> <span class="fu">Person</span>(name: String, age: Int)

<span class="kw">object</span> Person {
  <span class="kw">def</span> <span class="fu">createPerson</span>(name: String, age: Int): Option[Person] =
    <span class="kw">for</span> {
      n &lt;- Option(name).
              <span class="fu">map</span>(_.<span class="fu">trim</span>).
              <span class="fu">filterNot</span>(_.<span class="fu">isEmpty</span>).
              <span class="fu">filter</span>(_.<span class="fu">forall</span>(_.<span class="fu">isLetter</span>))
      a &lt;- <span class="kw">if</span> (age &gt;= <span class="dv">0</span> &amp;&amp; age &lt;= <span class="dv">120</span>) Option(age) <span class="kw">else</span> None
    } <span class="kw">yield</span> <span class="fu">Person</span>(n, a)
}</code></pre></div>
<p><strong>note</strong>: <em>Unfortunately we can’t create another apply method on the Person companion object as the compiler complains that we have duplicate apply methods. Therefore we are relegated to using the createObject naming format for factory methods.</em></p>
<p>Now we can’t create an invalid Person instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">create</span>(<span class="st">&quot;&quot;</span>, <span class="dv">23</span>)</code></pre></div>
<pre class="terminal scrollx"><code>None</code></pre>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">create</span>(<span class="st">&quot;Bob&quot;</span>, <span class="dv">1000</span>)</code></pre></div>
<pre class="terminal scrollx"><code>None</code></pre>
<p>We can create a valid instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">create</span>(<span class="st">&quot;Bob&quot;</span>, <span class="dv">23</span>)</code></pre></div>
<pre class="terminal scrollx"><code>Some(Person(Bob,23))</code></pre>
<p>When we create a Person object we know that it has valid a name and age. But the user of the Person object has no idea that is the case by looking at the object definition. It’s any String for a name and any Int for an age.</p>
<p>Further if the name or age of a Person is used in another method we have no guarantees that the rules governing them still hold.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">ageBracket</span>(age: Int): String = {
  <span class="kw">if</span> (age &lt;= <span class="dv">20</span>) <span class="st">&quot;young&quot;</span>
  <span class="kw">else</span> <span class="kw">if</span> (age &lt;= <span class="dv">40</span>) <span class="st">&quot;prime&quot;</span>
  <span class="kw">else</span> <span class="st">&quot;old&quot;</span>
}</code></pre></div>
<p><strong>note</strong>:<em>We should encode the return type of ageBracket into its own ADT: (Young|Prime|Old). I have left this out for brevity.</em></p>
<p>Now ageBracket can easily be called with an invalid age. Of course we could pass in a Person to ageBracket, but we shouldn’t have to. We only care about age. Also the Person object now has knowledge of all the rules governing the creation of a name and an age. This is a conflation of concerns. We need to separate them.</p>
<h2 id="option-2-encode-name-and-age-rules-into-their-own-types">Option 2: Encode name and age rules into their own types</h2>
<p>Encode the rules for a name and an age into their own types.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Person <span class="kw">private</span>(name: Name, age: Age)

<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Name <span class="kw">private</span>(value: String)
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> Age <span class="kw">private</span>(age: Int)

<span class="kw">object</span> Name {
 <span class="kw">def</span> <span class="fu">createName</span>(name: String): Option[Name] =
   Option(name).
     <span class="fu">map</span>(_.<span class="fu">trim</span>).
     <span class="fu">filterNot</span>(_.<span class="fu">isEmpty</span>).
     <span class="fu">filter</span>(_.<span class="fu">forall</span>(_.<span class="fu">isLetter</span>)).
     <span class="fu">map</span>(Name(_))
}

<span class="kw">object</span> Age {
  <span class="kw">def</span> <span class="fu">createAge</span>(age: Int): Option[Age] = <span class="kw">if</span> (age &gt;= <span class="dv">0</span> &amp;&amp; age &lt;= <span class="dv">120</span>) Option(<span class="fu">Age</span>(age)) <span class="kw">else</span> None
}

<span class="kw">object</span> Person {
  <span class="kw">def</span> <span class="fu">createPerson</span>(name: String, age: Int): Option[Person] =
    <span class="kw">for</span> {
      n &lt;- Name.<span class="fu">createName</span>(name)
      a &lt;- Age.<span class="fu">createAge</span>(age)
     } <span class="kw">yield</span> <span class="fu">Person</span>(n, a)
}

<span class="kw">def</span> <span class="fu">ageBracket</span>(age: Age): String = {
  <span class="kw">if</span> (age.<span class="fu">age</span> &lt;= <span class="dv">20</span>) <span class="st">&quot;young&quot;</span>
  <span class="kw">else</span> <span class="kw">if</span> (age.<span class="fu">age</span> &lt;= <span class="dv">40</span>) <span class="st">&quot;prime&quot;</span>
  <span class="kw">else</span> <span class="st">&quot;old&quot;</span>
}</code></pre></div>
<p>Let’s try to create a Person with an invalid name:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">createPerson</span>(<span class="st">&quot;&quot;</span>, <span class="dv">23</span>)</code></pre></div>
<pre class="terminal scrollx"><code>None</code></pre>
<p>Let’s try to create a Person with an invalid age:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">createPerson</span>(<span class="st">&quot;Bob&quot;</span>, -<span class="dv">1</span>)</code></pre></div>
<pre class="terminal scrollx"><code>None</code></pre>
<p>Let’s try to create a Person with a valid name and age:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Person.<span class="fu">createPerson</span>(<span class="st">&quot;Bob&quot;</span>, <span class="dv">23</span>)</code></pre></div>
<pre class="terminal scrollx"><code>Some(Person(Name(Bob),Age(23)))</code></pre>
<p>So now when we create or are given a Person object we know definitely that the Person instance is valid and that the Name and Age are valid. We can also use the Name and Age values independently because we know they remain valid outside a Person object. The Person class doesn’t have knowledge about what rules are applied to create a Name or an Age. The concerns are separated.</p>
<p>The full <a href="https://github.com/ssanj/encode-business-rules-in-types">example source</a> can be found on Github.</p>
<p><strong>note</strong>: <em>If you need more information on failures during construction use an <a href="https://github.com/scala/scala/blob/v2.11.7/src/library/scala/util/Either.scala">Either</a> or <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Either.scala">\/</a> instead of Option.</em></p>]]></description>
    <pubDate>Tue, 06 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-06-encode-business-rules-within-types.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How Business is Supposed to Work</title>
    <link>http://blog.ssanj.net/posts/2015-10-05-how-business-is-supposed-work.html</link>
    <description><![CDATA[<p>There is an implied contract when a <a href="http://www.businessdictionary.com/definition/business.html">business</a> takes money from a customer. The customer gives the business money so it will provide them with either goods or services or both.</p>
<p>It’s easy to forget what you promised your existing customers when hunting for your new customers. This is one promise every business needs to keep.</p>]]></description>
    <pubDate>Mon, 05 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-10-05-how-business-is-supposed-work.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

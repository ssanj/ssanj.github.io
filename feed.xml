<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 16 Oct 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>Import mysql data from an External File</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-import-mysql-data-from-an-external-file.html</link>
    <description><![CDATA[<pre><code>mysql -u username -p password database_name &lt; filename.sql</code></pre>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-import-mysql-data-from-an-external-file.html</guid>
</item>
<item>
    <title>Cabal Install cabal-install Fails on Linux</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-cabal-install-fails-on-linux.html</link>
    <description><![CDATA[<p>While upgrading cabal with cabal-install on Ubuntu 12.04 I received the following error:</p>
<pre><code>Linking dist/build/cabal/cabal ...
/usr/bin/ld: cannot find -lz</code></pre>
<p>After that extremely helpful error message, I decided to trawl the Internet. I found information on a similar error on <a href="http://stackoverflow.com/questions/16952741/unable-to-install-yesod-bin">SO</a> that pointed to some possible libraries I needed to install on my OS.</p>
<p>The <strong>-l</strong> in <strong>-lz</strong> seemed to indicate <strong>libghc</strong> and the following characters the name of the library, in this case: <strong>z</strong>. So I searched for a list of libraries that were of the form: libghc-z* and came up with this list:</p>
<ul>
<li>libghc-zeromq-haskell-dev</li>
<li>libghc-zeromq-haskell-doc</li>
<li>libghc-zeromq-haskell-prof</li>
<li>libghc-zip-archive-dev</li>
<li>libghc-zip-archive-doc</li>
<li>libghc-zip-archive-prof</li>
<li>libghc-zlib-bindings-dev</li>
<li>libghc-zlib-bindings-doc</li>
<li>libghc-zlib-bindings-prof</li>
<li>libghc-zlib-conduit-dev</li>
<li>libghc-zlib-conduit-doc</li>
<li>libghc-zlib-conduit-prof</li>
<li>libghc-zlib-dev</li>
<li>libghc-zlib-doc</li>
<li>libghc-zlib-enum-dev</li>
<li>libghc-zlib-enum-doc</li>
<li>libghc-zlib-enum-prof</li>
<li>libghc-zlib-prof</li>
</ul>
<p>So I decided to filter the list to only <strong>libghc-zlib-</strong> variations. I also removed <strong>-doc</strong> and <strong>-prof</strong> variants. I further removed <strong>-conduit-</strong> variations because I was not using <strong>conduit</strong>.</p>
<p>The final list was:</p>
<ol style="list-style-type: decimal">
<li>libghc-zlib-dev</li>
<li>libghc-zlib-bindings-dev</li>
<li>libghc-zlib-enum-dev</li>
</ol>
<p>I decided to install each library in turn. After which I would install cabal-install to see if it worked.</p>
<p>After installing <strong>libghc-zlib-dev</strong> via: <code>sudo apt-get install libghc-zlib-dev</code> I found that cabal-install installed successfully. That turned out to be a very lucky guess.</p>
<p>Happy Days :)</p>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-cabal-install-fails-on-linux.html</guid>
</item>
<item>
    <title>Tim Brown on Thinking Big</title>
    <link>http://blog.ssanj.net/posts/2014-10-14-tim-brown-on-thinking-big.html</link>
    <description><![CDATA[<p>Some interesting ideas from Tim Brown’s Ted Talk: <a href="http://www.ted.com/talks/tim_brown_urges_designers_to_think_big">Designers - Think Big</a>:</p>
<ol style="list-style-type: decimal">
<li>Integrative thinking - Integrate opposing ideas and opposing constraints to create new solutions. Desirability (what humans need), technical feasibility and economic viability.</li>
<li>Design is human-centred. It might use technology and economics but it starts with what humans need or might need. What makes life easier and more enjoyable. What makes technology useful and usable.</li>
<li>You need to understand culture and context before you start having ideas.</li>
<li>Learning by making. Instead of thinking about what to build, build in order to think.</li>
<li>Prototypes speed up innovation. Because only once you get your ideas out into the real world do you understand its strengths and weaknesses.</li>
<li>The faster we prototype the faster our ideas evolve.</li>
<li>Prototype your ideas early.</li>
<li>Participatory systems - where the producers and consumers interact on a more direct basis.</li>
<li>Everyone should design. Not just designers.</li>
<li>In times of change we need new alternatives and new ideas.</li>
<li>Design Thinking encourages divergent approaches. New solutions, new ideas that have not existed before.</li>
<li>What kind of design questions should we ask ourselves today?</li>
</ol>]]></description>
    <pubDate>Tue, 14 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-14-tim-brown-on-thinking-big.html</guid>
</item>
<item>
    <title>How to read a YAML file from Haskell</title>
    <link>http://blog.ssanj.net/posts/2014-10-09-How-to-read-a-YAML-file-from-Haskell.html</link>
    <description><![CDATA[<p>While working on BrainCandy (My first Haskell web application), I needed a way to load in some database configuration. As I use YAML quite frequently in other languages such as Java, I thought it would be nice to use it through Haskell as well. After a bit of <a href="http://stackoverflow.com">SO</a> and Google I came across a few good examples that helped me get started. (See the references for more details.)</p>
<p>Given how easy it is to read YAML through Haskell, I thought I’d write a very short example to get people started.</p>
<p>The config.yml file:</p>
<pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">username:</span> <span class="st">&quot;John Smith&quot;</span>
<span class="fu">password:</span> <span class="st">&quot;Sm1thy@Jon0&quot;</span></code></pre>
<p>The Haskell code to read the config.yml file:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE DeriveGeneric #-}</span> <span class="co">-- (2)</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">BS</span>
<span class="kw">import qualified</span> <span class="dt">Data.Yaml</span> <span class="kw">as</span> <span class="dt">Y</span>
<span class="kw">import </span><span class="dt">GHC.Generics</span>
<span class="kw">import </span><span class="dt">Data.Aeson</span>


<span class="kw">data</span> <span class="dt">Cred</span> <span class="fu">=</span> <span class="dt">Cred</span> {<span class="ot"> username ::</span> <span class="dt">String</span>,<span class="ot"> password ::</span> <span class="dt">String</span> } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Generic</span>) <span class="co">-- (1,2)</span>
<span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Cred</span> <span class="co">-- (3)</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    content <span class="ot">&lt;-</span> BS.readFile <span class="st">&quot;config.yml&quot;</span> <span class="co">-- (4)</span>
    <span class="kw">let</span> parsedContent <span class="fu">=</span> Y.decode<span class="ot"> content ::</span> <span class="dt">Maybe</span> <span class="dt">Cred</span> <span class="co">-- (5)</span>
    <span class="kw">case</span> parsedContent <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;Could not parse config file.&quot;</span>
        (<span class="dt">Just</span> (<span class="dt">Cred</span> u p)) <span class="ot">-&gt;</span> putStrLn (<span class="st">&quot;username: &quot;</span> <span class="fu">++</span> u <span class="fu">++</span> <span class="st">&quot;, password: &quot;</span> <span class="fu">++</span> p)</code></pre>
<p>Here are the basic steps:</p>
<ol style="list-style-type: decimal">
<li>Create a datatype to match the YAML structure of your config file. <strong>Creds</strong> in this case.</li>
<li>Make sure your datastructure derives <strong>Show</strong> and <strong>Generic</strong>. You need to use {-# LANGUAGE DeriveGeneric #-} to derive Generic instances.</li>
<li>Create an <strong>Aeson.FromJSON</strong> instance of your datatype.</li>
<li>Read the content of your config file as <strong>ByteString</strong> .</li>
<li>Pass file contents to the <strong>Data.Yaml.decode</strong> function. The <strong>Data.YAML.decode</strong> function returns a <strong>Maybe Cred</strong> as it might not be able to parse the config file into the supplied data structure.</li>
</ol>
<p>The <a href="https://github.com/ssanj/HaskellYamlReaderExample">cabal project</a> for this example can be found on github.</p>
<p>Now go externalize those configurations!</p>
<p>References:</p>
<ul>
<li><a href="http://lenguyenthedat.blogspot.com.au/2014/01/parsing-config-file-in-haskell-with-yaml.html">Parsing config files in Haskell with Yaml</a></li>
<li><a href="http://stackoverflow.com/questions/21292428/reading-yaml-lists-of-objects-in-haskell">Reading YAML lists of objects in Haskell</a></li>
</ul>]]></description>
    <pubDate>Thu, 09 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-09-How-to-read-a-YAML-file-from-Haskell.html</guid>
</item>
<item>
    <title>The Tim Ferriss Show Interviews Peter Thiel</title>
    <link>http://blog.ssanj.net/posts/2014-10-06-the-tim-ferriss-show-peter-thiel.html</link>
    <description><![CDATA[<p>Some interesting ideas from <a href="http://fourhourworkweek.com/blog">The Tim Ferriss Show’s</a> interview with Peter Thiel:</p>
<ol style="list-style-type: decimal">
<li>Capitalism and Competition are not synonyms but antonyms. Eg. the Restaurant business in SFO is incredibly competitive but not capitalistic because no one makes any money from it.</li>
<li>You don’t have to wait to start something. If you have a 10 year plan to do something with your life you should ask yourself why you can’t do it in 6 months.</li>
<li>Failure is massively overrated. Most businesses fail for more than one reason. When a business fails you sometimes don’t learn anything at all because there were too many factors involved in that failure.</li>
<li>The death of every business is a tragedy.</li>
<li>Successful founders are relentless. Everyday they do more and get better at it.</li>
<li>Stay away from trends as you will have many competitors. Prefer missions. Work on unique problems people are not solving elsewhere.</li>
<li>Ask yourself why are you doing something. Make sure you like the answer.</li>
<li>What do people agree merely by convention and what is the truth?</li>
<li>We never want to use convention as a shortcut for truth. We need to always ask “is this true?”</li>
<li>“Tell me something that is true that very few people agree with you on.”</li>
<li>Always try to think for yourself and break through conventions.</li>
<li>I try to have conversations with smart people every day.</li>
</ol>]]></description>
    <pubDate>Mon, 06 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-06-the-tim-ferriss-show-peter-thiel.html</guid>
</item>
<item>
    <title>The Tim Ferriss Show Interviews Kevin Kelly</title>
    <link>http://blog.ssanj.net/posts/2014-09-25-the-tim-ferriss-show-kevin-kelly.html</link>
    <description><![CDATA[<p>Some interesting ideas from <a href="http://fourhourworkweek.com/blog">The Tim Ferriss Show’s</a> interview with <a href="http://kk.org">Kevin Kelly</a>:</p>
<ol style="list-style-type: decimal">
<li>Find out what you think by writing as opposed to thinking about something and then writing it down.</li>
<li>Find your “voice” by writing like you would an email to a friend.</li>
<li>What are you doing that no one else can?
<ul>
<li>If a lot of people can do what you do then go do something only you can do.</li>
</ul></li>
<li>You can’t purchase innovation. You can only buy solutions.
<ul>
<li>Successful companies and successful people generally try to solve problems with money.</li>
<li>If you could purchase innovations, all the big companies would just purchase them.</li>
<li>Innovation is more suited to startups than large enterprises.</li>
</ul></li>
<li>If you had 6 months to live what would you do?</li>
<li>If you had a billion dollars what would you do?</li>
<li>When you think about the future question what would happen if the assumptions we hold as true today didn’t exist? Eg. What if Moore’s law didn’t hold in the future?</li>
<li>Choose your technology as opposed to blindly using it.</li>
<li>Only do the ideas you can’t give away and you can’t kill. (They keep coming back)</li>
<li>Is it better to optimize your strengths or to invest into the unknown, into places where you’re weak? (creator’s dilemma or innovator’s dilemma)</li>
</ol>
<p>If you want more insights into the interview hit up the <a href="http://fourhourworkweek.com/2014/08/29/kevin-kelly">Podcast</a> or download the full <a href="https://fhww.files.wordpress.com/2014/08/kevinkelly-timferrissshowtranscript.docx">transcript</a>.</p>]]></description>
    <pubDate>Thu, 25 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-09-25-the-tim-ferriss-show-kevin-kelly.html</guid>
</item>
<item>
    <title>A Simple Reader Monad Example</title>
    <link>http://blog.ssanj.net/posts/2014-09-23-A-Simple-Reader-Monad-Example.html</link>
    <description><![CDATA[<p>What is a Reader Monad?</p>
<p>The <a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Reader.html">Reader Monad</a> works within the context of a shared environment. But what does that mean? Say you needed some shared object to execute a bunch of functions. An example could be that you need a database connection in every query function you execute. Or it could be some configuration options read from a file that are needed across a number of functions.</p>
<p>When trying to learn about the Reader Monad I’ve found most examples are convoluted or unnecessarily long. I hope to change that by providing a simple example that you can try out without too much head-spinning.</p>
<p>The Reader Monad is defined as:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Reader</span> r <span class="fu">=</span> <span class="dt">ReaderT</span> r <span class="dt">Identity</span></code></pre>
<p>One of the time-consuming things about learning the Reader Monad is that it is defined in terms of the ReaderT transformer (which is also a Monad). So now you have to learn multiple monads just to understand the Reader Monad. Annoying.</p>
<p>Let’s ignore the ReaderT transformer for now and assume that Reader is defined as:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Reader</span> r a</code></pre>
<p>where r is some “environment” and a is some value you create from that environment. And thanks to the type alias above you can just about do that.</p>
<p>Because Reader is a Monad we can do stuff like this:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Reader</span>

<span class="kw">let</span> r1 <span class="fu">=</span> return <span class="dv">5</span><span class="ot"> ::</span> <span class="dt">Reader</span> <span class="dt">String</span> <span class="dt">Int</span></code></pre>
<p>We have created a simple Reader using the Monad’s <strong>return</strong> function.</p>
<p>If we check the type of r1:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">:</span>t r1
<span class="ot">r1 ::</span> <span class="dt">Reader</span> <span class="dt">String</span> <span class="dt">Int</span></code></pre>
<p>We see that we have created a Reader that takes in a String and returns an Int. The String is the “environment” of the Reader. So how can we get the Int value out of the reader? By running it of course! We can use the <strong>runReader</strong> function to do that:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(runReader r1) <span class="st">&quot;this is your environment&quot;</span>
<span class="dv">5</span></code></pre>
<p><strong>runReader</strong> is defined as:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">runReader ::</span> <span class="dt">Reader</span> r a <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> a</code></pre>
<p>So <strong>runReader</strong> takes in a Reader and an environment (<strong>r</strong>) and returns a value (<strong>a</strong>).</p>
<p><em>Now notice that we didn’t really do anything with the environment supplied to us.</em></p>
<p>What if we had a bunch of Readers and we wanted to <strong>bind</strong> across them?</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Reader</span>

<span class="ot">tom ::</span> <span class="dt">Reader</span> <span class="dt">String</span> <span class="dt">String</span>
tom <span class="fu">=</span> <span class="kw">do</span>
    env <span class="ot">&lt;-</span> ask <span class="co">-- gives you the environment which in this case is a String</span>
    return (env <span class="fu">++</span> <span class="st">&quot; This is Tom.&quot;</span>)

<span class="ot">jerry ::</span> <span class="dt">Reader</span> <span class="dt">String</span> <span class="dt">String</span>
jerry <span class="fu">=</span> <span class="kw">do</span>
  env <span class="ot">&lt;-</span> ask
  return (env <span class="fu">++</span> <span class="st">&quot; This is Jerry.&quot;</span>)

<span class="ot">tomAndJerry ::</span> <span class="dt">Reader</span> <span class="dt">String</span> <span class="dt">String</span>
tomAndJerry <span class="fu">=</span> <span class="kw">do</span>
    t <span class="ot">&lt;-</span> tom
    j <span class="ot">&lt;-</span> jerry
    return (t <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span> j)

<span class="ot">runJerryRun ::</span> <span class="dt">String</span>
runJerryRun <span class="fu">=</span> (runReader tomAndJerry) <span class="st">&quot;Who is this?&quot;</span></code></pre>
<p>The ask function is defined on <a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Reader.html#t:MonadReader">MonadReader</a>.</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">MonadReader</span> r m <span class="fu">|</span> m <span class="ot">-&gt;</span> r <span class="kw">where</span></code></pre>
<p>Let’s ignore MonadReader for now and focus on the definition of the ask function:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">ask ::</span> m r</code></pre>
<p>Basically the above gives you a Reader Monad with the environment in it. So if you need access to the environment you ask for it. :)</p>
<p>In the <strong>tom</strong>, <strong>jerry</strong> and <strong>tomAndJerry</strong> functions, we are working within the context of the Reader Monad. That allows us to <strong>bind</strong> to the environment within the Reader. It also means that we need to <strong>return</strong> all values within a new Reader as well.</p>
<p>The <strong>tomAndJerry</strong> function binds to values from each Reader and then returns them combined in another Reader. We then run the whole lot in the <strong>runJerryRun</strong> function with the help of <strong>runReader</strong> and get the following output:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Who</span> is this<span class="fu">?</span> <span class="dt">This</span> is <span class="dt">Tom</span><span class="fu">.</span>
<span class="dt">Who</span> is this<span class="fu">?</span> <span class="dt">This</span> is <span class="dt">Jerry</span><span class="fu">.</span></code></pre>
<p>I hope this simple example is useful in getting you started in using and thinking about the Reader Monad.</p>]]></description>
    <pubDate>Tue, 23 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-09-23-A-Simple-Reader-Monad-Example.html</guid>
</item>
<item>
    <title>Spend your Time Better</title>
    <link>http://blog.ssanj.net/posts/2014-09-18-spend-your-time-better.html</link>
    <description><![CDATA[<p>Sometimes as developers, when we see a problem, we immediately think up a technical solution. We get all excited. We are eager to start coding. We dream about how marvelous it will be. I’ll use “this” technology or “that” methodology we think. It’s going to be great!</p>
<p>But most of the time there are easier and simpler ways to solve the problem.</p>
<p>Before you begin your task ask yourself “Is this the most valuable use of my time?”. If the answer is “No”, then go do something more valuable.</p>
<p>Some other good questions to ask yourself before starting any work:</p>
<p>“Why am I implementing this?”</p>
<p>“Is it necessary?”</p>
<p>“Is there an easier way to solve this?”</p>
<p>“How can I get the same results by not building this?”</p>
<p>In the end these questions might prevent you from building anything at all. This is a good thing as it gives you more time to work on things that are valuable.</p>]]></description>
    <pubDate>Thu, 18 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-09-18-spend-your-time-better.html</guid>
</item>
<item>
    <title>Define your Success Criteria First</title>
    <link>http://blog.ssanj.net/posts/2014-09-18-define-your-success-criteria-first.html</link>
    <description><![CDATA[<p>Sometimes when we are developing something, we have a hazy idea of what “done” is. “It has to do this” or “It has to do that”. Once we complete our work it looks like “success”. But there’s no way to know for sure unless we defined our success criteria before we started work. It’s easy to get lost in <a href="http://techcrunch.com/2011/07/30/vanity-metrics/">vanity metrics</a>.</p>
<p>Once you know what your real goals are, they are much easier to hit.</p>]]></description>
    <pubDate>Thu, 18 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-09-18-define-your-success-criteria-first.html</guid>
</item>
<item>
    <title>The Simplest thing that Works</title>
    <link>http://blog.ssanj.net/posts/2014-09-14-the-simplest-thing-that-works.html</link>
    <description><![CDATA[<p>When faced with a complex task it can be easy to get overwhelmed. This can lead to “analysis-paralysis” where your mind is constantly trying to figure out every possible outcome or variation. It can often be easier to focus on one detail and get that working as simply as possible. Maybe you only implement the “happy path”. Maybe you only implement the path that fails. Either way pick the easiest solution to implement first. Get that working. Then build on your success and tackle the next part.</p>]]></description>
    <pubDate>Sun, 14 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-09-14-the-simplest-thing-that-works.html</guid>
</item>

    </channel> 
</rss>

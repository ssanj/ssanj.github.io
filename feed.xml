<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 30 Apr 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Seven Secrets to Turbocharge your Brain</title>
    <link>http://blog.ssanj.net/posts/2017-04-30-seven-secrets-to-turbocharge-your-brain.html</link>
    <description><![CDATA[<p>In her <a href="https://www.youtube.com/watch?v=uUL5o-1Yawo">Seven secrets to turbocharge your brain</a> TED talk, Sandra Chapman mentions the following habits make the most of your brain power:</p>
<div class="figure">
<a href="../images/turbocharge-your-brian-sarah-chapman-ted.png"><img src="../images/turbocharge-your-brian-sarah-chapman-ted.png" alt="caption"></a>
<p class="caption">
Turbocharge Your Brain
</p>
</div>]]></description>
    <pubDate>Sun, 30 Apr 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-04-30-seven-secrets-to-turbocharge-your-brain.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Marie Forleo Interviews Seth Godin</title>
    <link>http://blog.ssanj.net/posts/2017-04-22-marie-forleo-seth-godin.html</link>
    <description><![CDATA[<p>Some interesting ideas from <a href="https://www.youtube.com/watch?v=AtfvZ_KOiZY">Marie Forleo’s interview with Seth Godin</a>:</p>
<div>
<div class="quote">
If not this moment, when? This is the right moment
</div>
<div class="attribution">
Seth Godin
</div>
</div>
<ol style="list-style-type: decimal">
<li>Your life doesn’t get more sensational when you have more followers on twitter. That’s not what you ought to be keeping score of.</li>
<li>Does this interaction leave behind a trail that I am proud of? Does the interaction make me glad that I did it and want to do it again?</li>
<li>There is no prize for originality. You should steal other peoples’ ideas.</li>
<li>Choose what matters which aligns with who you want to be.</li>
<li>On blogging - If day after day, week after week you leave this trail behind of thoughtful examination of your world, you can’t help but get better at what you seek to do.</li>
<li>You gain trust and permission to talk to people by showing up in a way that you’d want someone to show up for you.</li>
<li>When you take scarcity away everything changes (Eg. The Internet with music, tv, books).</li>
<li>Intentionally seek out things you maybe wrong about (Find a topic you might be sure about and take an opposite stance about why you might be wrong).</li>
<li>How to be more productive per minute - Have an instinct to ship; not to be perfect, to polish, to justify that you are not shipping.</li>
<li>Most people hesitate to ship, not because they are not ready, but because they are afraid.</li>
<li>Press the buzzer before you are sure you know the answer. You have to be good at buzzer management.</li>
<li>What am I not going to do so that I can do something else (Opportunity cost).</li>
<li>We have to acknowledge we have finite resources, finite time, finite connection. How will we use them to produce outcomes we are proud of?</li>
<li><p>Don’t be a wondering generality. Be a meaningful specific.</p>
<div>
<div class="quote">
Unless you’re 4-years-old, if you loose at Monopoly I think you realise it is not personal. It was a game. You didn’t get the rolls you needed, maybe you made a couple of strategy mistakes, but you can play again tomorrow. It’s not about you, don’t have a tantrum, don’t turn the board over and don’t beat yourself up. Why don’t we take that adult mindset and apply it to other things?
</div>
<div class="attribution">
Seth Godin
</div>
</div></li>
<li>Isn’t our goal to be better at the game?</li>
<li>We can be mindful, we can be present, we can breathe and say “That’s interesting”. And that answer is so much better than freaking out over what every small failure means.</li>
<li><p>Don’t act like failure is fatal. It isn’t.</p>
<div>
<div class="quote">
It should be called Kickfinisher.
</div>
<div class="attribution">
Seth Godin
</div>
</div></li>
<li><p>It wasn’t the big launch, it’s the big finish.</p>
<div>
<div class="quote">
The long way is the shortcut.
</div>
<div class="attribution">
Seth Godin
</div>
</div></li>
<li>Raising Free Range Kids means teaching kids to fail at solving interesting problems, because that’s the only way you ever get good at solving interesting problems.</li>
<li>How to measure your success - Will people miss you if you are gone?</li>
<li><p>Permission is the privilege of being looked forward to and being missed if you were gone.</p>
<div>
<div class="quote">
Our goal isn’t to touch everyone. Our goal is to change someone; just one person. If you get good at that, do 5, then do 100. But stop worrying about everyone. Everyone doesn’t matter.
</div>
<div class="attribution">
Seth Godin
</div>
</div></li>
</ol>]]></description>
    <pubDate>Sat, 22 Apr 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-04-22-marie-forleo-seth-godin.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How does ScalaCheck Shrinking Work&#63;</title>
    <link>http://blog.ssanj.net/posts/2017-04-12-how-does-scalacheck-shrinking-work.html</link>
    <description><![CDATA[<p>There are a few of different concepts to grapple with when <a href="https://github.com/ssanj/intro-to-property-based-testing">learning property-based testing</a> (PBT). Generating random inputs, writing properties and shrinking failures are some of them. Shrinking seems to be one of those difficult concepts for people to get their head around.</p>
<p>There’s a nice introduction to how <a href="https://hackage.haskell.org/package/QuickCheck">QuickCheck</a> shrinks failing input in <a href="https://skillsmatter.com/skillscasts/6432-the-lazy-programmers-guide-to-writing-1000s-of-tests-an-introduction-to-property-based-testing">The lazy programmer’s guide to writing 1000’s of tests</a> starting at around the 22m:24s mark. While the above presentation depicts how QuickCheck works, I was curious to see if <a href="http://www.scalacheck.org/">ScalaCheck</a> also followed the same process for Shrinking.</p>
<p>So what is Shrinking? Shrinking is the process by which a PBT framework tries to reduce the failing random input to a property to its <strong>minimal</strong> value. And it does this so that we as programmers don’t have to do much further investigation to find the “simplest” failing input.</p>
<p>What does <em>minimal</em> mean?</p>
<p>That depends on how you want to reduce the supplied input to the simplest possible value that would still fail the property.</p>
<p>Let’s have a look at an example using ScalaCheck to make this a little clearer.</p>
<p>Let’s create a property that expects any integer value that is greater than a hundred and twenty to be even or less than a hundred and eleven and be odd:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> p1 = Prop.<span class="fu">forAll</span>((n: Int) =&gt; n &gt; <span class="dv">120</span> &amp;&amp; n % <span class="dv">2</span> == <span class="dv">0</span> || n &lt; <span class="dv">111</span> &amp;&amp; n % <span class="dv">2</span> != <span class="dv">0</span> )</code></pre></div>
<p>This property fails when run:</p>
<pre class="command scrollx"><code>p1.check
! Falsified after 5 passed tests.
&gt; ARG_0: 0
&gt; ARG_0_ORIGINAL: 2147483647</code></pre>
<p>The initial failing input (before shrinking) is named <strong>ARG_0_ORIGINAL</strong> and has a value of 2147483647. ScalaCheck then tries to simplify this input value to something that would still fail the property. The final shrunk value is named <strong>ARG_0</strong> in this case and has a value of 0.</p>
<p>How did ScalaCheck come up with the value for <strong>ARG_0</strong> ?</p>
<p>It would be nice if ScalaCheck could explain how it shrunk that Int value supplied to our property. Unfortunately there doesn’t seem to be an easy way to get that to happen and we’ll have to find other ways of making ScalaCheck talk.</p>
<p>Let’s start our investigation by grabbing the default instance for shrinking Ints:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> intShrink = implicitly[Shrink[Int]]</code></pre></div>
<p>Once we have the Shrink instance we can shrink the input value we received in the failing property (2147483647):</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">intShrink.<span class="fu">shrink</span>(<span class="dv">2147483647</span>).<span class="fu">toList</span>
List[Int] = List(<span class="dv">1073741823</span>, -<span class="dv">1073741823</span>, <span class="dv">536870911</span>, -<span class="dv">536870911</span>, <span class="dv">268435455</span>, -<span class="dv">268435455</span>, <span class="dv">134217727</span>, -<span class="dv">134217727</span>, <span class="dv">67108863</span>, -<span class="dv">67108863</span>, <span class="dv">33554431</span>, -<span class="dv">33554431</span>, <span class="dv">16777215</span>, -<span class="dv">16777215</span>, <span class="dv">8388607</span>, -<span class="dv">8388607</span>, <span class="dv">4194303</span>, -<span class="dv">4194303</span>, <span class="dv">2097151</span>, -<span class="dv">2097151</span>, <span class="dv">1048575</span>, -<span class="dv">1048575</span>, <span class="dv">524287</span>, -<span class="dv">524287</span>, <span class="dv">262143</span>, -<span class="dv">262143</span>, <span class="dv">131071</span>, -<span class="dv">131071</span>, <span class="dv">65535</span>, -<span class="dv">65535</span>, <span class="dv">32767</span>, -<span class="dv">32767</span>, <span class="dv">16383</span>, -<span class="dv">16383</span>, <span class="dv">8191</span>, -<span class="dv">8191</span>, <span class="dv">4095</span>, -<span class="dv">4095</span>, <span class="dv">2047</span>, -<span class="dv">2047</span>, <span class="dv">1023</span>, -<span class="dv">1023</span>, <span class="dv">511</span>, -<span class="dv">511</span>, <span class="dv">255</span>, -<span class="dv">255</span>, <span class="dv">127</span>, -<span class="dv">127</span>, <span class="dv">63</span>, -<span class="dv">63</span>, <span class="dv">31</span>, -<span class="dv">31</span>, <span class="dv">15</span>, -<span class="dv">15</span>, <span class="dv">7</span>, -<span class="dv">7</span>, <span class="dv">3</span>, -<span class="dv">3</span>, <span class="dv">1</span>, -<span class="dv">1</span>, <span class="dv">0</span>)</code></pre></div>
<p>It’s too hard to see any patterns forming when shrinking a value as large as 2147483647. There are too many values returned by the shrinker.</p>
<p>(<em>We use <strong>toList</strong> here to eagerly evaluate the (lazy) Stream return by the shrinker</em>)</p>
<p>Let’s try shrinking something a little smaller that would still fail the property:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">intShrink.<span class="fu">shrink</span>(<span class="dv">110</span>).<span class="fu">toList</span>
List[Int] = List(<span class="dv">55</span>, -<span class="dv">55</span>, <span class="dv">27</span>, -<span class="dv">27</span>, <span class="dv">13</span>, -<span class="dv">13</span>, <span class="dv">6</span>, -<span class="dv">6</span>, <span class="dv">3</span>, -<span class="dv">3</span>, <span class="dv">1</span>, -<span class="dv">1</span>, <span class="dv">0</span>)</code></pre></div>
<p>Now that’s more manageable. We can see that the generated Stream of simpler values seems to follow this algorithm:</p>
<ol style="list-style-type: decimal">
<li>Divide the input by 2 to get a shrunk value.</li>
<li>Add the shrunk value to result Stream.</li>
<li>Flip the sign of the shrunk value and add it to the Stream after [2].</li>
<li>Repeat step 1 with the shrunk value as input until there are no further shrinks or you hit zero.</li>
</ol>
<p>If we look at the source for the <a href="https://github.com/rickynils/scalacheck/blob/99c0123ef8f53b2920c325555633a36a48c0f1e7/src/main/scala/org/scalacheck/Shrink.scala#L235">default Shrink[Int] instance</a> we can see that it is doing what we expect with some special treatment when the input is zero:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">final</span> <span class="kw">class</span> ShrinkIntegral[T](<span class="kw">implicit</span> ev: Integral[T]) <span class="kw">extends</span> Shrink[T] {
  <span class="kw">import</span> ev.{ equiv, fromInt, zero, minus, times, quot }
  <span class="kw">val</span> minusOne = <span class="fu">fromInt</span>(-<span class="dv">1</span>)
  <span class="kw">val</span> two = <span class="fu">fromInt</span>(<span class="dv">2</span>)
  <span class="co">// assumes x is non-zero</span>
  <span class="kw">private</span> <span class="kw">def</span> <span class="fu">halves</span>(x: T): Stream[T] = {
    <span class="kw">val</span> q = <span class="fu">quot</span>(x, two)
    <span class="kw">if</span> (<span class="fu">equiv</span>(q, zero)) Stream(zero)
    <span class="kw">else</span> q #:: <span class="fu">times</span>(q, minusOne) #:: <span class="fu">halves</span>(q)
  }
  <span class="kw">def</span> <span class="fu">shrink</span>(x: T): Stream[T] =
    <span class="kw">if</span> (<span class="fu">equiv</span>(x, zero)) Stream.<span class="fu">empty</span>[T] <span class="kw">else</span> <span class="fu">halves</span>(x)
}</code></pre></div>
<p>From the shrink Stream for Ints, it looks like ScalaCheck keeps trying each possible shrunk value as an input to the failing property until it hits the last value (zero) and then returns that.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Stream(<span class="dv">55</span>, -<span class="dv">55</span>, <span class="dv">27</span>, -<span class="dv">27</span>, <span class="dv">13</span>, -<span class="dv">13</span>, <span class="dv">6</span>, -<span class="dv">6</span>, <span class="dv">3</span>, -<span class="dv">3</span>, <span class="dv">1</span>, -<span class="dv">1</span>, <span class="dv">0</span>) <span class="co">//looks like each value is tried in turn until 0</span></code></pre></div>
<p>This is not exactly the case, so let’s try and find a way to get ScalaCheck to explain how it actually does its shrinking.</p>
<p>One way to get at the information we need is to write our own <a href="https://github.com/rickynils/scalacheck/blob/99c0123ef8f53b2920c325555633a36a48c0f1e7/src/main/scala/org/scalacheck/Shrink.scala#L18">Shrink</a> instance that writes out the following:</p>
<ol style="list-style-type: decimal">
<li>The input value to shrinker</li>
<li>The shrunk values generated by the shrinker</li>
</ol>
<p>It would also be handy to be able to wrap any existing Shrink instance and have the <em>explainer</em> printout how the wrapped Shrinker works.</p>
<p>Here’s a first pass at writing our own Shrink explainer:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">  <span class="kw">def</span> explain[T: Shrink] = Shrink[T] { input =&gt;
    <span class="fu">println</span>(s<span class="st">&quot;input to shrink: $input&quot;</span>)
    <span class="kw">val</span> wrappedShrinker = implicitly[Shrink[T]]
    <span class="kw">val</span> shrunkValues = wrappedShrinker.<span class="fu">shrink</span>(input)
    <span class="co">//this eagerly evaluates the Stream of values. It could blow up on very large Streams or expensive computations.</span>
    <span class="fu">println</span>(s<span class="st">&quot;shrunk values: ${shrunkValues.mkString(&quot;</span>,<span class="st">&quot;)}&quot;</span>)
    shrunkValues
  }</code></pre></div>
<p>Let’s also write a simple <a href="https://github.com/rickynils/scalacheck/blob/99c0123ef8f53b2920c325555633a36a48c0f1e7/src/main/scala/org/scalacheck/Gen.scala">Generator</a> to reduce our inputs to a much smaller range of between a hundred and a hundred and fifty:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Gen.<span class="fu">choose</span>(<span class="dv">100</span>, <span class="dv">150</span>)</code></pre></div>
<p>Now let’s use our Generator and our Shrink explainer in our property:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> p2 = Prop.<span class="fu">forAll</span>(Gen.<span class="fu">choose</span>(<span class="dv">100</span>, <span class="dv">150</span>))((n: Int) =&gt; n &gt; <span class="dv">120</span> &amp;&amp; n % <span class="dv">2</span> == <span class="dv">0</span> || n &lt; <span class="dv">111</span> &amp;&amp; n % <span class="dv">2</span> != <span class="dv">0</span> )(implicitly,  explain[Int], implicitly)</code></pre></div>
<p>The use of <em>implicitly</em> might be a bit confusing if you’ve never <a href="http://stackoverflow.com/questions/22552985/scala-passing-one-implicit-parameter-implicitly-and-the-other-explicitly-is-it">seen it before</a>. Basically it uses the default implicit values for the parameters at the specified positions so you don’t have to explicitly pass them in yourself. We can now just supply our Shrink[Int] instance via the <strong>explain</strong> method without having to worry about any of the other parameters.</p>
<p>Now we have a property that can be explained. Let’s run it and see how the shrinking actually works:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">p2.<span class="fu">check</span>
[<span class="dv">1</span>]  input to shrink: <span class="dv">133</span>
[<span class="dv">2</span>]  shrunk values: <span class="dv">66</span>,-<span class="dv">66</span>,<span class="dv">33</span>,-<span class="dv">33</span>,<span class="dv">16</span>,-<span class="dv">16</span>,<span class="dv">8</span>,-<span class="dv">8</span>,<span class="dv">4</span>,-<span class="dv">4</span>,<span class="dv">2</span>,-<span class="dv">2</span>,<span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">3</span>]  input to shrink: <span class="dv">66</span>
[<span class="dv">4</span>]  shrunk values: <span class="dv">33</span>,-<span class="dv">33</span>,<span class="dv">16</span>,-<span class="dv">16</span>,<span class="dv">8</span>,-<span class="dv">8</span>,<span class="dv">4</span>,-<span class="dv">4</span>,<span class="dv">2</span>,-<span class="dv">2</span>,<span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">5</span>]  input to shrink: <span class="dv">16</span>
[<span class="dv">6</span>]  shrunk values: <span class="dv">8</span>,-<span class="dv">8</span>,<span class="dv">4</span>,-<span class="dv">4</span>,<span class="dv">2</span>,-<span class="dv">2</span>,<span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">7</span>]  input to shrink: <span class="dv">8</span>
[<span class="dv">8</span>]  shrunk values: <span class="dv">4</span>,-<span class="dv">4</span>,<span class="dv">2</span>,-<span class="dv">2</span>,<span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">9</span>]  input to shrink: <span class="dv">4</span>
[<span class="dv">10</span>] shrunk values: <span class="dv">2</span>,-<span class="dv">2</span>,<span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">11</span>] input to shrink: <span class="dv">2</span>
[<span class="dv">12</span>] shrunk values: <span class="dv">1</span>,-<span class="dv">1</span>,<span class="dv">0</span>
[<span class="dv">13</span>] input to shrink: <span class="dv">0</span>
shrunk values:
! Falsified after <span class="dv">2</span> passed tests.
&gt; ARG_0: <span class="dv">0</span>
&gt; ARG_0_ORIGINAL: <span class="dv">133</span></code></pre></div>
<p>For <strong>p2</strong> the original failing input is 133 and it is then shrunk down to 0. Let’s follow the shrink process from the top:</p>
<ol style="list-style-type: decimal">
<li>The property fails for a value of 133</li>
<li>The shrinker gets the value of 133 for shrinking [1]</li>
<li>The shrinker shrinks the value of 133 and generates a Stream of shrunk values starting with 66 [2]</li>
<li>The property is run with a value of 66 and fails</li>
<li>The shrinker gets the value of 66 for shrinking [3]</li>
<li>The shrinker shrinks the value of 66 and generates a Stream of shrunk values starting with 33 [4]</li>
<li>The property is run with a value of 33 and passes</li>
<li>The shrinker generates a value of -33 [4]</li>
<li>The property is run with a value of -33 and passes</li>
<li>The shrinker generates a value of 16 [4]</li>
<li>The property is run with a value of 16 and fails</li>
<li>The shrinker gets the value of 16 for shrinking [5]</li>
<li>The shrinker shrinks the value of 16 and generates a Stream of shrunk values starting with 8 [6]</li>
<li>The property is run with a value of 8 and fails</li>
<li>The shrinker gets the value of 8 for shrinking [7]</li>
<li>The shrinker shrinks the value of 8 and generates a Stream of shrunk values starting with 4 [8]</li>
<li>The property is run with a value of 4 and fails</li>
<li>The shrinker gets the value of 4 for shrinking [9]</li>
<li>The shrinker shrinks the value of 4 and generates a Stream of shrunk values starting with 2 [10]</li>
<li>The property is run with a value of 2 and fails</li>
<li>The shrinker gets the value of 2 for shrinking [11]</li>
<li>The shrinker shrinks the value of 2 and generates a Stream of shrunk values starting with 1 [12]</li>
<li>The property is run with a value of 1 and passes</li>
<li>The shrinker generates a value of -1 [12]</li>
<li>The property is run with a value of -1 and passes</li>
<li>The shrinker generates a value of 0 [12]</li>
<li>The property is run with a value of 0 and fails</li>
<li>The shrinker gets the value of 0 for shrinking [13]</li>
<li>The shrinker shrinks the value of 0 and returns an empty Stream indicating there are no more shrinks</li>
<li>The shrinker then returns the value of 0 as the “simplest” input that will fail the property as it can’t be further reduced</li>
</ol>
<p>So we finally we have much clear idea about how all this “shrinking stuff” works! Here’s a simple diagram depicting how a shrinker works.</p>
<div class="figure">
<a href="../images/pbt_how-does-scalacheck-shrinking-work.png"><img src="../images/pbt_how-does-scalacheck-shrinking-work.png" alt="caption"></a>
<p class="caption">
How Shrinking Works
</p>
</div>
<p>After a property fails, the failing input is used to generate a Stream of shrunk values. Each value is then fed into the property again until one of the shrunk values fails or the end of the Stream is reached. If the end of the Stream is reached, we can’t shrink the failing input any more so it is return without simplification.</p>
<p>If a shrunk value fails the property again, the shrunk value is then shrunk again and another shrink Stream is created from it. It keeps progressing this way until the shrinker can’t shrink any further (the end of the Stream is reached) or all the shrunk values pass the property. In either case last input value to the shrinker is returned (which is the simplest failing input).</p>
<p>Hopefully this sheds some light on the shrinking process used by ScalaCheck.</p>]]></description>
    <pubDate>Wed, 12 Apr 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-04-12-how-does-scalacheck-shrinking-work.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Die Empty - Todd Henry</title>
    <link>http://blog.ssanj.net/posts/2017-01-15-die-empty-todd-henry.html</link>
    <description><![CDATA[<p>Ideas from the book <a href="https://www.amazon.com/Die-Empty-Unleash-Your-Every/dp/1591845890">Die Empty by Todd Henry</a>.</p>
<ol style="list-style-type: decimal">
<li>Ask yourself: “Did the work I did today really matter?”</li>
<li>You are in a better position to make a contribution if you align work around your values.</li>
<li>The love of comfort and security is often the enemy of greatness.</li>
<li>Your legacy is built one decision at a time.</li>
</ol>
<div>
<div class="quote">
The great problems we see in the world today will not be solved by people functioning at half capacity, cranking out work they don’t care about in order to buy more things that will eventually rust or rot.
</div>
</div>
<ol start="5" style="list-style-type: decimal">
<li>The key to long-term success is a willingness to disrupt your own comfort for the sake of continued growth.</li>
<li>Every brilliant achievement begins with a deep ineffable knowledge that something great could happen, be brought into existence or change the status quo.</li>
<li>No one charts a course for mediocrity, but it’s still a destination of choice.</li>
</ol>
<div>
<div class="quote">
The seeds of tomorrow’s brilliance are planted in the soil of today’s activity.
</div>
<ol start="8" style="list-style-type: decimal">
<li>Maintain a level of disciplined curiosity by staying in touch with your deeper questions and practising divergent problem solving.</li>
<li>You must have an accurate sense of your skills, weaknesses and core drivers.</li>
<li>When you isolate yourself from other people, you cut yourself off from the most valuable opportunities to grow and collaborate.</li>
</ol>
<div>
<div class="quote">
What can I add?
</div>
</div>
</div>
<ol start="11" style="list-style-type: decimal">
<li>Productive passion motivates you and is also beneficial to others.</li>
<li>Where do you feel a desire to step in on behalf of those who are suffering in order to bear part of their burden or rectify a wrong?</li>
<li>Are there specific problems you consistently gravitate towards? Are there issues that drive others to come to you for help for which you are uniquely equipped to handle?</li>
<li>Where do you consistently see possibilities other overlook? Where are you optimistic even in the face of overwhelming odds, where you continue to work long after others have given up?</li>
<li>What are you aspiring toward, on or behalf of others? What hope do you have for creating change, and how can you work in order to bring it about?</li>
</ol>
<div>
<div class="quote">
What will you stand for today? What will you refuse to compromise on, no matter what? What will define your terms of engagement?
</div>
</div>
<ol start="16" style="list-style-type: decimal">
<li>What do you know you should be doing, but have been ignoring? Make a list of the things you know, deep down, that you should be doing but haven’t taken action on.</li>
<li>To avoid aimlessness you have to stand for something.</li>
<li>Your unfinished projects, halfhearted efforts or unreconciled relationships should be either made a priority or immediately closed.</li>
<li>Ask yourself: “Why?”, “What if …”, “How?”</li>
<li>Give yourself permission to not know things.</li>
<li>People who seek wisdom are not threatened by new or disconfirming information</li>
<li>Before learning or experiencing something new consider the questions you are hoping it will answer. Use those questions as a filter to guide what you learn.</li>
<li>Keep a list of questions that you haven’t been able to answer. Review them regularly.</li>
<li>Create a commonplace book - A collection of quotes, recipes and other items centred around a theme, designed to aid in recalling important information.</li>
<li>Leave time at the end of reading or study to reflect on what you’ve learned and how it relates to your work or life.</li>
<li>Learn about insights in an unrelated industry. See how you can apply those insights to your own industry.</li>
</ol>
<div>
<div class="quote">
Prototyping is problem solving.
</div>
</div>
<ol start="27" style="list-style-type: decimal">
<li>Prototyping allows you to make progress before you even know what progress looks like.</li>
<li>Is there something you could build or sketch that would give you a fresh perspective? Are there ways you could play around with the problem, break it apart, and recombine the pieces into something new?</li>
<li>Find a physical place where your only job is to pursue the things that evoke your sense of wonder.</li>
<li>Refuse to settle for status quo ideas and relentlessly embrace the pursuit of great ones.</li>
<li>When you have clear boundaries to work within, you can feel more comfortable asking extremely divergent questions and exploring initially irrelevant possibilities.</li>
<li>When you’re stuck on a problem ask yourself: “What does this want to become?” “What is it aspiring to be?” “What would be the ultimate end, if we were to perfectly solve this problem?”</li>
<li>Ask better questions such as:
<ul>
<li>“What am I really trying to accomplish here?”</li>
<li>“What is this problem like?” (Use Metaphors and parallel problems)</li>
<li>“What’s inspiring me right now?” (Can you use those same motivators here?)</li>
<li>“Where do I feel the most constrained?” (what are the bottlenecks? Can you remove them?)</li>
<li>Where do I feel out of control?&quot;</li>
<li>What do I not understand?&quot;</li>
</ul></li>
<li>Pay attention to where you mind naturally wants to go.</li>
<li>Ask yourself “What do I want to learn today?” each morning and “What did I learn today?” each evening.</li>
<li>Types of Goals:
<ul>
<li>Step Goal: What will I do today no matter what? Small, measured steps that will help you maintain forward motion. Eg. Writing everyday</li>
<li>Sprint Goal: A series of step goals extended over a period of time. You sprint for a week or two, then take a break then recommence sprinting. Allows you to stretch your endurance and make significant inroads into your stretch goals. Eg. Writing a chapter of a book.</li>
<li>Stretch Goal: Something big that you want to achieve. Should be measurable and under your control.</li>
</ul></li>
<li>What is your objective for today? How will you know that today was a success?</li>
<li>Keep a daily record of learning and new insights that might help you tomorrow.</li>
<li>Is there any area of your life where you are staying safely in your comfort zone rather than stretching yourself to grow? If so what are you going to do about it?</li>
<li>Areas where you feel resistance at work are often areas where your true work lies.</li>
<li>Make a list of five people you admire. Are there any qualities they exhibit that intimidate you? Make of a list of those qualities. How can you begin cultivating them in your own life?</li>
<li>When something inspires you write down the context, the person who was involved, and any general thoughts you had at the moment. What did it inspire in you? What did it cause you to aspire to? What did it make you think about in your own work?</li>
<li>Read biographies of people you admire. Get to know their lives, the decisions they made and the obstacles they overcame on the road to success. Pay attention to their attributes that you would like to cultivate in your own life. Think about what you can apply from the lives of your heroes to your own work.</li>
<li>When you face a challenging problem consider how one of your heroes might have solved it.</li>
<li>Set aside time each day for reflection.</li>
<li>What would you change about how you engaged today?</li>
<li>Write words that describe how you would like to engage in your work.</li>
<li>If there a place in your life where you are overcomplicating your work out of a desire to make what produce appear more valuable?</li>
</ol>
<div>
<div class="quote">
Cultivate a service mindset. “What can I offer?”
</div>
</div>
<ol start="59" style="list-style-type: decimal">
<li>Write notes of encouragement to others.</li>
<li>Set aside some time regularly to play with ideas and toy with possibilities. Do not set any expectations for this time.</li>
</ol>
<div>
<div class="quote">
What do you already suspect to be true, but are ignoring because it seems impractical?
</div>
</div>
<ol start="51" style="list-style-type: decimal">
<li>Great work results when you stop doing only what you know you can do and instead begin pursuing what you believe you <em>might</em> be able to do with a little focused effort.</li>
<li>Ideas that seem simple to you might be profound to others.</li>
<li>Are you holding back insights or actions because they seem too obvious to you? Brilliant work doesn’t need to be complex.</li>
<li>Imitate others while you are trying to build your skills. After that take risks and experiment with your own form of expression.</li>
<li>Asks others around you how they feel about the work and take the time to consider how you feel about it as well.</li>
<li>If you stretch yourself to win smaller battles each day, you will find that you are making important progress on the large fight as well.</li>
<li>What have you been meaning to do but haven’t made the effort to work it into your daily routine?</li>
</ol>
<div>
<div class="quote">
You can’t do everything at once and hope to do it well.
</div>
</div>
<ol start="58" style="list-style-type: decimal">
<li>What needs to be removed from your lists today so that you can focus your attention on what’s most important?</li>
</ol>]]></description>
    <pubDate>Sun, 15 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2017-01-15-die-empty-todd-henry.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Navigate the Scaladoc Interface (2.10/2.11)</title>
    <link>http://blog.ssanj.net/posts/2016-10-20-how-to-navigate-scaladoc.html</link>
    <description><![CDATA[<p>It might be surprising to see a “how to” for navigating the <a href="http://docs.scala-lang.org/overviews/scaladoc/overview">Scaladoc</a> interface. Since I’ve started <a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">using Sublime for Scala development</a> I’ve come to heavily rely on the Scaladoc for any library I’m using. I’ve come across a few nuances that might be hard to notice at first glance. This post is my attempt to document those nuances and a little guide on how to be more effective in navigating the generated documentation.</p>
<p>The Scaladoc interface is teeming with features that don’t seem to have any documentation. We need documentation for our documentation system. How meta! That said, <a href="https://twitter.com/dickwall">Dick Wall</a> has recorded a screencast called <a href="http://docs.scala-lang.org/overviews/scaladoc/interface.html">Using the Scaladoc Interface</a> which you should definitely checkout.</p>
<p>This post will cover some of the features he highlights plus a few more.</p>
<ul>
<li><a href="#website-layout">Website Layout</a></li>
<li><a href="#searching">Searching</a></li>
<li><a href="#displaying-results">Displaying Results</a>
<ul>
<li><a href="#matched-content-area">Matched Content Area</a>
<ul>
<li><a href="#member-search-bar">Member Search Bar</a></li>
<li><a href="#member-definition-area">Member Definition Area</a>
<ul>
<li><a href="#type-members">1. Type Members</a></li>
<li><a href="#concrete-value-members">2. Concrete Value Members</a></li>
<li><a href="#abstract-value-members">3. Abstract Value Members</a></li>
<li><a href="#instance-constructors">4. Instance Constructors</a></li>
<li><a href="#implicit-value-members">5. Implicit Value Members</a></li>
<li><a href="#shadowed-implicit-value-members">6. Shadowed Implicit Value Members</a></li>
</ul></li>
</ul></li>
</ul></li>
<li><a href="#miscellaneous">Miscellaneous</a></li>
</ul>
<h1 id="website-layout">Website Layout</h1>
<p>The Scaladoc website is separated into 2 main windows:</p>
<ol style="list-style-type: decimal">
<li>The Search Window.</li>
<li>The Results Window.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_layout_panels.png" alt="Scaladoc Website Layout" />
<p class="caption">Scaladoc Website Layout</p>
</div>
<p>Clicking on the <em>Layout Toggle Button</em> (1) allows you to hide the <em>Search Window</em> and focus only on the <em>Results Window</em>. You can also drag the divider to change the window sizes.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_layout_toggle_button.png" alt="Layout Toggle Button" />
<p class="caption">Layout Toggle Button</p>
</div>
<p>These windows can be broadly subdivided into three main components:</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics.png" alt="Scaladoc Website Layout" />
<p class="caption">Scaladoc Website Layout</p>
</div>
<ol style="list-style-type: decimal">
<li>The <em>Entity Search Bar</em> on the top left. This allows you to search by top-level entities such as packages, classes, traits and objects. Nested or <a href="http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html">path-dependent types</a>, methods and variables (val and var) and any entity with symbolic characters in its name can’t be searched from here.</li>
<li>The <em>Search Results List</em> found just below the <em>Entity Search Bar</em>, which displays any matched results based your query.</li>
<li>The <em>Matched Content Area</em> in the <em>Results Window</em> displays a selected search result in more detail.</li>
</ol>
<p><strong>NB</strong>: <em>The names for the various areas mentioned above are my own. I have been unable to find any documentation on what these areas on the website are actually called. If you know the actual names of these areas in the interface, please let me know and I will update this post</em>.</p>
<p>This is a simplified view highlighting the main areas. We’ll go into detail about the other areas later.</p>
<h1 id="searching">Searching</h1>
<p>Searching is primarily done within the <em>Search Window</em>. To find an entity such as a class, you can type in the name of the class into the <em>Entity Search Bar</em> and the <em>Search Results List</em> will display only matching results, grouped by the packages they are in.</p>
<ol style="list-style-type: decimal">
<li>The search has both case-sensitive and case-insensitive functionalities. If you start the search with an uppercase letter, the search is case-sensitive from that point onwards. In the example below, we search for <strong>BitSet</strong> with the exact case and we get a number of matches (1). If we don’t use the correct case we get no matches (2).</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_entity_search_area_case_sensitive_match.png" alt="Matching on Case" />
<p class="caption">Matching on Case</p>
</div>
<p>If you keep all the letters lowercase, then the search is case-insensitive. In the example below, the search is all lowercase characters and results in the same matches as that of the exact case (1).</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_entity_search_area_case_insensitive_match.png" alt="Match with lowercase" />
<p class="caption">Match with lowercase</p>
</div>
<ol start="2" style="list-style-type: decimal">
<li>The search is a wildcard and will match any top-level entity name with that text in it, including packages.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_wildcard_search.png" alt="Wildcard Search" />
<p class="caption">Wildcard Search</p>
</div>
<ol start="3" style="list-style-type: decimal">
<li>You can also match on mnemonics of your class name. In the example below we use <strong>LHS</strong> to find <strong>LinkedHashSet</strong> class.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_camel_case_search.png" alt="Mnemonic Search" />
<p class="caption">Mnemonic Search</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li>If you search by entering a package path, the results will be filtered to include only the specified package and sub packages.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_package_path_search.png" alt="Filter by Package-Path" />
<p class="caption">Filter by Package-Path</p>
</div>
<ol start="5" style="list-style-type: decimal">
<li>You can also search by typing in the full package path to the entity.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_full_package_path.png" alt="Filter by Full Package-Path" />
<p class="caption">Filter by Full Package-Path</p>
</div>
<p>If you don’t want to type in the full package path to an entity, you can simply use the last subpackage of its package path along with the entity. In the example below we search for <strong>scala.collection.immutable.Seq</strong> by searching for <strong>immutable.Seq</strong>.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_package_path_subpackage_search.png" alt="Package-Path Shorter Filter" />
<p class="caption">Package-Path Shorter Filter</p>
</div>
<ol start="6" style="list-style-type: decimal">
<li>Clicking on the <strong>focus</strong> link on a package header in the <em>Search Results List</em> will constrain the search to only include entities within the focussed package.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_package_focus_button.png" alt="Package-Path Focus" />
<p class="caption">Package-Path Focus</p>
</div>
<p>In the example below we focus on <strong>scala.collection.immutable</strong> and then search for <strong>List</strong>. The results are limited to matches in the <strong>scala.collection.immutable</strong> package.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_package_focus.png" alt="Package-Path Filter" />
<p class="caption">Package-Path Filter</p>
</div>
<ol start="7" style="list-style-type: decimal">
<li>Clicking on the <strong>display packages only</strong> filter will only show packages in the <em>Search Results List</em>. If a search term is in the <em>Entity Search Bar</em>, then only packages matching the search term and packages with entities that match the search term will be displayed. <img src="/images/scaladoc_navigate/scaladoc_interface_basics_display_package_only_button.png" alt="Display Packages Only" /></li>
</ol>
<p>Clicking on the <strong>display all entities</strong> filter clears the package filter.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_display_package_only.png" alt="Filtered Packages Only" />
<p class="caption">Filtered Packages Only</p>
</div>
<ol start="8" style="list-style-type: decimal">
<li>When displaying only packages, use the <strong>show</strong> and <strong>hide</strong> filter on the package header to expand and collapse entities within that package, respectively.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_show_hide_packages.png" alt="Show and Hide Filters" />
<p class="caption">Show and Hide Filters</p>
</div>
<ol start="9" style="list-style-type: decimal">
<li>Pressing <strong>ESC</strong> clears any search terms in the <em>Entity Search Bar</em>.</li>
</ol>
<h1 id="displaying-results">Displaying Results</h1>
<p>Once we have some matches in the <em>Search Results List</em>, we can open them in a number of ways:</p>
<ol style="list-style-type: decimal">
<li>Clicking directly on the package header will open the package documentation for that package in the <em>Matched Content Area</em>.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_package_doc.png" alt="Package Documentation" />
<p class="caption">Package Documentation</p>
</div>
<ol start="2" style="list-style-type: decimal">
<li>Clicking on the name of a class, object or trait will open its documentation in the <em>Matched Content Area</em>. Clicking on the class (1), object (2) or trait (3) icon will open the corresponding entity documentation in the <em>Matched Content Area</em>.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_classes_traits_objects.png" alt="Class, Traits and Objects" />
<p class="caption">Class, Traits and Objects</p>
</div>
<ol start="3" style="list-style-type: decimal">
<li><p>After entering a search in the <em>Entity Search Bar</em>, <a href="http://heather.miller.am/scaladoc-keyboard-shortcuts.html">pressing the down arrow will allow you to navigate through the Search Results List</a>. Pressing enter on any result will open its documentation in the <em>Matched Content Area</em>.</p></li>
<li><p>Clicking on the <strong>deprecated</strong> filter in the <em>Search Window</em>, will open up the <em>Matched Content Area</em> with all the deprecated members in the api. Members include types, path-dependent types, methods, implicits and variables.</p></li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_deprecated_entities.png" alt="Deprecated Members" />
<p class="caption">Deprecated Members</p>
</div>
<ol start="5" style="list-style-type: decimal">
<li>The clicking on any letter on the alpha bar (1) will open up a list of all members starting with that letter in the <em>Matched Content Area</em>.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_alphabar.png" alt="Alpha Bar" />
<p class="caption">Alpha Bar</p>
</div>
<p>In the example below, we click on the letter <strong>T</strong> to search for the path-dependent type <strong>TypeSymbol</strong>.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_filter_by_letter.png" alt="Filtering by Letters" />
<p class="caption">Filtering by Letters</p>
</div>
<ol start="6" style="list-style-type: decimal">
<li>Clicking on the <strong>#</strong>(symbol) filter (1) will open up a list of all members with special-charactered names in the api.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_symbol_filter.png" alt="Symbol Filter" />
<p class="caption">Symbol Filter</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_filter_by_symbol.png" alt="Filtering by Symbol" />
<p class="caption">Filtering by Symbol</p>
</div>
<p>Next lets look at the <em>Matched Content Area</em> in more detail.</p>
<h2 id="matched-content-area">Matched Content Area</h2>
<p>There’s quite a lot of detail in this area. Here’s an overview of some items of interest.</p>
<ol style="list-style-type: decimal">
<li>The entity type is shown on the top left.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_entity_type.png" alt="Entity Type" />
<p class="caption">Entity Type</p>
</div>
<p>There are five different icons for packages, classes, traits, objects and path-dependent types. If any types other than packages, have a related companion object or extractor, or a companion object or extractor has a related type, then this relationship is depicted by the <em>sticker peal</em> overlay. Clicking on the sticker peal overlay takes you to the companion object or extractor from the type or to the type from the companion object or extractor. Here are the icons mentioned in the above scenarios:</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_package_icon.png" alt="Package" />
<p class="caption">Package</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_classicon.png" alt="Class" />
<p class="caption">Class</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_class-with-companion_icon.png" alt="Class with Companion or Extractor" />
<p class="caption">Class with Companion or Extractor</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_trait_icon.png" alt="Trait" />
<p class="caption">Trait</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_trait-with-companion_icon.png" alt="Trait with Companion or Extractor" />
<p class="caption">Trait with Companion or Extractor</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_object_icon.png" alt="Object" />
<p class="caption">Object</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_object_with_related_type_icon.png" alt="Object with Related Type" />
<p class="caption">Object with Related Type</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_path-dependent-type.png" alt="Path-dependent Type" />
<p class="caption">Path-dependent Type</p>
</div>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_path-dependent-type-wth-companion.png" alt="Path-dependent Type with Companion or Extractor" />
<p class="caption">Path-dependent Type with Companion or Extractor</p>
</div>
<ol start="2" style="list-style-type: decimal">
<li>The package breadcrumb path allows you to click through to any sub package for a type.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_package_breadcrumbs.png" alt="Package Breadcrum Path" />
<p class="caption">Package Breadcrum Path</p>
</div>
<ol start="3" style="list-style-type: decimal">
<li>Any traits or classes extended by the type. You can navigate to any of these super types through their hyperlinks.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_extensions.png" alt="Extensions" />
<p class="caption">Extensions</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li>If this type has a companion object or extractor, then similar to clicking on the sticker peal icon, this link will take you to the companion object or extractor. If this is the companion object or extractor of a related type, this link will take you back to the related type.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_object_link.png" alt="Object Link" />
<p class="caption">Object Link</p>
</div>
<ol start="5" style="list-style-type: decimal">
<li>Link to the package documentation for this type.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_package_link.png" alt="Package Link" />
<p class="caption">Package Link</p>
</div>
<ol start="6" style="list-style-type: decimal">
<li>The entity documentation. This is usually an overview of the type and what it is used for. There might be some handy example usages in there as well.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_entity_documentation.png" alt="Entity Documentation" />
<p class="caption">Entity Documentation</p>
</div>
<ol start="7" style="list-style-type: decimal">
<li>Any linear supertypes or the order in which supertypes are resolved. From <a href="https://www.safaribooksonline.com/library/view/scala-design-patterns/9781785882500/ch02s04.html">Scala Design Patterns</a>:</li>
</ol>
<blockquote>
<p>traits offer a form of multiple inheritance. In such cases, the hierarchy is not necessarily linear, but forms an acyclic graph that needs to be flattened upon compilation. What linearization does is this: it specifies a single linear order for all of the ancestors of a class, including both the regular superclass chain and the parent chains of all of the traits.</p>
</blockquote>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_linear_supertypes.png" alt="Linear Supertypes" />
<p class="caption">Linear Supertypes</p>
</div>
<ol start="8" style="list-style-type: decimal">
<li>All known subclasses with handy hyperlinks.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_known_subclasses.png" alt="Known Subclasses" />
<p class="caption">Known Subclasses</p>
</div>
<ol start="9" style="list-style-type: decimal">
<li>Link to the source file where this entity is defined. This is one of the most useful features of Scaladoc. :)</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_source_file.png" alt="The Source Link" />
<p class="caption">The Source Link</p>
</div>
<ol start="10" style="list-style-type: decimal">
<li>The <em>Member Search Bar</em> will let you search within the <em>Matched Content Area</em> for available members.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_member_search_bar.png" alt="Member Search Bar" />
<p class="caption">Member Search Bar</p>
</div>
<ol start="11" style="list-style-type: decimal">
<li><p>Filters that can be applied to the results.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_content_filters.png" alt="Content Filters" />
<p class="caption">Content Filters</p>
</div>
<ul>
<li><p><strong>Ordering</strong> lets you order the results <strong>Alphabetically</strong> or <strong>By Inheritance</strong> or by a <strong>Grouped</strong> category. Alphabetic ordering simply orders all members alphabetically (a-z) within each member section. Ordering by inheritance, orders members by which supertype they are defined on. Grouped orders members across some predefined grouping created by the Scaladoc author. See <a href="http://www.scala-lang.org/api/2.11.6/scala-reflect/index.html#scala.reflect.api.Symbols">scala.reflect.api.Symbols</a> for an example of this.</p></li>
<li><p><strong>Inherited</strong> allows toggling members defined in any combination of supertypes. This is useful to find out where a method is defined when you have a complex inheritance hierarchy.</p></li>
<li><p><strong>Implicitly</strong> defines which additional methods are available via implicits defined in scope.</p></li>
<li><p><strong>Visibility</strong> restricts members to either <strong>Public</strong> modifier scopes or <strong>All</strong> scopes other than private.</p></li>
</ul></li>
<li><p>Defines various member definitions sections. See the <a href="#member-definition-area">Member Definition Area</a> for more details.</p></li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_matched_content_area_overview_member_definition_area.png" alt="Member Definition Area" />
<p class="caption">Member Definition Area</p>
</div>
<ol start="13" style="list-style-type: decimal">
<li>The package documentation for a package, has a Content Hierarchy diagram that describes the relationship between the types within that package.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_content_hierarchy.png" alt="Content Hierarchy Diagram" />
<p class="caption">Content Hierarchy Diagram</p>
</div>
<ol start="14" style="list-style-type: decimal">
<li>Types that have been annotated with a @<a href="http://docs.scala-lang.org/overviews/scaladoc/for-library-authors.html#diagram-tags">contentDiagram tag</a>, generate a Type Hierarchy that describes the relationships between a type and its super and sub types.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_type_hierarchy.png" alt="Type Hierarchy Diagram for scala.reflect.api.Symbols" />
<p class="caption">Type Hierarchy Diagram for scala.reflect.api.Symbols</p>
</div>
<h3 id="member-search-bar">Member Search Bar</h3>
<p>To find a member, type in a query into the <em>Member Search Bar</em>.</p>
<ol style="list-style-type: decimal">
<li>The search is completely case-insensitive; Content is matched irrespective of case. <img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_member_search_bar_case_insensitive.png" alt="Case-insensitive Member Search" /></li>
<li>You can’t use a mnemonic search like in the <em>Entity Search Bar</em>.</li>
<li>You can search on any text in a member <em>description</em>. In the example below we search for the text <strong>w.r.t</strong> and matches are found in member descriptions.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_member_search_bar_text_search.png" alt="Text Search within Member Descriptions" />
<p class="caption">Text Search within Member Descriptions</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li>You can’t directly search against types in method signatures for example. They have to be mentioned in the description for a match to be found. In the example below we search for <strong>GenTraversable</strong> within the <strong>scala.collection.immutable.Seq</strong> documentation. While <strong>GenTraversable</strong> is used in method definitions there are no matches returned from the search because <strong>GenTraversable</strong> is not mentioned in any <em>descriptions</em>.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_member_search_bar_no_type_search.png" alt="Type Name Not Found" />
<p class="caption">Type Name Not Found</p>
</div>
<p>If we perform a browser search on the same page for <strong>GenTraversable</strong> we find search hits.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_member_search_bar_type_by_browser_search.png" alt="Type Found in Browser Search" />
<p class="caption">Type Found in Browser Search</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li><p>You can tab between the <em>Member Search Bar</em> and the <em>Entity Search Bar</em>. I’m not sure how useful this really is but it’s there if you need it.</p></li>
<li><p>Pressing <strong>ESC</strong> clears any search terms in the <em>Member Search Bar</em>.</p></li>
<li><p>You can’t only search for a <strong>def</strong> for example and exclude other members such as a <strong>val</strong>. Searches of the type:</p></li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> [method_name]</code></pre></div>
<p>yield nothing. The browser search doesn’t match queries like the above either. As an example, if we search for the following through Chrome:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> collect</code></pre></div>
<p>on the members of <strong>scala.collection.immutable.Seq</strong>, we don’t find any matches. This is annoying as the <strong>collect</strong> method is clearly defined in the documentation.</p>
<h3 id="member-definition-area">Member Definition Area</h3>
<p>There is some commonality between the features available to the different member types. Many of the features available in one member type can be found in other types as well.</p>
<p>Member definitions can be separated into six areas.</p>
<h4 id="type-members">1. Type Members</h4>
<p>Path-dependent types (nested types).</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_type_members.png" alt="Type Members" />
<p class="caption">Type Members</p>
</div>
<ol style="list-style-type: decimal">
<li>The name of the path-dependent type. Although there is no visible hyperlink to the the class name (underline), it is in most cases a hyperlink and can be clicked to go through to the type’s documentation. This had me confused for a while.</li>
<li>The summary of what the type is about.</li>
<li>Any other types extended by this type. All supertypes are linked and can be navigated.</li>
<li>Dropping this arrow down will reveal some additional information about this type.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_type_members_dropped.png" alt="Type Member Expanded" />
<p class="caption">Type Member Expanded</p>
</div>
<ol start="5" style="list-style-type: decimal">
<li>The parent type where this nested type is defined.</li>
</ol>
<h4 id="concrete-value-members">2. Concrete Value Members</h4>
<p>Members that have an implementation.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_concrete_value_members_dropped.png" alt="Concrete Value Members" />
<p class="caption">Concrete Value Members</p>
</div>
<ol style="list-style-type: decimal">
<li>The member definition, with parameter and result types hyperlinked.</li>
<li>Description of the method, including parameters, types and results.</li>
<li>Full signature. This is present if the member definition (1) is simplified, which can be identified by the <strong>[[use case]]</strong> ascription. In the above case, the member definition (1) does not mention the <strong>CanBuildFrom</strong> implicit which is shown in the full signature.</li>
<li>Where in the inheritance hierarchy this method is defined. In the above case the <strong>++</strong> method is defined in <strong>GenTraversableLike</strong> and then overridden in <strong>TraversableLike</strong>.</li>
<li><a href="http://www.scala-lang.org/api/2.11.8/index.html#scala.collection.GenTraversableLike@++%5BB%5D(that:scala.collection.GenTraversableOnce%5BB%5D):scala.collection.GenTraversable%5BB%5D">Permalink to this member</a>, which embeds the method signature in a URL which can be used to link straight to <strong>++</strong> method documentation.</li>
</ol>
<pre class="command scrollx"><code>http://www.scala-lang.org/api/2.11.8/index.html#scala.collection.GenTraversableLike@++[B](that:scala.collection.GenTraversableOnce[B]):scala.collection.GenTraversable[B]</code></pre>
<h4 id="abstract-value-members">3. Abstract Value Members</h4>
<p>Members that are abstract (1) (have no implementation).</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_abstract_value_members_dropped.png" alt="Abstract Value Members" />
<p class="caption">Abstract Value Members</p>
</div>
<h4 id="instance-constructors">4. Instance Constructors</h4>
<p>Constructors for creating an instance of the type.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_instance_constructors.png" alt="Instance Constructors" />
<p class="caption">Instance Constructors</p>
</div>
<h4 id="implicit-value-members">5. Implicit Value Members</h4>
<p>Implicit members:</p>
<ol style="list-style-type: decimal">
<li>Implicit types (usually classes) are defined with the Type members.</li>
<li>Implicit values (<strong>var</strong>, <strong>val</strong> and <strong>def</strong>) are defined with the Value members.</li>
</ol>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_implicit_value_members.png" alt="Implicit Members" />
<p class="caption">Implicit Members</p>
</div>
<h4 id="shadowed-implicit-value-members">6. Shadowed Implicit Value Members</h4>
<p>Implicit members that are not applicable due to existing implementations.</p>
<div class="figure">
<img src="/images/scaladoc_navigate/scaladoc_interface_basics_member_definition_area_shadowed_implicit_value_members_dropped.png" alt="Shadowed Implicits Value Members" />
<p class="caption">Shadowed Implicits Value Members</p>
</div>
<ol style="list-style-type: decimal">
<li>Member supplied by an implicit conversion.</li>
<li>Where implicit comes from and when it gets applied.</li>
<li>How to use the shadowed implicit (see below for an explanation) by using a type ascription.</li>
</ol>
<p>Implicit conversions can be used to add methods to a type which doesn’t have those particular methods (“pimping”). If the target type already has a method with the same signature (name and types) that the implicit conversion is trying to add to it, it is termed “shadowing”. The definition of the method on the target type takes precedence over the implicit conversion which is not applied. A type ascription can be used to manually specify which method definition to use.</p>
<p>From <a href="http://stackoverflow.com/questions/19615810/what-is-shadowed-implicit-value-members-in-scala-doc">What is “Shadowed Implicit Value Members” in Scala doc?</a>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">case</span> <span class="kw">class</span> <span class="fu">Foo</span>(x :String) {
  <span class="kw">def</span> whoAmI = <span class="st">&quot;Foo: &quot;</span> + x
}

<span class="kw">implicit</span> <span class="kw">class</span> <span class="fu">Bar</span>(foo: Foo) {
  <span class="kw">def</span> whoAmI = <span class="st">&quot;Bar: &quot;</span> + foo.<span class="fu">x</span>
}

<span class="fu">println</span>( <span class="fu">Foo</span>(<span class="st">&quot;test&quot;</span>).<span class="fu">whoAmI</span> ) <span class="co">//prints Foo: test</span>
<span class="fu">println</span>( (<span class="fu">Foo</span>(<span class="st">&quot;test&quot;</span>): Bar).<span class="fu">whoAmI</span> ) <span class="co">//prints Bar: test</span></code></pre></div>
<h1 id="miscellaneous">Miscellaneous</h1>
<ol style="list-style-type: decimal">
<li>If you know the package path of the member you are looking for, you can append it to the documentation URL with a <strong>#</strong> to go directly to the documentation. In the example below we go directly to the <strong>scala.concurrent.Future</strong> documentation by adding it to the Scaladoc API URL:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="st">&quot;http://www.scala-lang.org/api/2.11.8/index.html&quot;</span> +
<span class="st">&quot;#&quot;</span> +
<span class="st">&quot;scala.concurrent.Future&quot;</span></code></pre></div>
<p>The above link takes you to the <a href="http://www.scala-lang.org/api/2.11.8/index.html#scala.concurrent.Future">Future type</a> documentation.</p>
<p>If you want to go to the <a href="http://www.scala-lang.org/api/2.11.8/index.html#scala.concurrent.Future$">Future object</a>, then add <strong>$</strong> to the end of the path to the type documentation.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="st">&quot;http://www.scala-lang.org/api/2.11.8/index.html&quot;</span> +
<span class="st">&quot;#&quot;</span> +
<span class="st">&quot;scala.concurrent.Future&quot;</span> +
<span class="st">&quot;$&quot;</span></code></pre></div>
<p>If you want to go to a path-dependent type, then use the above formula and use a <strong>$</strong> between the parent type and the nested type. In the example below if we want to go the documentation for <a href="http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html#scala.reflect.api.Symbols$TypeSymbol">TypeSymbol</a> which is a nested type of <strong>scala.reflect.api.Symbols</strong> we would write the link as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="st">&quot;http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html&quot;</span> +
<span class="st">&quot;#&quot;</span> +
<span class="st">&quot;scala.reflect.api.Symbols&quot;</span> +
<span class="st">&quot;$&quot;</span> +
<span class="st">&quot;TypeSymbol&quot;</span></code></pre></div>
<p>This unfortunately doesn’t work as expected for all types. The location of the documentation for a member depends on where it is defined. Taking <strong>scala.collection.immutable.Set</strong> as an example, if we want to see its <strong>WithFilter</strong> path-dependent type’s documentation, we might incorrectly assume the documentation URL is:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="st">&quot;http://www.scala-lang.org/api/2.11.8/index.html&quot;</span> +
<span class="st">&quot;#&quot;</span> +
<span class="st">&quot;scala.collection.immutable.Set&quot;</span> +
<span class="st">&quot;$&quot;</span> +
<span class="st">&quot;WithFilter&quot;</span></code></pre></div>
<p>But the <a href="http://www.scala-lang.org/api/2.11.8/index.html#scala.collection.immutable.Set$WithFilter">above</a> doesn’t work because <strong>WithFilter</strong> is defined on <strong>scala.collection.TraversableLike</strong>. This <a href="http://www.scala-lang.org/api/2.11.8/index.html#scala.collection.TraversableLike$WithFilter">link</a> works:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="st">&quot;http://www.scala-lang.org/api/2.11.8/index.html&quot;</span> +
<span class="st">&quot;#&quot;</span> +
<span class="st">&quot;scala.collection.TraversableLike&quot;</span> +
<span class="st">&quot;$&quot;</span> +
<span class="st">&quot;WithFilter&quot;</span></code></pre></div>
<p>Also as mentioned previously, you can bookmark a permalink to any member and use that to go directly to any documentation.</p>
<p>That about covers it for the overview of the Scaladoc interface. If I’ve missed any useful tips or misunderstood a feature, please let me know in the comments section below.</p>]]></description>
    <pubDate>Thu, 20 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-10-20-how-to-navigate-scaladoc.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Output in Scala REPL is Truncated</title>
    <link>http://blog.ssanj.net/posts/2016-10-16-output-in-scala-repl-is-truncated.html</link>
    <description><![CDATA[<p>The scala REPL truncates long output that exceeds a certain set limit. Take the example below of displaying the members of a Traversable:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">ru.<span class="fu">typeOf</span>[Traversable[_]].<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res46: String =
<span class="kw">override</span> <span class="kw">def</span> seq: Traversable[A]
<span class="kw">override</span> <span class="kw">def</span> companion: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">GenericCompanion</span>[Traversable]
<span class="kw">def</span> $init$(): Unit
<span class="kw">def</span> transpose[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[CC[B] @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> flatten[B &lt;: &lt;?&gt;](<span class="kw">implicit</span> asTraversable: &lt;?&gt;): CC[B]
<span class="kw">def</span> unzip3[A1 &lt;: &lt;?&gt;, A2 &lt;: &lt;?&gt;, A3 &lt;: &lt;?&gt;](<span class="kw">implicit</span> asTriple: &lt;?&gt;): (CC[A1], CC[A2], CC[A3])
<span class="kw">def</span> unzip[A1 &lt;: &lt;?&gt;, A2 &lt;: &lt;?&gt;](<span class="kw">implicit</span> asPair: &lt;?&gt;): (CC[A1], CC[A2])
<span class="kw">def</span> genericBuilder[B &lt;: &lt;?&gt;]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[B,CC[B]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> newBuilder: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[A,CC[A]]
<span class="kw">class</span> WithFilter <span class="kw">extends</span> FilterMonadic[A,Repr]
<span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">FilterMonadic</span>[A,Repr]
<span class="kw">def</span> <span class="fu">view</span>(f...</code></pre></div>
<p>The method list of Traversable has been truncated. How do we go about increasing this limit?</p>
<p>We can find out the <a href="http://stackoverflow.com/questions/9516567/settings-maxprintstring-for-scala-2-9-repl">current maximum printable String length</a> by going into <strong>:power</strong> mode and then accessing the <strong>vals.isettings</strong> variable:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">:power
vals.<span class="fu">isettings</span>

res50: scala.<span class="fu">tools</span>.<span class="fu">nsc</span>.<span class="fu">interpreter</span>.<span class="fu">ISettings</span> =

 ISettings {
   deprecation = <span class="kw">false</span>
  maxAutoprintCompletion = <span class="dv">250</span>
  maxPrintString = <span class="dv">800</span>
  unwrapStrings = <span class="kw">true</span>

 }</code></pre></div>
<p>The <strong>maxPrintString</strong> setting is at 800 characters. This means that any output over 800 characters is truncated within the REPL. To increase this limit, simply set a new <strong>maxPrintString</strong> value:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">vals.<span class="fu">isettings</span>.<span class="fu">maxPrintString</span> = Int.<span class="fu">MaxValue</span>
vals.<span class="fu">isettings</span>.<span class="fu">maxPrintString</span>: Int = <span class="dv">2147483647</span>

vals.<span class="fu">isettings</span>
res51: scala.<span class="fu">tools</span>.<span class="fu">nsc</span>.<span class="fu">interpreter</span>.<span class="fu">ISettings</span> =

 ISettings {
   deprecation = <span class="kw">false</span>
  maxAutoprintCompletion = <span class="dv">250</span>
  maxPrintString = <span class="dv">2147483647</span>
  unwrapStrings = <span class="kw">true</span>

 }</code></pre></div>
<p>Now if we interrogate the members of Traversable again, we get the full list:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; ru.<span class="fu">typeOf</span>[Traversable[_]].<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res53: String =
<span class="kw">override</span> <span class="kw">def</span> seq: Traversable[A]
<span class="kw">override</span> <span class="kw">def</span> companion: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">GenericCompanion</span>[Traversable]
<span class="kw">def</span> $init$(): Unit
<span class="kw">def</span> transpose[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[CC[B] @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> flatten[B](<span class="kw">implicit</span> asTraversable: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B]): CC[B]
<span class="kw">def</span> unzip3[A1, A2, A3](<span class="kw">implicit</span> asTriple: A =&gt; (A1, A2, A3)): (CC[A1], CC[A2], CC[A3])
<span class="kw">def</span> unzip[A1, A2](<span class="kw">implicit</span> asPair: A =&gt; (A1, A2)): (CC[A1], CC[A2])
<span class="kw">def</span> genericBuilder[B]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[B,CC[B]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> newBuilder: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Builder</span>[A,CC[A]]
<span class="kw">class</span> WithFilter <span class="kw">extends</span> FilterMonadic[A,Repr]
<span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">FilterMonadic</span>[A,Repr]
<span class="kw">def</span> <span class="fu">view</span>(from: Int,until: Int): scala.<span class="fu">collection</span>.<span class="fu">TraversableView</span>[A,Repr]
<span class="kw">def</span> view: scala.<span class="fu">collection</span>.<span class="fu">TraversableView</span>[A,Repr]
<span class="kw">def</span> stringPrefix: String
<span class="kw">override</span> <span class="kw">def</span> <span class="fu">toString</span>(): String
<span class="kw">override</span> <span class="kw">def</span> to[Col[_]](<span class="kw">implicit</span> cbf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Nothing,A,Col[A @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]]): Col[A @scala.<span class="fu">annotation</span>.<span class="fu">unchecked</span>.<span class="fu">uncheckedVariance</span>]
<span class="kw">def</span> toStream: Stream[A]
<span class="kw">def</span> toIterator: Iterator[A]
<span class="kw">def</span> toTraversable: Traversable[A]
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B],start: Int,len: Int): Unit
<span class="kw">def</span> inits: Iterator[Repr]
<span class="kw">def</span> tails: Iterator[Repr]
<span class="kw">def</span> <span class="fu">splitAt</span>(n: Int): (Repr, Repr)
<span class="kw">def</span> <span class="fu">span</span>(p: A =&gt; Boolean): (Repr, Repr)
<span class="kw">def</span> <span class="fu">dropWhile</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> <span class="fu">takeWhile</span>(p: A =&gt; Boolean): Repr
<span class="kw">private</span>[<span class="kw">package</span> scala] <span class="kw">def</span> <span class="fu">sliceWithKnownBound</span>(from: Int,until: Int): Repr
<span class="kw">private</span>[<span class="kw">package</span> scala] <span class="kw">def</span> <span class="fu">sliceWithKnownDelta</span>(from: Int,until: Int,delta: Int): Repr
<span class="kw">def</span> <span class="fu">slice</span>(from: Int,until: Int): Repr
<span class="kw">def</span> <span class="fu">drop</span>(n: Int): Repr
<span class="kw">def</span> <span class="fu">take</span>(n: Int): Repr
<span class="kw">def</span> init: Repr
<span class="kw">def</span> lastOption: Option[A]
<span class="kw">def</span> last: A
<span class="kw">override</span> <span class="kw">def</span> tail: Repr
<span class="kw">def</span> headOption: Option[A]
<span class="kw">def</span> head: A
<span class="kw">def</span> scanRight[B, That](z: B)(op: (A, B) =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> scanLeft[B, That](z: B)(op: (B, A) =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> scan[B &gt;: A, That](z: B)(op: (B, B) =&gt; B)(<span class="kw">implicit</span> cbf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> <span class="fu">find</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">def</span> <span class="fu">exists</span>(p: A =&gt; Boolean): Boolean
<span class="kw">def</span> <span class="fu">forall</span>(p: A =&gt; Boolean): Boolean
<span class="kw">def</span> groupBy[K](f: A =&gt; K): scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Map</span>[K,Repr]
<span class="kw">def</span> <span class="fu">partition</span>(p: A =&gt; Boolean): (Repr, Repr)
<span class="kw">def</span> collect[B, That](pf: PartialFunction[A,B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> <span class="fu">filterNot</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> <span class="fu">filter</span>(p: A =&gt; Boolean): Repr
<span class="kw">def</span> flatMap[B, That](f: A =&gt; scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> map[B, That](f: A =&gt; B)(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++:[B &gt;: A, That](that: Traversable[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++:[B &gt;: A, That](that: scala.<span class="fu">collection</span>.<span class="fu">TraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> ++[B &gt;: A, That](that: scala.<span class="fu">collection</span>.<span class="fu">GenTraversableOnce</span>[B])(<span class="kw">implicit</span> bf: scala.<span class="fu">collection</span>.<span class="fu">generic</span>.<span class="fu">CanBuildFrom</span>[Repr,B,That]): That
<span class="kw">def</span> hasDefiniteSize: Boolean
<span class="kw">def</span> isEmpty: Boolean
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> parCombiner: scala.<span class="fu">collection</span>.<span class="fu">parallel</span>.<span class="fu">Combiner</span>[A,scala.<span class="fu">collection</span>.<span class="fu">parallel</span>.<span class="fu">ParIterable</span>[A]]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> <span class="fu">toCollection</span>(repr: Repr): Traversable[A]
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> thisCollection: Traversable[A]
<span class="kw">final</span> <span class="kw">def</span> isTraversableAgain: Boolean
<span class="kw">def</span> repr: Repr
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">type</span> Self = Repr
<span class="kw">def</span> par: ParRepr
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder): StringBuilder
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder,sep: String): StringBuilder
<span class="kw">def</span> <span class="fu">addString</span>(b: StringBuilder,start: String,sep: String,end: String): StringBuilder
<span class="kw">def</span> mkString: String
<span class="kw">def</span> <span class="fu">mkString</span>(sep: String): String
<span class="kw">def</span> <span class="fu">mkString</span>(start: String,sep: String,end: String): String
<span class="kw">def</span> toMap[T, U](<span class="kw">implicit</span> ev: &lt;:&lt;[A,(T, U)]): scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Map</span>[T,U]
<span class="kw">def</span> toVector: Vector[A]
<span class="kw">def</span> toSet[B &gt;: A]: scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">Set</span>[B]
<span class="kw">def</span> toBuffer[B &gt;: A]: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Buffer</span>[B]
<span class="kw">def</span> toIndexedSeq: scala.<span class="fu">collection</span>.<span class="fu">immutable</span>.<span class="fu">IndexedSeq</span>[A]
<span class="kw">def</span> toSeq: Seq[A]
<span class="kw">def</span> toIterable: Iterable[A]
<span class="kw">def</span> toList: List[A]
<span class="kw">def</span> toArray[B &gt;: A](<span class="kw">implicit</span> evidence$<span class="dv">1</span>: scala.<span class="fu">reflect</span>.<span class="fu">ClassTag</span>[B]): Array[B]
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B]): Unit
<span class="kw">def</span> copyToArray[B &gt;: A](xs: Array[B],start: Int): Unit
<span class="kw">def</span> copyToBuffer[B &gt;: A](dest: scala.<span class="fu">collection</span>.<span class="fu">mutable</span>.<span class="fu">Buffer</span>[B]): Unit
<span class="kw">def</span> minBy[B](f: A =&gt; B)(<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> maxBy[B](f: A =&gt; B)(<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> max[B &gt;: A](<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> min[B &gt;: A](<span class="kw">implicit</span> cmp: Ordering[B]): A
<span class="kw">def</span> product[B &gt;: A](<span class="kw">implicit</span> num: Numeric[B]): B
<span class="kw">def</span> sum[B &gt;: A](<span class="kw">implicit</span> num: Numeric[B]): B
<span class="kw">def</span> aggregate[B](z: =&gt; B)(seqop: (B, A) =&gt; B,combop: (B, B) =&gt; B): B
<span class="kw">def</span> fold[A1 &gt;: A](z: A1)(op: (A1, A1) =&gt; A1): A1
<span class="kw">def</span> reduceOption[A1 &gt;: A](op: (A1, A1) =&gt; A1): Option[A1]
<span class="kw">def</span> reduce[A1 &gt;: A](op: (A1, A1) =&gt; A1): A1
<span class="kw">def</span> reduceRightOption[B &gt;: A](op: (A, B) =&gt; B): Option[B]
<span class="kw">def</span> reduceLeftOption[B &gt;: A](op: (B, A) =&gt; B): Option[B]
<span class="kw">def</span> reduceRight[B &gt;: A](op: (A, B) =&gt; B): B
<span class="kw">def</span> reduceLeft[B &gt;: A](op: (B, A) =&gt; B): B
<span class="kw">def</span> foldRight[B](z: B)(op: (A, B) =&gt; B): B
<span class="kw">def</span> foldLeft[B](z: B)(op: (B, A) =&gt; B): B
<span class="kw">def</span> :\[B](z: B)(op: (A, B) =&gt; B): B
<span class="kw">def</span> /:[B](z: B)(op: (B, A) =&gt; B): B
<span class="kw">def</span> collectFirst[B](pf: PartialFunction[A,B]): Option[B]
<span class="kw">def</span> <span class="fu">count</span>(p: A =&gt; Boolean): Int
<span class="kw">def</span> nonEmpty: Boolean
<span class="kw">def</span> size: Int
<span class="kw">protected</span>[<span class="kw">this</span>] <span class="kw">def</span> reversed: List[A]
<span class="kw">final</span> <span class="kw">def</span> $asInstanceOf[T0](): T0
<span class="kw">final</span> <span class="kw">def</span> $isInstanceOf[T0](): Boolean
<span class="kw">final</span> <span class="kw">def</span> synchronized[T0](x$<span class="dv">1</span>: T0): T0
<span class="kw">final</span> <span class="kw">def</span> ##(): Int
<span class="kw">final</span> <span class="kw">def</span> !=(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> ==(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">ne</span>(x$<span class="dv">1</span>: AnyRef): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">eq</span>(x$<span class="dv">1</span>: AnyRef): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">notifyAll</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">notify</span>(): Unit
<span class="kw">protected</span>[<span class="kw">package</span> lang] <span class="kw">def</span> <span class="fu">clone</span>(): Object
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">getClass</span>(): Class[_]
<span class="kw">def</span> <span class="fu">hashCode</span>(): Int
<span class="kw">def</span> <span class="fu">equals</span>(x$<span class="dv">1</span>: Any): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(x$<span class="dv">1</span>: Long): Unit
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">wait</span>(x$<span class="dv">1</span>: Long,x$<span class="dv">2</span>: Int): Unit
<span class="kw">protected</span>[<span class="kw">package</span> lang] <span class="kw">def</span> <span class="fu">finalize</span>(): Unit
<span class="kw">final</span> <span class="kw">def</span> asInstanceOf[T0]: T0
<span class="kw">final</span> <span class="kw">def</span> isInstanceOf[T0]: Boolean
<span class="kw">def</span> foreach[U](f: A =&gt; U): Unit</code></pre></div>
<p>An alternative is to set the <strong>scala.repl.maxprintstring</strong> JVM parameter externally when invoking the scala REPL:</p>
<pre class="command scrollx"><code>scala -Dscala.repl.maxprintstring=64000</code></pre>]]></description>
    <pubDate>Sun, 16 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-10-16-output-in-scala-repl-is-truncated.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Start Using the Scala Reflection Api</title>
    <link>http://blog.ssanj.net/posts/2016-10-15-how-to-start-using-the-scala-reflection-api.html</link>
    <description><![CDATA[<p>I’ve found learning the <a href="http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html#scala.reflect.api.package">scala reflection API</a> somewhat confusing. Having used Java reflection pretty easily back in the day, the Scala api seemed somewhat foreign.</p>
<p>So let’s start with a simple exercise to learn how to use the api.</p>
<h1 id="a-simple-exercise">A Simple Exercise</h1>
<p>How would we go about using the scala reflection api to find out what methods are declared on a type?</p>
<h2 id="import-the-reflection-universe">1. Import the reflection universe</h2>
<p>First, you need to import the reflection runtime universe:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">reflect</span>.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">_</span></code></pre></div>
<p>Most methods on the reflection api are centred around a <strong>Type</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span></code></pre></div>
<p><em>I’ll refer to Type as universe.Type from now on, to distinguish it from a normal type</em>.</p>
<h2 id="get-the-universe.type">2. Get the universe.Type</h2>
<p>To get the universe.Type of a type, you can use the <strong>typeOf</strong> api method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">typeOf[Option[_]]
res1: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = scala.<span class="fu">Option</span>[_]</code></pre></div>
<h2 id="get-the-declared-methods">3. Get the declared methods</h2>
<p>Now that we have a universe.Type for our type, we can get the methods defined on it by using the <strong>decls</strong> method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res1.<span class="fu">decls</span>
res9: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">MemberScope</span> = <span class="fu">SynchronizedOps</span>(constructor Option, method isEmpty, method isDefined, method get, method getOrElse, method orNull, method map, method fold, method flatMap, method flatten, method filter, method filterNot, method nonEmpty, method withFilter, <span class="kw">class</span> WithFilter, method contains, method exists, method forall, method foreach, method collect, method orElse, method iterator, method toList, method toRight, method toLeft)</code></pre></div>
<p>You might notice that <strong>decls</strong> returns a <strong>MemberScope</strong>. What’s that? It’s handy to realise that a <strong>MemberScope</strong> is a <strong>Traversable</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res9.<span class="fu">isInstanceOf</span>[Traversable[_]]
res12: Boolean = <span class="kw">true</span></code></pre></div>
<p>You can use the <a href="http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.collection.Traversable">methods available on any Traversable</a> instance to process the MemberScope.</p>
<p>For instance, we could easily format the list of method declarations like so:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">res1.<span class="fu">decls</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res11: String =
<span class="kw">def</span> &lt;init&gt;(): Option[A]
<span class="kw">def</span> isEmpty: Boolean
<span class="kw">def</span> isDefined: Boolean
<span class="kw">def</span> get: A
<span class="kw">final</span> <span class="kw">def</span> getOrElse[B &gt;: A](default: =&gt; B): B
<span class="kw">final</span> <span class="kw">def</span> orNull[A1 &gt;: A](<span class="kw">implicit</span> ev: &lt;:&lt;[Null,A1]): A1
<span class="kw">final</span> <span class="kw">def</span> map[B](f: A =&gt; B): Option[B]
<span class="kw">final</span> <span class="kw">def</span> fold[B](ifEmpty: =&gt; B)(f: A =&gt; B): B
<span class="kw">final</span> <span class="kw">def</span> flatMap[B](f: A =&gt; Option[B]): Option[B]
<span class="kw">def</span> flatten[B &lt;: &lt;?&gt;](<span class="kw">implicit</span> ev: &lt;?&gt;): Option[B]
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">filter</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">filterNot</span>(p: A =&gt; Boolean): Option[A]
<span class="kw">final</span> <span class="kw">def</span> nonEmpty: Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">withFilter</span>(p: A =&gt; Boolean): Option.<span class="fu">this</span>.<span class="fu">WithFilter</span>
<span class="kw">class</span> WithFilter <span class="kw">extends</span> AnyRef
<span class="kw">final</span> <span class="kw">def</span> contains[A1 &lt;: &lt;?&gt;](elem: &lt;?&gt;): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">exists</span>(p: A =&gt; Boolean): Boolean
<span class="kw">final</span> <span class="kw">def</span> <span class="fu">forall</span>(p: A =&gt; Boolean): Boolean
<span class="kw">final</span> <span class="kw">def</span> foreach[U](f: A =&gt; U): Unit
<span class="kw">final</span> <span class="kw">def</span> collect[B](pf: PartialFunction[A,B]): Option[B]
<span class="kw">final</span> <span class="kw">def</span> orElse[B &gt;: A](alternative: =&gt; Option[B]): Option[B]
<span class="kw">def</span> iterator: Iterator[A]
<span class="kw">def</span> toList: List[A]
<span class="kw">final</span> <span class="kw">def</span> toRight[X](left: =&gt; X): Product <span class="kw">with</span> Serializable <span class="kw">with</span> scala.<span class="fu">util</span>.<span class="fu">Either</span>[X,A]
<span class="kw">final</span> <span class="kw">def</span> toLeft[X](right: =&gt; X): Product <span class="kw">with</span> Serializable <span class="kw">with</span> scala.<span class="fu">util</span>.<span class="fu">Either</span>[A,X]</code></pre></div>
<h1 id="other-useful-methods">Other useful methods</h1>
<p>Let’s use the reflection api to figure out what other methods are available on universe.Type. We use the <strong>members</strong> method to list methods defined either directly or indirectly on universe.Type:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">typeOf[Type]
res5: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = scala.<span class="fu">reflect</span>.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span>

res5.<span class="fu">members</span>.<span class="fu">mkString</span>(<span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>)
res7: String =
<span class="kw">final</span> <span class="kw">def</span> ##(): Int
<span class="kw">def</span> <span class="fu">contains</span>(sym: &lt;?&gt;): Boolean
<span class="kw">def</span> <span class="fu">exists</span>(p: &lt;?&gt;): Boolean
<span class="kw">def</span> <span class="fu">find</span>(p: &lt;?&gt;): Option[Types.<span class="fu">this</span>.<span class="fu">Type</span>]
<span class="kw">def</span> <span class="fu">foreach</span>(f: &lt;?&gt;): Unit
<span class="kw">def</span> <span class="fu">map</span>(f: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">substituteTypes</span>(from: &lt;?&gt;,to: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">substituteSymbols</span>(from: &lt;?&gt;,to: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">orElse</span>(alt: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> finalResultType: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> resultType: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> typeParams: List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]
<span class="kw">def</span> paramLists: List[List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]]
<span class="kw">def</span> paramss: List[List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]]
<span class="kw">def</span> typeArgs: List[Types.<span class="fu">this</span>.<span class="fu">Type</span>]
<span class="kw">def</span> dealias: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> widen: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> erasure: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">asSeenFrom</span>(pre: &lt;?&gt;,clazz: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> <span class="fu">baseType</span>(clazz: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> baseClasses: List[Types.<span class="fu">this</span>.<span class="fu">Symbol</span>]
<span class="kw">def</span> =:=(that: &lt;?&gt;): Boolean
<span class="kw">def</span> weak_&lt;:&lt;(that: &lt;?&gt;): Boolean
<span class="kw">def</span> &lt;:&lt;(that: &lt;?&gt;): Boolean
<span class="kw">def</span> etaExpand: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> normalize: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> typeConstructor: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> takesTypeArgs: Boolean
<span class="kw">def</span> companion: Types.<span class="fu">this</span>.<span class="fu">Type</span>
<span class="kw">def</span> members: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> <span class="fu">member</span>(name: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> decls: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> declarations: Types.<span class="fu">this</span>.<span class="fu">MemberScope</span>
<span class="kw">def</span> <span class="fu">decl</span>(name: &lt;?&gt;): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> <span class="fu">declaration</span>(name: Types.<span class="fu">this</span>.<span class="fu">Name</span>): Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> typeSymbol: Types.<span class="fu">this</span>.<span class="fu">Symbol</span>
<span class="kw">def</span> termSymbol: Types.<span class="fu">this</span>.<span class="fu">Symbol</span></code></pre></div>
<h1 id="getting-a-universe.type-from-an-instance">Getting a universe.Type from an Instance</h1>
<p>What if you have an instance of a type and want to get a universe.Type for that? It looks like there is no built in method to do that. The <a href="http://docs.scala-lang.org/overviews/reflection/symbols-trees-types.html">recommended way</a> is to write your own method for it:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> getType[T: TypeTag](obj: T) = typeOf[T]
getType: [T](obj: T)(<span class="kw">implicit</span> evidence$<span class="dv">1</span>: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">TypeTag</span>[T])reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span></code></pre></div>
<p>The scala compiler will supply our <strong>getType</strong> method with an implicit for <strong>TypeTag[T]</strong>.</p>
<p>So What is a <a href="http://www.scala-lang.org/api/2.11.1/scala-reflect/index.html#scala.reflect.api.TypeTags">TypeTag</a>?</p>
<blockquote>
<p>A TypeTag[T] encapsulates the runtime type representation of some type T. Like scala.reflect.Manifest, the prime use case of TypeTags is to give access to erased types.</p>
</blockquote>
<p>As with Java, Scala generic types which are present at compile time are erased at runtime (erasure). TypeTags are a way of having access to that lost compile time information at runtime.</p>
<p>With <strong>getType</strong> we can now extract the universe.Type of an instance:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">getType</span>(List(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>))
res4: reflect.<span class="fu">runtime</span>.<span class="fu">universe</span>.<span class="fu">Type</span> = List[Int]</code></pre></div>
<p>Hopefully this has given you a taste for some of the information provided by the scala reflection api and a starting point to explore it further.</p>]]></description>
    <pubDate>Sat, 15 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-10-15-how-to-start-using-the-scala-reflection-api.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Ego is the Enemy - Ryan Holiday</title>
    <link>http://blog.ssanj.net/posts/2016-09-11-ego-is-the-enemy-ryan-holiday.html</link>
    <description><![CDATA[<p>Ideas from the book <a href="https://www.amazon.com/Ego-Enemy-Ryan-Holiday/dp/1591847818">Ego is the Enemy by Ryan Holiday</a>.</p>
<h2 id="aspire">Aspire</h2>
<ol style="list-style-type: decimal">
<li>Ask yourself: “Who do I want to be?” “What path will I take?”</li>
</ol>
<div>
<div class="quote">
The first principle is that you must not fool yourself—and you are the easiest person to fool.
</div>
<div class="attribution">
RICHARD FEYNMAN
</div>
</div>
<ol start="2" style="list-style-type: decimal">
<li>Believing in your greatness will kill your creativity.</li>
<li>Silence is the respite of the confident and the strong.</li>
<li>The greatest work and art comes from wrestling with the void, facing it instead of scrambling to make it go away.</li>
<li>You have to chose either to <strong>be</strong> somebody or to <strong>do</strong> something.</li>
</ol>
<div>
<div class="quote">
A man is worked upon by what he works on.
</div>
<div class="attribution">
Frederick Douglass
</div>
</div>
<ol start="6" style="list-style-type: decimal">
<li>What you choose to do with your time and what you choose to do for money works on you.</li>
<li>Think about this the next time you face a choice: Do I need this? Or is it really about ego?</li>
</ol>
<blockquote>
<p>The power of being a student is not just that it is an extended period of instruction, it also places the ego and ambition in someone else’s hands. There is a sort of ego ceiling imposed—one knows that he is not better than the “master” he apprentices under. Not even close. You defer to them, you subsume yourself. You cannot fake or bullshit them. An education can’t be “hacked”; there are no shortcuts besides hacking it every single day. If you don’t, they drop you.</p>
</blockquote>
<ol start="8" style="list-style-type: decimal">
<li>Each fighter, to become great, he said, needs to have someone better that they can learn from, someone lesser who they can teach, and someone equal that they can challenge themselves against.</li>
</ol>
<div>
<div class="quote">
<p>It is impossible to learn that which one thinks one already knows.</p>
</div>
<div class="attribution">
Epictetus
</div>
</div>
<ol start="9" style="list-style-type: decimal">
<li>You cannot get better if you’re convinced you are the best.</li>
</ol>
<blockquote>
<p>Passion typically masks a weakness. Its breathlessness and impetuousness and franticness are poor substitutes for discipline, for mastery, for strength and purpose and perseverance. The critical work that you want to do will require your deliberation and consideration. It’d be far better if you were intimidated by what lies ahead—humbled by its magnitude and determined to see it through regardless. Leave passion for the amateurs.</p>
</blockquote>
<ol start="10" style="list-style-type: decimal">
<li>Greatness comes from humble beginnings; it comes from grunt work. It means you’re the least important person in the room—until you change that with results.</li>
<li>Imagine if for every person you met, you thought of some way to help them, something you could do for them?</li>
<li>The canvas strategy is about helping yourself by helping others. The person who clears the path ultimately controls its direction, just as the canvas shapes the painting.</li>
<li>It doesn’t degrade you when others treat you poorly; it degrades them.</li>
</ol>
<div>
<div class="quote">
<p>A proud man is always looking down on things and people; and, of course, as long as you are looking down, you cannot see something that is above you.</p>
</div>
<div class="attribution">
C.S.LEWIS
</div>
</div>
<ol start="14" style="list-style-type: decimal">
<li>Pride blunts the very instrument we need to own in order to succeed: our mind.</li>
<li>Ask yourself: “What am I missing right now that a more humble person might see?” “What am I avoiding, or running from, with my bluster, franticness, and embellishments?”</li>
</ol>
<div>
<div class="quote">
<p>That on which you so pride yourself will be your ruin.</p>
</div>
<div class="attribution">
Montaigne
</div>
</div>
<ol start="16" style="list-style-type: decimal">
<li>Make your workmanship better than the material you work on.</li>
</ol>
<h2 id="success">Success</h2>
<ol style="list-style-type: decimal">
<li>We must remain focused on the execution and on executing with excellence.</li>
<li>We must shun the false crown and continue working on what got us here. Because that’s the only thing that will keep us here.</li>
</ol>
<div>
<div class="quote">
<p>One of the symptoms of approaching nervous breakdown is the belief that one’s work is terribly important.</p>
</div>
<div class="attribution">
BERTRAND RUSSELL
</div>
</div>
<ol start="3" style="list-style-type: decimal">
<li>It’s beginning to think that we’re better, that we’re special, that our problems and experiences are so incredibly different from everyone else’s that no one could possibly understand.</li>
</ol>
<div>
<div class="quote">
<p>Play for the name on the front of the jersey, and they’ll remember the name on the back.</p>
</div>
<div class="attribution">
Tony Adams
</div>
</div>
<div>
<div class="quote">
<p>It requires a strong constitution to withstand repeated attacks of prosperity.</p>
</div>
<div class="attribution">
James Basford
</div>
</div>
<h2 id="failure">Failure</h2>
<ol style="list-style-type: decimal">
<li>This moment is not your life. But it is a moment in your life.</li>
<li>Anyone can win. But not everyone is the best possible version of themselves.</li>
<li>Attempting to destroy something out of hate or ego often ensures that it will be preserved and disseminated forever.</li>
<li>What do you dislike? Whose name fills you with revulsion and rage? Now ask: Have these strong feelings really helped you accomplish anything?</li>
<li>Where has hatred and rage ever really gotten anyone?</li>
</ol>
<div>
<div class="quote">
I don’t like work — no man does — but I like what is in the work — the chance to find yourself.
</div>
<div class="attribution">
JOSEPH CONRAD
</div>
</div>]]></description>
    <pubDate>Sun, 11 Sep 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-09-11-ego-is-the-enemy-ryan-holiday.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Clone only a Single Branch</title>
    <link>http://blog.ssanj.net/posts/2016-08-29-git-clone-only-a-single-branch.html</link>
    <description><![CDATA[<p>Cloning a Git repository gives you all the branches by default. Sometimes you might just want a single branch. To do that use:</p>
<pre class="command scrollx"><code>git clone [url] -b [branch-name] --single-branch</code></pre>
<p>reference: <a href="http://stackoverflow.com/questions/4811434/clone-only-one-branch#14930421">so:clone-only-one-branch</a></p>]]></description>
    <pubDate>Mon, 29 Aug 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-08-29-git-clone-only-a-single-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to get a Job in any Economy</title>
    <link>http://blog.ssanj.net/posts/2016-08-28-how-to-get-job-in-any-economy.html</link>
    <description><![CDATA[<p>I recently watched <a href="https://youtu.be/gCVZIpxUEhg">Conan O’Brien in conversation with Harvard University President Drew Faust</a>. In it he answers a question about how make a name for yourself when starting out. He lists two main rules on how to get a job in any economy:</p>
<ol style="list-style-type: decimal">
<li>Work really hard.</li>
<li>Be easy to work with.</li>
</ol>
<p>He elaborates on point 2 with:</p>
<ul>
<li>Be someone people enjoy working with.</li>
<li>Be helpful.</li>
<li>Try to help the group (not just yourself).</li>
<li>Be kind.</li>
<li>Be nice.</li>
</ul>
<p>Great words to work by. :)</p>]]></description>
    <pubDate>Sun, 28 Aug 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-08-28-how-to-get-job-in-any-economy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

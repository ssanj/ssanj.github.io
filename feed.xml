<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 13 Apr 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Twitter in Small Doses</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-twitter-in-small-doses.html</link>
    <description><![CDATA[<p>I’ve been guilty of checking Twitter almost habitually at every free moment I have. It’s like I expect something new and interesting to be happening every five minutes - it isn’t.</p>
<p>Recently I tried limiting my Twitter exposure to set times during the day: once in the morning, once at lunch and once after work. I found that this really reduced the mental stress of constantly processing mostly useless information on Twitter. It also helped me to focus more on the few tweets I did care about and respond to them thoughtfully instead of smart-arse comments. Another benefit was that I was able to concentrate deeper on the actual work I had to do because I wasn’t constantly context-switching with Twitter.</p>
<p>Something else that because crystal clear was that nothing happening on Twitter was all that important. This again made it much easier to stay way from it.</p>
<p>If you are habitually checking Twitter or some other social media constantly, try and give yourself a schedule of when you can check it. You’ll soon find that these platforms while they maybe useful sometimes are more often than not, a complete waste of time.</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-twitter-in-small-doses.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Everyday Escapism</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-everyday-escapism.html</link>
    <description><![CDATA[<p>I recently read <a href="https://medium.com/the-coffeelicious/reading-fiction-as-meditation-9a6bb42d9f82#.u6elxf69u">Reading Fiction as Meditation</a>. It spoke about escapism - escaping from your daily grind and giving your mind a break. It got me thinking about other things that could give you the same effect. Here’s an interesting quote from the article:</p>
<blockquote>
<p>I’ve seen too much online about “how to read more quickly.” Bollocks. It’s not a competition. It’s relaxation: an act of escapism. I mean, who goes to a cinema and asks them to put the film on fast forward with subtitles so they can watch it faster?</p>
</blockquote>
<p>I came up with the following list of mundane tasks that could provide you with that daily dose of escapism - if you let it. And what I mean by that is that you have to only focus on the task and cut out all other distractions like watching TV, reading Twitter, listening to a podcast etc while doing these tasks.</p>
<ul>
<li>Ironing your clothes</li>
<li>Washing the dishes</li>
<li>Cooking a meal (frozen dinners do not count as cooking!)</li>
<li>Going for a walk</li>
<li>Cleaning (your house, car etc)</li>
<li>Sketching in a journal</li>
<li>Playing an instrument</li>
<li>Playing with your children</li>
<li>Having a relaxing brew</li>
<li>Having a cat nap</li>
</ul>
<p>What others can you think of?</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-everyday-escapism.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Be Thankful for the Gift of Life</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-be-thankful-for-the-gift-of-life.html</link>
    <description><![CDATA[<p>It’s easy to complain. It’s easy to think your life is really hard. It isn’t. It could be so much worse.</p>
<p>You could have cancer. You could be homeless. You could have lost one or more of your senses. You could be unemployed. You could be depressed. You could be an addict. You could live in a war zone. You could be dead. Chances are, you could be worse off in a lot of ways than you are now.</p>
<p>Your life is good. It’s a gift. Be thankful. Enjoy it.</p>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-be-thankful-for-the-gift-of-life.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Automatically Insert Scala Package with Scoggle</title>
    <link>http://blog.ssanj.net/posts/2016-04-13-automatically-insert-scala-package-with-scoggle.html</link>
    <description><![CDATA[<p>When using Sublime Text for Scala development I found myself constantly hand-crafting the package path of every Scala file I created. While this was annoying, once I spent the two seconds to convert the file path to a dotted path and type it in, I completely forgot about it - until the next time.</p>
<p>Sometime last week I started wondering if I could use the <a href="https://github.com/ssanj/Scoggle">Scoggle</a> code base to implement this new functionality. I knew I had all the necessary information to make this possible in Scoggle, but thought it belonged in its own Sublime plugin.</p>
<p>A couple of days ago, I decided to simply add it into Scoggle as a supplementary feature. The results have been great! I no longer have to hand-craft package paths! Have a look at it in action below.</p>
<div class="figure">
<img src="/images/scoggle_sublime_text_plugin_insert_package.gif" alt="Inserting a package through Scoggle" />
<p class="caption">Inserting a package through Scoggle</p>
</div>]]></description>
    <pubDate>Wed, 13 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-13-automatically-insert-scala-package-with-scoggle.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Where are the Default Plugins in Sublime Text 3 Located in OSX?</title>
    <link>http://blog.ssanj.net/posts/2016-04-11-where-are-the-default-plugins-in-sublime-text-3-located-in-osx.html</link>
    <description><![CDATA[<p>The default plugins included with Sublime Text are a great source of information on how to use the <a href="http://www.sublimetext.com/docs/3/api_reference.html">Sublime Text 3 api</a>. Unfortunately, the default plugins can’t be found in the usual Packages directory. On OSX, they are <a href="https://forum.sublimetext.com/t/st3-where-is-default-osx-sublime-keymap-located/10757">neatly tucked away</a> in the application installation file located at:</p>
<pre class="command scrollx"><code>/Applications/Sublime Text 3.app/Contents/MacOS/Packages</code></pre>
<p>The default plugins (and configuration) are stored within a file called: <strong>Default.sublime-package</strong>, which is simply a zip file.</p>
<p>To view the files you can extract the Default.sublime-package to a temporary directory with unzip:</p>
<pre class="command scrollx"><code>unzip /Applications/Sublime Text 3.app/Contents/MacOS/Packages/Default.sublime-package -d some/temp/dir</code></pre>
<p>And now you have full access to a host of example plugins to work with.</p>]]></description>
    <pubDate>Mon, 11 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-04-11-where-are-the-default-plugins-in-sublime-text-3-located-in-osx.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Easily Convert an MOV File into an Animated Gif on OSX</title>
    <link>http://blog.ssanj.net/posts/2016-03-30-easily-convert-an-mov-file-into-an-animated-gif.html</link>
    <description><![CDATA[<p>Say you’ve recorded a screencast using Quicktime, but now want to share it as an animated gif. How would you go about it? Luckily there is a very simple way to do it. Follow the instructions on <a href="https://gist.github.com/dergachev/4627207">OS X Screencast to animated GIF</a> to get it going. You need to install <a href="https://sourceforge.net/projects/ffmpeg">ffmpeg</a> and <a href="http://www.lcdf.org/gifsicle">gifsicle</a> to do all the heavy lifting.</p>
<pre class="terminal scrollx"><code>brew install ffmpeg
brew cask install x-quartz #dependency for gifsicle, only required for mountain-lion and above
open /usr/local/Cellar/x-quartz/2.7.4/XQuartz.pkg # runs the XQuartz installer
brew install gifsicle</code></pre>
<p>Then you can either run with the sample config:</p>
<pre class="terminal scrollx"><code>ffmpeg -i in.mov -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 &gt; out.gif</code></pre>
<p>or customise it to suite your needs:</p>
<ul>
<li>-r specifies the framerate. The default is 25. In the above example it is 10.</li>
<li>-s specifies the width and height. In the above example it is 600x400.</li>
<li>–delay specifies the time between each gif in hundreths of a second. In the above example it is 30ms (1/100 * 3 * 1000).</li>
<li>–optimize specifies the file-size optimisation. There are 3 levels. 3 is the highest.</li>
</ul>
<p>See the <a href="http://linux.die.net/man/1/ffmpeg">ffmpeg man page</a> and the <a href="http://www.lcdf.org/gifsicle/man.html">gifsicle man page</a> for more information.</p>
<p><a href="https://github.com/dergachev">derchagev</a> has written a snazzier version of this called <a href="https://github.com/dergachev/screengif">screengif</a>. It requires either Docker or Vagrant or a bunch of other stuff I didn’t want to install for this tool so I chose not to install it. It would be well worth having a look if you are interested.</p>
<p>Below is a sample gif created with the following config settings:</p>
<pre class="terminal scrollx"><code>fmpeg -i convert_mov_to_gif.mov -s 800x600 -pix_fmt rgb24 -r 15 -f gif - | gifsicle --optimize=3 --delay=3 &gt; convert_mov_to_gif.gif</code></pre>
<div class="figure">
<img src="/images/convert_mov_to_gif.gif" alt="Sample Gif" />
<p class="caption">Sample Gif</p>
</div>]]></description>
    <pubDate>Wed, 30 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-03-30-easily-convert-an-mov-file-into-an-animated-gif.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>AlignTab Sublime Text Plugin</title>
    <link>http://blog.ssanj.net/posts/2016-03-30-align-tab-sublime-text-plugin.html</link>
    <description><![CDATA[<p>The <a href="https://packagecontrol.io/packages/AlignTab">AlignTab</a> plugin allows you to select a bunch of code and automatically align it on some arbitrary characters. Just choose <strong>AlignTab</strong> from the command palette (CMD + SHIFT + P) and you’re good to go.</p>
<p>Here’s an example of aligning on definition:</p>
<div class="figure">
<img src="/images/sublime_plugin_aligntab_on_equals.gif" alt="Align on Definition" />
<p class="caption">Align on Definition</p>
</div>
<p>And another on aligning on case matches:</p>
<div class="figure">
<img src="/images/sublime_plugin_aligntab_on_arrow.gif" alt="Align on Pattern Match" />
<p class="caption">Align on Pattern Match</p>
</div>
<p>Wouldn’t it be nice if you could preview the alignment before actually committing to it? Well you’re in luck with the <strong>Live Preview Mode</strong> you can do just that:</p>
<div class="figure">
<img src="/images/sublime_plugin_aligntab_on_comma.gif" alt="Align on Comma with Live Preview" />
<p class="caption">Align on Comma with Live Preview</p>
</div>
<p>Another nifty alignment is <strong>Table Mode</strong>. If you are writing a wiki-style table, this alignment automatically formats headings, columns and rows for you at application time and from then on. It also aligns any other tables you create on the page with the first table.</p>
<p><em>One caveate is that you need to escape the pipe symbol (|) (because it’s a regular expression) with a backslash before using it as a formatting character</em>.</p>
<div class="figure">
<img src="/images/sublime_plugin_aligntab_on_table.gif" alt="Align with Table Mode" />
<p class="caption">Align with Table Mode</p>
</div>
<p>You can also use complex regex matches for those highly customisable alignments. Dig into the <a href="https://github.com/randy3k/AlignTab">documentation</a> and <a href="https://github.com/randy3k/AlignTab/wiki/Examples">examples</a> to find out more.</p>]]></description>
    <pubDate>Wed, 30 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-03-30-align-tab-sublime-text-plugin.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Fame and Fortune will not Make You Happier</title>
    <link>http://blog.ssanj.net/posts/2016-03-28-fame-and-fortune-will-not-make-you-happy.html</link>
    <description><![CDATA[<p><a href="http://www.russellbrand.com">Russell Brand</a> succinctly sums up why fame and fortune will not make you happy.</p>
<iframe width="800" height="470" src="https://www.youtube.com/embed/56agS77XpDE?start=165" frameborder="0" allowfullscreen>
</iframe>]]></description>
    <pubDate>Mon, 28 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-03-28-fame-and-fortune-will-not-make-you-happy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Move Back and Forward through your Edit History with Sublime Text</title>
    <link>http://blog.ssanj.net/posts/2016-03-03-how-to-move-back-and-forward-through-your-edit-history-with-sublime-text.html</link>
    <description><![CDATA[<p>When using Sublime Text as your IDE, it’s pretty useful to be able to move through the history of your edits. I went looking for a plugin to do this on <a href="https://packagecontrol.io">Package Control</a> (as you do) but then <a href="https://packagecontrol.io/packages/Edit%20History">found out that this feature is inherently supported</a> in <a href="http://www.sublimetext.com/3">Sublime Text 3</a>.</p>
<div class="figure">
<img src="/images/sublime-jump-back-and-forward-through-history.jpg" alt="Jumping back and forward" />
<p class="caption">Jumping back and forward</p>
</div>
<p>If you want to change the key bindings, click on <strong>Preferences &gt; Key Bindings - User</strong> and add your key mappings. Here’s an example that uses ALT + COMMAND + LEFT and ALT + COMMAND + RIGHT to move back and forward through history respectively:</p>
<pre class="command scrollx"><code>    { &quot;keys&quot;: [&quot;alt+super+left&quot;], &quot;command&quot;: &quot;jump_back&quot; },
    { &quot;keys&quot;: [&quot;alt+super+right&quot;], &quot;command&quot;: &quot;jump_forward&quot; }</code></pre>]]></description>
    <pubDate>Thu, 03 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-03-03-how-to-move-back-and-forward-through-your-edit-history-with-sublime-text.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Run a Specific Main Class with Parameters through SBT</title>
    <link>http://blog.ssanj.net/posts/2016-03-02-how-to-run-a-specific-main-class-with-parameters-through-sbt.html</link>
    <description><![CDATA[<p>Say you’ve got a number of main classes in your SBT project. Issuing a</p>
<pre class="command scrollx"><code>&gt; run</code></pre>
<p>from SBT in <a href="http://www.scala-sbt.org/0.13.5/docs/Howto/interactive.html">interactive mode</a> will display a menu with options to run one of the many main classes detected:</p>
<pre class="terminal scrollx"><code> [1] net.ssanj.stm.refs.OneOfTwoValuesChangedAfterOneRead
 [2] net.ssanj.stm.tmap.AReadValueHasChangesAndAnotherKeyIsRead
 [3] net.ssanj.stm.tmap.AReadValueHasChangesAndIsReadAgain
 [4] net.ssanj.stm.tmap.AReadValueHasChangesNothingElseIsRead
 [5] net.ssanj.stm.tmap.AValueIsReadAndAnotherValueIsAdded
 [6] net.ssanj.stm.tmap.LostUpdateAdditionalRead
 [7] net.ssanj.stm.tmap.LostUpdateNoAdditionalRead
 [8] net.ssanj.stm.tmap.RetainTest
 [9] net.ssanj.stm.tmap.ThrowsException</code></pre>
<p>You can also do the same from the command line with:</p>
<pre class="terminal scrollx"><code>sbt run</code></pre>
<p>What if you needed to run a specific class but with some parameters? You can use:</p>
<pre class="command scrollx"><code>&gt; runMain package.path.to.main.class param1 param2</code></pre>
<p>or</p>
<pre class="command scrollx"><code>&gt; run-main package.path.to.main.class param1 param2</code></pre>
<p>in interactive mode.</p>
<p>To run from the command line you can use:</p>
<pre class="terminal scrollx"><code>sbt &quot;runMain package.path.to.main.class param1 param2&quot;</code></pre>
<p>or</p>
<pre class="terminal scrollx"><code>sbt &quot;run-main package.path.to.main.class param1 param2&quot;</code></pre>
<p>Although the above methods work, they are a bit tedious because you have to copy the full class path to the class you want to run. It would be nice to run a main class directly through menu with the some parameters. Something of the sort:</p>
<pre class="command scrollx"><code>&gt; run
 [1] net.ssanj.stm.refs.OneOfTwoValuesChangedAfterOneRead
 [2] net.ssanj.stm.tmap.AReadValueHasChangesAndAnotherKeyIsRead
 [3] net.ssanj.stm.tmap.AReadValueHasChangesAndIsReadAgain
 [4] net.ssanj.stm.tmap.AReadValueHasChangesNothingElseIsRead
 [5] net.ssanj.stm.tmap.AValueIsReadAndAnotherValueIsAdded
 [6] net.ssanj.stm.tmap.LostUpdateAdditionalRead
 [7] net.ssanj.stm.tmap.LostUpdateNoAdditionalRead
 [8] net.ssanj.stm.tmap.RetainTest
 [9] net.ssanj.stm.tmap.ThrowsException

&gt; 2 &quot;param1 param2&quot;</code></pre>]]></description>
    <pubDate>Wed, 02 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2016-03-02-how-to-run-a-specific-main-class-with-parameters-through-sbt.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

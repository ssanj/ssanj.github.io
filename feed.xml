<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 21 Oct 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>Connecting To An Existing Tmux Session</title>
    <link>http://blog.ssanj.net/posts/2022-10-21-connecting-to-an-existing-tmux-session.html</link>
    <description><![CDATA[<p>One of the cool things about <a href="https://github.com/tmux/tmux">tmux</a> is that, even if you close the terminal that tmux runs in, the tmux server process keeps your session around. That also means that you can reconnect to it from another terminal.</p>
<p>If you accidentally or purposely closed a terminal session that was running tmux, you can simply launch a new terminal instance and list your existing tmux sessions with:</p>
<pre class="terminal scrollx"><code>tmux ls</code></pre>
<p>You might get a list of the sort:</p>
<pre class="command scrollx"><code>git: 2 windows (created Tue Oct  4 09:30:12 2022) (attached)
projects: 6 windows (created Tue Oct  4 09:30:44 2022) (attached)</code></pre>
<p>Now to connect to any of the existing session simply use:</p>
<pre class="terminal scrollx"><code>tmux attach -t &lt;session_name&gt;</code></pre>
<p>For example to reconnect to the <code>projects</code> tmux session use:</p>
<pre class="terminal scrollx"><code>tmux attach -t projects</code></pre>
<p>And you’re back to where you left of!</p>
<p>There’s even a way to <a href="https://timvisee.com/blog/reconnect-to-broken-tmux-session/">Reconnect to Broken tmux Session</a></p>]]></description>
    <pubDate>Fri, 21 Oct 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-10-21-connecting-to-an-existing-tmux-session.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How To Add Different Icons To Application Instances On Macosx</title>
    <link>http://blog.ssanj.net/posts/2022-10-19-how-to-add-different-icons-to-application-instances-on-macosx.html</link>
    <description><![CDATA[<p>I run multiple <a href="https://alacritty.org/">Alacritty</a> instances for my development workflow. Each instance uses <a href="https://github.com/tmux/tmux">tmux</a> to manage multiple windows - one per project. I have one Alacritty instance that runs <a href="https://github.com/Extrawurst/gitui">GitUI</a> in full screen mode and the other instance runs the continuous compilation of each project in its own window. Oh, and they also run on separate monitors.</p>
<h2 id="monitor-configuration">Monitor Configuration</h2>
<p>I have one horizontal 32&quot; monitor which is my primary screen and a 27&quot; monitor turned vertical for my secondary screen.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/monitors.png" alt="Monitors" />
<p class="caption">Monitors</p>
</div>
<h3 id="primary-monitor">Primary Monitor</h3>
<p>The main monitor runs Alacritty with GitUI.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/gitui.png" alt="Gitui" />
<p class="caption">Gitui</p>
</div>
<h3 id="secondary-monitor">Secondary Monitor</h3>
<p>The secondary monitor runs another Alacritty instance with continuous compilation with the respective project’s compiler. If the project doesn’t have a compiler, the window opens to the project location from which I can run various commands.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/compilation.png" alt="Continuous Compilation" />
<p class="caption">Continuous Compilation</p>
</div>
<h3 id="the-issue">The Issue</h3>
<p>So what’s the problem that requires different application icons per instance?</p>
<p>When I run two instances of Alacritty, this is what my Application Switcher (<code>CMD</code> + <code>TAB</code>) looks like:</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/application-switcher.png" alt="Application Switcher" />
<p class="caption">Application Switcher</p>
</div>
<p>It becomes very hard to distinguish between the <code>Gitgui</code> Alacritty and the <code>Project</code> Alacritty instances. More often than not I pick the wrong one and have to try and choose a second time. It’s a little annoying.</p>
<p>I can use <a href="https://support.apple.com/en-us/HT204100">Misson Control</a> to display all the windows and choose from there.</p>
<div class="figure">
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/macos/Catalina/macos-catalina-mission-control-add-space-callout.jpg" alt="Mission Control - Apple.com" />
<p class="caption">Mission Control - Apple.com</p>
</div>
<p>The reason I don’t want to do this is because I’ve got an old MacBook Pro and zooming into Misson Control is slow. The whole process of:</p>
<ul>
<li>Go to Mission Control</li>
<li>Choose your Alacritty Window</li>
<li>Switch to that Window</li>
</ul>
<p>takes about 2 seconds. That’s way too long to maintain any kind of flow state when coding.</p>
<h3 id="the-solution">The Solution</h3>
<ol style="list-style-type: decimal">
<li>Create a copy of the application folder</li>
</ol>
<p>For example to create an Alacritty instance for <code>Whatever</code>s I can create a copy with:</p>
<pre class="terminal scrollx"><code>cp -r /Applications/Alacritty.app /Applications/Alacritty-Whatever.app</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>Open <code>Finder</code> and browse to the freshly copied application folder (<code>/Applications/Alacritty-Whatever.app</code> in the above example)</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/whatever-app.png" alt="Alacritty-Whatever.app" />
<p class="caption">Alacritty-Whatever.app</p>
</div>
<ol start="3" style="list-style-type: decimal">
<li>Open the information panel with <code>CMD</code> + <code>I</code>:</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/icon-placeholder.png" alt="Icon Placeholder" />
<p class="caption">Icon Placeholder</p>
</div>
<ol start="4" style="list-style-type: decimal">
<li>Find a new image (use <a href="https://images.google.com">Google Images</a>, <a href="https://macosicons.com/#/">macosicons</a> etc)</li>
<li>Drag the new image to the icon placeholder</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/drag-icon.png" alt="Drag in the New Image" />
<p class="caption">Drag in the New Image</p>
</div>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/replace-icon.png" alt="Update Icon" />
<p class="caption">Update Icon</p>
</div>
<ol start="6" style="list-style-type: decimal">
<li>Launch Copied app through Spotlight or <a href="https://www.alfredapp.com/">Alfred</a></li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/launch-new-app.png" alt="Launch Copied App" />
<p class="caption">Launch Copied App</p>
</div>
<ol start="7" style="list-style-type: decimal">
<li>Check the Application Switcher</li>
</ol>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/updated-app-switcher.png" alt="Updated Icon" />
<p class="caption">Updated Icon</p>
</div>
<h3 id="final-result">Final Result</h3>
<p>I used the above steps to create custom icons for Alacritty for both my projects and GitUI instances.</p>
<div class="figure">
<img src="/images/add-different-icons-to-applications-macos/custom-icons-workflow.png" alt="Alacritty Icons" />
<p class="caption">Alacritty Icons</p>
</div>
<p>The key is to launch the Alacritty-Projects application for projects and Alacritty-GitUI application for git-related work.</p>
<h3 id="downsides">Downsides</h3>
<p>This is the simplest way to give different application instances different icons that I have found. You have to essentially create a new application (by copying an existing one) just to change an icon for a different instance. You need one copy per instance you want to customise the icon for. This seems a little crazy.</p>
<div class="figure">
<img src="https://media.giphy.com/media/tn9LtuEXQRJqT6dWrx/giphy.gif" alt="Make it Easier" />
<p class="caption">Make it Easier</p>
</div>
<p>If you know of an easier/better way to do this please drop me comment.</p>
<p>Unfortunately any time you update the original application (Alacritty in this instance) you need to recreate your copies and do the whole updating icon dance.</p>
<h3 id="scripting">Scripting</h3>
<p>This whole process is pretty easy to script, providing you can create an icns file for the image you require or already have an alternate icns file. But it is not as reliable as the steps outlined above, as sometimes icon caching issues makes it hard to refresh the new icons. See below for more details</p>
<h4 id="generating-an-icns-file">Generating an icns File</h4>
<p>There’s a program called <a href="http://www.amnoid.de/icns/makeicns.html">mkicns</a> that lets you convert images from various formats like jpg, png etc to icns files that are used for your application icons.</p>
<p>You can install it through <a href="https://brew.sh/">Homebrew</a>:</p>
<pre class="terminal scrollx"><code>brew install makeicns</code></pre>
<p>You can generate an icns file for a given image with:</p>
<pre class="terminal scrollx"><code>makeicns -in your-image_file -out your.icns</code></pre>
<p>There are a bunch <a href="http://www.amnoid.de/icns/makeicns.html">more options for makeicn</a>, so make sure to check the <code>--help</code> option for any customizations you want to make.</p>
<h4 id="icon-refresh-issues">Icon Refresh Issues</h4>
<p>Now that we have our own icns file, we can do the following:</p>
<ol style="list-style-type: decimal">
<li>Create a copy of the application folder as above</li>
<li>Copy across the custom icns file into the <code>Content/Resources</code> folder and replace the <strong>existing</strong> icns file you want to replace.</li>
</ol>
<p>For example for Alacritty, the main ics file is <code>Content/Resources/alacritty.icns</code>, so you’d do:</p>
<pre class="terminal scrollx"><code>cp your.icns /Applications/Alacritty-Whatever.app/Content/Resources/alacritty.icns</code></pre>
<p>Now if you try to launch your custom application with your new shiny icon you will notice that it has not been updated.</p>
<div class="figure">
<img src="https://media.giphy.com/media/OPU6wzx8JrHna/giphy.gif" alt="Sad Face" />
<p class="caption">Sad Face</p>
</div>
<p>In order to do that you need to help macos understand that the application has changed and you may need to some or all of the steps below:</p>
<ol style="list-style-type: decimal">
<li>touch the application folder</li>
</ol>
<pre class="terminal scrollx"><code>touch /Applications/Alacritty-Whatever.app</code></pre>
<p>If that doesn’t work you may also need to do the following:</p>
<ol start="2" style="list-style-type: decimal">
<li>Kill all the things</li>
</ol>
<pre class="terminal scrollx"><code>sudo killall Finder
sudo killall Dock</code></pre>
<p>These steps are from <a href="https://www.sethvargo.com/replace-icons-osx/">Changing Mac OS X Application Icons Programmatically</a>.</p>
<p>A full working script:</p>
<pre class="terminal scrollx"><code>#!/bin/bash

cp -r /Applications/Alacritty.app /Applications/Alacritty-Whatever.app
cp whatever.icns /Applications/Alacritty-Whatever.app/Content/Resources/alacritty.icns
touch /Applications/Alacritty-Whatever.app
sudo killall Finder &amp;&amp; sudo killall Dock</code></pre>
<p>And hopefully that should be it. But sometimes it isn’t.</p>
<div class="figure">
<img src="https://media.giphy.com/media/22CEvbj04nLLq/giphy.gif" alt="Aaaaaaaaaaaaaaaargh" />
<p class="caption">Aaaaaaaaaaaaaaaargh</p>
</div>
<p>If that doesn’t work you may need more <a href="https://osxdaily.com/2022/05/23/clear-icon-cache-mac/">drastic</a> workarounds.</p>
<p>And at end of those drastic workarounds you might revert to just using the list of steps at the top of this article.</p>
<div class="figure">
<img src="https://media.giphy.com/media/B0vFTrb0ZGDf2/giphy.gif" alt="Small Smile" />
<p class="caption">Small Smile</p>
</div>
<p>A big thank you to Apple for making all this so damn hard.</p>
<div class="figure">
<img src="https://media.giphy.com/media/l0MYJlyOwdlT0SeU8/giphy.gif" alt="The End" />
<p class="caption">The End</p>
</div>
<h3 id="links">Links</h3>
<ul>
<li><a href="https://www.sethvargo.com/replace-icons-osx/">Changing Mac OS X Application Icons Programmatically</a></li>
<li><a href="https://osxdaily.com/2022/05/23/clear-icon-cache-mac/">How to Clear Icon Cache on Mac</a></li>
<li><a href="https://stackoverflow.com/questions/646671/how-do-i-set-the-icon-for-my-applications-mac-os-x-app-bundle">How do I set the icon for my application’s Mac OS X app bundle?</a></li>
<li><a href="https://stackoverflow.com/questions/14362063/icon-for-mac-osx-bundle">Icon for Mac OSX bundle</a></li>
</ul>]]></description>
    <pubDate>Wed, 19 Oct 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-10-19-how-to-add-different-icons-to-application-instances-on-macosx.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Extending Scala Case Class With NoStackTrace Leads To Unexpected toString Behaviour</title>
    <link>http://blog.ssanj.net/posts/2022-07-20-extending-scala-case-class-with-nostacktrace-leads-to-unexpected-tostring-behaviour.html</link>
    <description><![CDATA[<p>Say you had an ADT similar to this:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError</code></pre></div>
<p>This might seem weird to some. Why are we extending <code>NoStackTrace</code> ? This allows us to use the <code>MyError</code> as a return value through something like an <code>Either</code>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">sanitiseInput</span>(value: String): Either[MyError, ValidInput]</code></pre></div>
<p>We can also use it as an error that can be thrown or raised into <a href="https://typelevel.org/cats-effect/">cats.IO</a>, <a href="https://fs2.io/#/">fs2.Stream</a>, <a href="https://monix.io/">Monix.eval.Task</a> or equivalent:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> IO {
  <span class="kw">def</span> raiseError[A](t: Throwable): IO[A] <span class="co">//`t` has to extend Throwable if we want to use this function.</span>

  <span class="co">//other functions</span>
}</code></pre></div>
<p>You can also read about some related ideas in <a href="https://nrinaudo.github.io/scala-best-practices/adts/errors_extend_exception.html">Make error ADTs subtypes of Exception</a>.</p>
<p>Now if we use <code>MyError</code> in a test:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">object</span> MyErrorSuite <span class="kw">extends</span> weaver.<span class="fu">FunSuite</span> {

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError

  <span class="fu">test</span>(<span class="st">&quot;error message&quot;</span>) {
    expect.<span class="fu">same</span>(<span class="fu">MyError1</span>(<span class="st">&quot;error1&quot;</span>), <span class="fu">MyError2</span>(<span class="st">&quot;error2&quot;</span>)) <span class="co">//this is an error</span>
  }

}</code></pre></div>
<p>the test output from <a href="https://disneystreaming.github.io/weaver-test/">Weaver-Test</a> gets truncated somewhat:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">[info] com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>
[info] - error message 30ms
[info] *************FAILURES**************
[info] com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>
[error] - error message 30ms
[error]   Values not equal: (src/test/scala/com/example/validation/extra/MyErrorSuite.<span class="fu">scala</span>:<span class="dv">12</span>)
[error]
[error]   com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>$[MyError1]  |  com.<span class="fu">example</span>.<span class="fu">validation</span>.<span class="fu">extra</span>.<span class="fu">MyErrorSuite</span>$[MyError2]</code></pre></div>
<p>All we get are the class names returned in the diff:</p>
<pre class="terminal scrollx"><code>com.example.validation.extra.MyErrorSuite$[MyError1]  |  com.example.validation.extra.MyErrorSuite$[MyError2]</code></pre>
<p>The diff we expected was something like:</p>
<pre class="terminal scrollx"><code> [MyError1]([error1]) | [MyError2]([error2]) //we can see that the class and error messages are different</code></pre>
<p>When you create a case class it generates a <code>toString</code> implementation of the form: <code>ClassName(field1Value, field2Value, ....)</code>.</p>
<p>So why are we loosing our <code>toString</code> implementation?</p>
<h2 id="cause">Cause</h2>
<p>Let’s try a simpler example in the REPL:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String)

scala&gt; <span class="fu">MyError1</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res35: MyError1 = <span class="fu">MyError1</span>(Oh noes) <span class="co">//&quot;Oh noes&quot; is output</span></code></pre></div>
<p>We can see that we do get the contents of all fields of the case class written out.</p>
<p>Let’s try extending <code>NoStackTrace</code> and see if it makes a difference:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res36: MyError2 = MyError2 <span class="co">//no message output</span></code></pre></div>
<p>We can see that although the class name is output the contents of the <code>message</code> field has not.</p>
<p>Interesting. This seems to be the cause of our issue in the test.</p>
<p>It turns out a case class doesn’t generate a <code>toString</code> method (and other implementations such has hashCode etc) if you <strong>already</strong> have a custom implementation for that method in a super type.</p>
<p><a href="https://github.com/scala/bug/issues/1549">It’s not a bug, it’s a feature</a>.</p>
<div class="figure">
<img src="https://media.giphy.com/media/l41YqG5h9gIWrcSBy/giphy.gif" alt="Nope" />
<p class="caption">Nope</p>
</div>
<p>So where does our <code>MyError2</code> class get a custom <code>toString</code> implementation from?</p>
<p>Lets have a look at the <code>NoStackTrace</code> class, since <code>MyError2</code> extends that:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">trait</span> NoStackTrace <span class="kw">extends</span> Throwable {
  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">fillInStackTrace</span>(): Throwable =
    <span class="kw">if</span> (NoStackTrace.<span class="fu">noSuppression</span>) <span class="kw">super</span>.<span class="fu">fillInStackTrace</span>()
    <span class="kw">else</span> <span class="kw">this</span>

  ...
}</code></pre></div>
<p>No <code>toString</code> implementation here. Let’s follow the inheritance trail to <code>java.lang.Throwable</code>. Here, we see that it <a href="https://github.com/EricChows/JDK-1.8-sourcecode/blob/d34a693ffa76fdbb0fea022b5bb7bfbd2c6df0bd/java/lang/Throwable.java#L390">does</a> have a custom <code>toString</code> implementation:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">toString</span>() {
    String s = <span class="fu">getClass</span>().<span class="fu">getName</span>();
    String message = <span class="fu">getLocalizedMessage</span>();
    <span class="kw">return</span> (message != <span class="kw">null</span>) ? (s + <span class="st">&quot;: &quot;</span> + message) : s;
}</code></pre></div>
<p>From the above implementation we can deduce that for <code>MyError2</code> the <code>getLocalizedMessage</code> method returns <code>null</code> because we only get back the class name <code>s</code> as output: (<code>MyError2</code>) as opposed to: <code>MyError2: message</code>.</p>
<p>Let’s follow along to <code>getLocalizedMessage</code> to see how <code>message</code> is calculated:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">getLocalizedMessage</span>() {
    <span class="kw">return</span> <span class="fu">getMessage</span>();
}</code></pre></div>
<p>and also to <code>getMessage</code>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> String <span class="fu">getMessage</span>() {
    <span class="kw">return</span> detailMessage;
}</code></pre></div>
<p>The <code>detailMessage</code> field is set through the many of the constructor methods for <code>Throwable</code>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> Throwable(String message) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = message; <span class="co">//set</span>
}

<span class="co">//or</span>

<span class="kw">public</span> Throwable(String message, Throwable cause) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = message; <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
}

<span class="co">//or</span>

<span class="kw">public</span> Throwable(Throwable cause) {
    <span class="fu">fillInStackTrace</span>();
    detailMessage = (cause==<span class="kw">null</span> ? <span class="kw">null</span> : cause.<span class="fu">toString</span>());  <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
}

<span class="co">//or</span>

<span class="kw">protected</span> Throwable(String message, Throwable cause,
                    <span class="dt">boolean</span> enableSuppression,
                    <span class="dt">boolean</span> writableStackTrace) {
    <span class="kw">if</span> (writableStackTrace) {
        <span class="fu">fillInStackTrace</span>();
    } <span class="kw">else</span> {
        stackTrace = <span class="kw">null</span>;
    }
    detailMessage = message;  <span class="co">//set</span>
    <span class="kw">this</span>.<span class="fu">cause</span> = cause;
    <span class="kw">if</span> (!enableSuppression)
        suppressedExceptions = <span class="kw">null</span>;
}</code></pre></div>
<p>Since we have a field named <code>message</code> and not <code>detailMessage</code>, we don’t really override the value used by <code>Throwable</code> to generate its <code>toString</code> implementation.</p>
<h2 id="workarounds">Workarounds</h2>
<p>If we renamed our <code>message</code> field in <code>MyError2</code> to <code>detailMessage</code> we should be able to get our <code>toString</code> implementation working:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(detailMessage: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res37: MyError2 = MyError2 <span class="co">//Doesn&#39;t work</span></code></pre></div>
<p>Wow! That didn’t work either. Why though?</p>
<p>If we look at the definition of the <code>detailMessage</code> field on <code>java.lang.Throwable</code> we see that it’s <strong>private</strong>:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">private</span> String detailMessage;</code></pre></div>
<p>This means we can’t override it from a sub class. Boo!</p>
<p>From our previous investigation we can see that all we need to do is override either <code>getLocalizedMessage</code> or <code>getMessage</code> or <code>toString</code> which are all <strong>public</strong>:</p>
<pre><code>public String toString() {
    String s = getClass().getName();
    String message = getLocalizedMessage(); //message calculated from here
    return (message != null) ? (s + &quot;: &quot; + message) : s;
}


public String getLocalizedMessage() {
    return getMessage(); //message content retrieved from here
}


public String getMessage() {
    return detailMessage; //message content
}</code></pre>
<h3 id="override-getmessage-or-getlocalizedmessage">Override getMessage or getLocalizedMessage</h3>
<p>By overriding <code>getMessage</code> or <code>getLocalizedMessage</code> in our case class, we can get some form of <code>toString</code>-ery happening. While this is not ideal, it “works”.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(<span class="kw">override</span> <span class="kw">val</span> getMessage: String) <span class="kw">extends</span> NoStackTrace

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res38: MyError2 = MyError2: Oh noes <span class="co">//We did it!</span></code></pre></div>
<h3 id="override-tostring">Override toString</h3>
<p>If you want a more case classy <code>toString</code> implementation, you’re going to have to do it yourself:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span> NoStackTrace {
  <span class="kw">override</span> <span class="kw">def</span> toString: String = s<span class="st">&quot;MyError2($message)&quot;</span>
}

scala&gt; <span class="fu">MyError2</span>(<span class="st">&quot;Oh noes&quot;</span>)
<span class="kw">val</span> res39: MyError2 = <span class="fu">MyError2</span>(Oh noes) <span class="co">//we have case classiness</span></code></pre></div>
<p>Now we can get our test to fail with a better error message:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scala.<span class="fu">util</span>.<span class="fu">control</span>.<span class="fu">NoStackTrace</span>

<span class="kw">object</span> MyErrorSuiteTake2 <span class="kw">extends</span> weaver.<span class="fu">FunSuite</span> {

<span class="kw">sealed</span> <span class="kw">trait</span> MyError <span class="kw">extends</span> NoStackTrace {
  <span class="kw">val</span> message: String

  <span class="kw">override</span> <span class="kw">def</span> toString: String = {
    <span class="kw">val</span> className = getClass.<span class="fu">getName</span>
    s<span class="st">&quot;$className($message)&quot;</span>
   }
}

<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError1</span>(message: String) <span class="kw">extends</span>  MyError
<span class="kw">final</span> <span class="kw">case</span> <span class="kw">class</span> <span class="fu">MyError2</span>(message: String) <span class="kw">extends</span>  MyError

  <span class="fu">test</span>(<span class="st">&quot;error message&quot;</span>) {
    expect.<span class="fu">same</span>(<span class="fu">MyError1</span>(<span class="st">&quot;error1&quot;</span>), <span class="fu">MyError2</span>(<span class="st">&quot;error2&quot;</span>))
  }
}</code></pre></div>
<p>Which results in:</p>
<pre class="terminal scrollx"><code>info] com.example.validation.extra.MyErrorSuiteTake2
[error] - error message 38ms
[error]   Values not equal: (src/test/scala/com/example/validation/extra/MyErrorSuiteTake2.scala:20)
[error]
[error]   com.example.validation.extra.MyErrorSuiteTake2$[MyError1]([error1])  |  com.example.validation.extra.MyErrorSuiteTake2$[MyError2]([error2])
</code></pre>
<p>All this seems a bit tedious… as does extending the <code>Exception</code> hierarchy. If you do decide to go this route, hopefully this will help you stave off at least one of the issues with extending <code>java.lang.Throwable</code> and friends.</p>]]></description>
    <pubDate>Wed, 20 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-07-20-extending-scala-case-class-with-nostacktrace-leads-to-unexpected-tostring-behaviour.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Naming a tmux Session</title>
    <link>http://blog.ssanj.net/posts/2022-07-16-naming-a-tmux-session.html</link>
    <description><![CDATA[<p>When you start a new <a href="https://github.com/tmux/tmux">tmux</a> session with:</p>
<pre class="terminal scrollx"><code>tmux</code></pre>
<p>If you list your tmux session with:</p>
<pre class="terminal scrollx"><code>tmux ls</code></pre>
<p>You’ll see a default name used for your sessions:</p>
<pre class="terminal scrollx"><code>2: 1 windows (created Sat Jul 16 15:59:49 2022) (attached)</code></pre>
<p>In the above the name of the tmux session is <strong>2</strong>. Remembering these numbers can become unwheldly when you have many tmux sessions running, each with a different purpose.</p>
<p>The easier way to create a new session is by giving it a name of your choosing:</p>
<pre class="terminal scrollx"><code>tmux new -s your_cool_name_here</code></pre>
<p>And now when you list your tmux sessions, you can easily find the session you just created:</p>
<pre class="terminal scrollx"><code>your_cool_name_here: 1 windows (created Sat Jul 16 16:03:46 2022) (attached)</code></pre>]]></description>
    <pubDate>Sat, 16 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-07-16-naming-a-tmux-session.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Move a Tab Between Split Panes in Sublime Text</title>
    <link>http://blog.ssanj.net/posts/2022-06-29-how-to-move-a-tab-between-split-panes-in-sublime-text.html</link>
    <description><![CDATA[<p>When looking up definitions of a complex <a href="https://scala-lang.org/">Scala</a> class in <a href="https://www.sublimetext.com/">Sublime Text</a> it’s quite common to open up a lot of related classes; each in a separate tab. 🤦🏾</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/many-tabs.png" alt="Related Classes" />
<p class="caption">Related Classes</p>
</div>
<p>In the past, I opened related classes in a new tab with the <code>goto_definition</code> command. This opens the class in a new tab in the current pane. I would repeat this for every definition I needed to look up. This very quickly leads to a lot of open tabs as shown in the image above.</p>
<p>It becomes very hard to keep track of the original class you were working on because there are so many tabs open. This can get overwhelming in more complex projects, sometimes leading to tens of related classes open in separate tabs.</p>
<p>One way I’ve found to manage this “tab overload” is to move these related classes to another split pane. For example you can create a vertical split pane with the <code>CMD</code> + <code>ALT</code> + <code>SHIFT</code> + <code>2</code> key combo.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/horizontal-split.png" alt="Vertical Split Pane" />
<p class="caption">Vertical Split Pane</p>
</div>
<p>I used to click-and-drag the required tabs between split panes.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/click-drag-between-panes.gif" alt="Dragging Tabs Between Panes" />
<p class="caption">Dragging Tabs Between Panes</p>
</div>
<p>While this is fine it does become a little tedious when you have many open tabs that you want to move. It’s much easier if you can do it through a keyboard shortcut.</p>
<p>To my surprise, Sublime Text already had this feature buried in the <code>View</code> menu. Sublime Text refers to the split panes as “groups” and lets you move files between these “groups”.</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/st-menu.png" alt="Sublime Text View Menu" />
<p class="caption">Sublime Text View Menu</p>
</div>
<p>Now I can seamlessly move tabs to pane below with <code>CTRL</code> + <code>SHIFT</code> + <code>2</code>. So much easier :) What would make this even better is if Sublime Text selected the tab to the <code>right</code> after a move instead of the one on the <code>left</code>. That way you could combo your way through all the open tabs (assuming they were stacked to the right) without moving your mouse .</p>
<div class="figure">
<img src="/images/how-to-move-between-split-panes-st/move-views-between-panes.gif" alt="Move to Split Pane 2" />
<p class="caption">Move to Split Pane 2</p>
</div>
<p>More generally you can move tabs to a pane with a given number with <code>CTRL</code> + <code>SHIFT</code> + <code>PANE_NUMBER</code></p>]]></description>
    <pubDate>Wed, 29 Jun 2022 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2022-06-29-how-to-move-a-tab-between-split-panes-in-sublime-text.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Feedback on Java Planet Enum in Haskell</title>
    <link>http://blog.ssanj.net/posts/2021-09-09-feedback-on-java-planet-enum-in-Haskell.html</link>
    <description><![CDATA[<p>A few weeks ago I <a href="https://sanj.ink/posts/2021-08-26-java-planet-enum-in-Haskell.html">posted</a> my attempt at implementing <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java’s Planet Enumeration example</a> in Haskell. There was some useful feedback from <a href="https://www.reddit.com/r/haskell/comments/petl9t/encoding_the_java_planet_enumeration_example_in/">Reddit</a>, so I though I’d discuss the different implementation options mentioned.</p>
<p><a href="https://www.reddit.com/user/brandonchinn178/">brandonchinn178</a> mentioned some great changes. The first was to do away with <code>PlanetStat</code> and replace it with functions that pulled out the necessary data when given a Planet:</p>
<blockquote>
<p>You mentioned Java having a “mapping for free”. In Haskell, you can also get mappings for free with functions; after all, functions are maps from inputs to outputs</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">Mercury</span> <span class="fu">=</span> <span class="fu">...</span>
radius <span class="fu">...</span> <span class="fu">=</span> <span class="fu">...</span>

<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">Mercury</span> <span class="fu">=</span> <span class="fu">...</span>
mass <span class="fu">...</span> <span class="fu">=</span> <span class="fu">...</span></code></pre></div>
<blockquote>
<p>This gets rid of the need for the PlanetStat data type, which I think is better, but wouldnt be good if eventually, you want to load the stats from a JSON file (for example)</p>
</blockquote>
<p>This is more idiotmatic Haskell. The only down side is that you don’t pull out all the information you need at the same time and have to write two functions in this case.</p>
<p>He also mentioned a few other changes:</p>
<blockquote>
<p>you dont need type annotations for minBound/maxBound, since you have the final result typed as [Planet]</p>
</blockquote>
<p>This is true and an easy fix.</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetValues ::</span> [<span class="dt">Planet</span>]
planetValues <span class="fu">=</span> [minBound <span class="fu">..</span> maxBound]</code></pre></div>
<blockquote>
<p>I personally wouldnt have a newtype for literally every single function output. I would say its fine to just return a Double for surface gravity / weight</p>
</blockquote>
<p>I erred on the side of “readability” for this one, but adding in a lot of newtypes does add noise.</p>
<blockquote>
<p>“massOnEarth” is misleading: its the mass regardless of what planet youre on</p>
</blockquote>
<p>I am not so sure about this one. From the Java example it does seem like the mass supplied is the one on Earth which is then compared to its mass on other planets.</p>
<blockquote>
<p>instead of traversing a simple putStrLn over a formatted list of strings, I would defer the string rendering as much as possible, e.g.</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">let</span> planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]
    render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="fu">...</span>
<span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<p>I’ve always found Haskell’s String concatenation/interpolation a bit clunky so I’ve taken to separating the String generation to separate functions. But this suggestion makes a lot of sense - collect all your data and then render it once without rendering pieces of your data as you go.</p>
<blockquote>
<p>or even just go all-in with the iteration</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">runPlanets earthWeight <span class="fu">=</span>
  forM_ [minBound <span class="fu">..</span> maxBound] <span class="fu">$</span> \planet <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> newWeight <span class="fu">=</span> surfaceWeight mass planet
    putStrLn <span class="fu">$</span> <span class="st">&quot;Your mass on &quot;</span> <span class="fu">&lt;&gt;</span> show planet <span class="fu">&lt;&gt;</span> <span class="fu">...</span>
  <span class="kw">where</span>
    mass <span class="fu">=</span>
      <span class="kw">let</span> <span class="dt">SurfaceGravity</span> earthGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>
      <span class="kw">in</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthGravity</code></pre></div>
<p>Another interesting suggestion.</p>
<p>I think the biggest trap I fell into while encoding the Java solution into Haskell was just that - Encoding a Java solution into Haskell. Instead, I should have solved it in the way Haskell enables you to.</p>
<p><a href="https://www.reddit.com/user/asthetaperlight/">asthetaperlight</a> had some ideas on the use of newtypes:</p>
<blockquote>
<p>For throwaway code like this, sure. But it would also be fine to write it as a shell script, if for some reason you really felt like it. Dimensional analysis is the static typing of physics. Not the fancy stuff that makes you want to use Haskell instead of Java - the “has literally any types at all” that makes you want to use C instead of B. Better to build good habits before you need them.</p>
</blockquote>
<blockquote>
<p>That said, SurfaceWeight doesn’t make much sense as written. Either go all in and tag it with a phantom Planet …</p>
</blockquote>
<p><code>SurfaceWeight</code> didn’t really make much sense on its own. I love the idea about saying “this is the weight on this planet” and tagging the weight with a phantom Planet.</p>
<p>The warning around using the above technique is funny and cautions against using unnecessary complexity:</p>
<blockquote>
<p>Then seriously rethink whatever aspect of your design made that seem necessary …</p>
</blockquote>
<p>😂</p>
<blockquote>
<p>or make it what it is: newtype Weight = Weight Double.</p>
</blockquote>
<p><code>SurfaceWeight</code> seems too specific and <code>Weight</code> seems like a more natural wrapper type.</p>
<p><a href="https://www.reddit.com/user/friedbrice/">friedbrice</a> has some interesting insights:</p>
<blockquote>
<p>Nice post, I hope you’re enjoying Haskell.</p>
</blockquote>
<blockquote>
<p>One thing that I find interesting, you bring up a decisive difference between object oriented programming and functional programming: how object oriented programming packages data and behavior together, and how functional programming separates data and behavior. it may seem like a bummer at first that you have to write each enum value twice, once when the data is defined, and once when the behavior is defined, but there’s a very good reason that functional programming encourages this separation.</p>
</blockquote>
<blockquote>
<p>I think we anthropomorphize the computer too much, and so I don’t like calling it behavior. I like calling it interpretation, specifically interpretation of the data. One common theme of object oriented programming is that the downstream user is not allowed to interpret the data. The data is hidden from them, and the interpretation is defined solely by the upstream user. sometimes, this is exactly what you want. Haskell has many ways to hide data, not least of all are simple things like partial application and closures, hiding through scope instead of access modifiers.</p>
</blockquote>
<blockquote>
<p>The problem is that object oriented programming insists that you always hide your data like this. most of the time, you don’t want to hide your data. Your behavior, your planet stats, is one interpretation of the data. The power of functional programming is that it need not be the only interpretation.</p>
</blockquote>
<p>This idea of “data” having multiple “interpretations” is pretty cool. It’s something I had not thought of explicitly before. As previously mentioned by brandonchinn178, we could define a function each to get the <code>mass</code> and <code>radius</code> from a <code>Planet</code> as opposed to a <code>PlanetStat</code>. This is yet another interpretation of the <code>Planet</code> “data”.</p>
<h2 id="code-with-recommendations">Code with Recommendations</h2>
<p><details> <summary>brandonchinn178’s recommendations</summary></p>
<h3 id="brandonchinn178---1">brandonchinn178 - 1</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Brandonchinn178/Planets_1.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Brandonchinn178.Planets_1</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> m)   <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> r) <span class="fu">=</span> radius planet
    <span class="kw">in</span> gConstant <span class="fu">*</span> m <span class="fu">/</span> (r <span class="fu">*</span> m)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> sg <span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets sampleWeight <span class="fu">=</span>
    <span class="kw">let</span> earthSurfaceGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> sampleWeight <span class="fu">/</span> earthSurfaceGravity

        planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]
        render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show weight)

    <span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<h3 id="brandonchinn178---2">brandonchinn178 - 2</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Brandonchinn178/Planets_2.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Brandonchinn178.Planets_2</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (forM_, traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> m)   <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> r) <span class="fu">=</span> radius planet
    <span class="kw">in</span> gConstant <span class="fu">*</span> m <span class="fu">/</span> (r <span class="fu">*</span> m)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> sg <span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
  forM_ [minBound <span class="fu">..</span> maxBound] <span class="fu">$</span> \planet <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="kw">let</span> newWeight <span class="fu">=</span> surfaceWeight mass planet
    putStrLn <span class="fu">$</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show planet <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show newWeight)
  <span class="kw">where</span>
    mass <span class="fu">=</span>
      <span class="kw">let</span> earthGravity <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>
      <span class="kw">in</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthGravity</code></pre></div>
<p></details></p>
<p><details> <summary>asthetaperlight’s recommendations</summary></p>
<h3 id="asthetaperlight">asthetaperlight</h3>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Recommendations/Asthetaperlight/Planets.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Recommendations.Asthetaperlight.Planets</span>(runPlanets) <span class="kw">where</span>

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }


<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Weight</span> <span class="fu">=</span> <span class="dt">Weight</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>

<span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">Weight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetValues ::</span> [<span class="dt">Planet</span>]
        planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]

<span class="ot">        printSurfaceWeight ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
        printSurfaceWeight planet (<span class="dt">Weight</span> sw) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> (show planet) <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show sw)

<span class="ot">        planetStatsStrings ::</span> [<span class="dt">String</span>]
        planetStatsStrings <span class="fu">=</span> (\p <span class="ot">-&gt;</span> printSurfaceWeight p (surfaceWeight massOnEarth p)) <span class="fu">&lt;$&gt;</span> planetValues
    <span class="kw">in</span>
       traverse_ putStrLn planetStatsStrings</code></pre></div>
<p></details></p>
<p><details open> <summary>Final Update</summary></p>
<p>And here’s the final implementation I decided to use given the above recommendations:</p>
<p><a href="https://github.com/ssanj/java-plants-enum-in-haskell/blob/main/src/Final/Planets.hs">code</a></p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Final.Planets</span>(runPlanets) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)

<span class="co">-- Haskell implementation of the Java Enum: Planets example</span>
<span class="co">-- https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</span>

<span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>


<span class="ot">radius ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Radius</span>
radius <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4397e6</span>
radius <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0518e6</span>
radius <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.37814e6</span>
radius <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">3.3972e6</span>
radius <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">7.1492e7</span>
radius <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">6.0268e7</span>
radius <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.5559e7</span>
radius <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="fl">2.4746e7</span>


<span class="ot">mass ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Mass</span>
mass <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">3.303e+23</span>
mass <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">4.869e+24</span>
mass <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.976e+24</span>
mass <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">6.421e+23</span>
mass <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.9e+27</span>
mass <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">5.688e+26</span>
mass <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">8.686e+25</span>
mass <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="fl">1.024e+26</span>


<span class="kw">newtype</span> <span class="dt">Gravity</span> <span class="fu">=</span> <span class="dt">Gravity</span> <span class="dt">Double</span> <span class="kw">deriving</span> <span class="dt">Show</span>

<span class="kw">newtype</span> <span class="dt">Weight</span> <span class="fu">=</span> <span class="dt">Weight</span> <span class="dt">Double</span> <span class="kw">deriving</span> <span class="dt">Show</span>


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Gravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Mass</span> mass&#39;)     <span class="fu">=</span> mass planet
        (<span class="dt">Radius</span> radius&#39;) <span class="fu">=</span> radius planet
    <span class="kw">in</span> <span class="dt">Gravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass&#39; <span class="fu">/</span> (radius&#39; <span class="fu">*</span> radius&#39;)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">Weight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Gravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">Weight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets sampleWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">Gravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> sampleWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetToWeight ::</span> [(<span class="dt">Planet</span>, <span class="dt">Weight</span>)]
        planetToWeight <span class="fu">=</span> map (\p <span class="ot">-&gt;</span> (p, surfaceWeight massOnEarth p)) [minBound <span class="fu">..</span> maxBound]

<span class="ot">        render ::</span> (<span class="dt">Planet</span>, <span class="dt">Weight</span>) <span class="ot">-&gt;</span> <span class="dt">String</span>
        render (p, weight) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> show p <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show weight)

    <span class="kw">in</span> mapM_ (putStrLn <span class="fu">.</span> render) planetToWeight</code></pre></div>
<p></details></p>]]></description>
    <pubDate>Thu, 09 Sep 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-09-09-feedback-on-java-planet-enum-in-Haskell.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Java Planet Enum in Haskell</title>
    <link>http://blog.ssanj.net/posts/2021-08-26-java-planet-enum-in-Haskell.html</link>
    <description><![CDATA[<p>A while back I was trying to implement the <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Java Planet Enum example</a> in Haskell. Below is the Java source taken directly from the Oracle documentation:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> <span class="kw">enum</span> Planet {
    <span class="fu">MERCURY</span> (<span class="fl">3.303e+23</span>, <span class="fl">2.4397e6</span>),
    <span class="fu">VENUS</span>   (<span class="fl">4.869e+24</span>, <span class="fl">6.0518e6</span>),
    <span class="fu">EARTH</span>   (<span class="fl">5.976e+24</span>, <span class="fl">6.37814e6</span>),
    <span class="fu">MARS</span>    (<span class="fl">6.421e+23</span>, <span class="fl">3.3972e6</span>),
    <span class="fu">JUPITER</span> (<span class="fl">1.9e+27</span>,   <span class="fl">7.1492e7</span>),
    <span class="fu">SATURN</span>  (<span class="fl">5.688e+26</span>, <span class="fl">6.0268e7</span>),
    <span class="fu">URANUS</span>  (<span class="fl">8.686e+25</span>, <span class="fl">2.5559e7</span>),
    <span class="fu">NEPTUNE</span> (<span class="fl">1.024e+26</span>, <span class="fl">2.4746e7</span>);

    <span class="kw">private</span> <span class="dt">final</span> <span class="dt">double</span> mass;   <span class="co">// in kilograms</span>
    <span class="kw">private</span> <span class="dt">final</span> <span class="dt">double</span> radius; <span class="co">// in meters</span>
    <span class="fu">Planet</span>(<span class="dt">double</span> mass, <span class="dt">double</span> radius) {
        <span class="kw">this</span>.<span class="fu">mass</span> = mass;
        <span class="kw">this</span>.<span class="fu">radius</span> = radius;
    }
    <span class="kw">private</span> <span class="dt">double</span> <span class="fu">mass</span>() { <span class="kw">return</span> mass; }
    <span class="kw">private</span> <span class="dt">double</span> <span class="fu">radius</span>() { <span class="kw">return</span> radius; }

    <span class="co">// universal gravitational constant  (m3 kg-1 s-2)</span>
    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">double</span> G = <span class="fl">6.67300E-11</span>;

    <span class="dt">double</span> <span class="fu">surfaceGravity</span>() {
        <span class="kw">return</span> G * mass / (radius * radius);
    }
    <span class="dt">double</span> <span class="fu">surfaceWeight</span>(<span class="dt">double</span> otherMass) {
        <span class="kw">return</span> otherMass * <span class="fu">surfaceGravity</span>();
    }
    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(String[] args) {
        <span class="kw">if</span> (args.<span class="fu">length</span> != <span class="dv">1</span>) {
            System.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;Usage: java Planet &lt;earth_weight&gt;&quot;</span>);
            System.<span class="fu">exit</span>(-<span class="dv">1</span>);
        }
        <span class="dt">double</span> earthWeight = Double.<span class="fu">parseDouble</span>(args[<span class="dv">0</span>]);
        <span class="dt">double</span> mass = earthWeight/EARTH.<span class="fu">surfaceGravity</span>();
        <span class="kw">for</span> (Planet p : Planet.<span class="fu">values</span>())
           System.<span class="fu">out.printf</span>(<span class="st">&quot;Your weight on </span><span class="ch">%s</span><span class="st"> is </span><span class="ch">%f%n</span><span class="st">&quot;</span>,
                             p, p.<span class="fu">surfaceWeight</span>(mass));
    }
}</code></pre></div>
<p>This seemed fairly easy. I started off by modelling a Planet and associated data:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }

<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">SurfaceWeight</span> <span class="fu">=</span> <span class="dt">SurfaceWeight</span> <span class="dt">Double</span>

<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span></code></pre></div>
<p>One difference between Haskell and OOP languages is that Haskell separates out data from behaviour while OOP languages combine data (or state) and behaviour into one construct - a class.</p>
<div class="figure">
<img src="/images/java-planet-enum/java-haskell-state-behaviour.png" alt="State and Behaviour in OOP vs FP" />
<p class="caption">State and Behaviour in OOP vs FP</p>
</div>
<p>In Java, <code>surfaceGravity</code> and <code>surfaceWeight</code> are bound to a particular Planet instance. In Haskell, as mentioned above, we don’t have behaviour and state stored together. How do we go about implementing these functions in Haskell?</p>
<p>Instead of having state and behaviour combined, we can <strong>use</strong> the state to derive any behaviour we need:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">SurfaceWeight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg</code></pre></div>
<p>Notice how we pass in the <code>Planet</code> instance we need to each function above. We don’t have a <code>this</code> reference as in most OOP languages. Here’s the Java implementation of the above functions with an explicit <code>this</code> reference added:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java">    <span class="dt">double</span> <span class="fu">surfaceGravity</span>() {
        <span class="kw">return</span> G * <span class="kw">this</span>.<span class="fu">mass</span> / (<span class="kw">this</span>.<span class="fu">radius</span> * <span class="kw">this</span>.<span class="fu">radius</span>);
    }

    <span class="dt">double</span> <span class="fu">surfaceWeight</span>(<span class="dt">double</span> otherMass) {
        <span class="kw">return</span> otherMass * <span class="kw">this</span>.<span class="fu">surfaceGravity</span>();
    }</code></pre></div>
<p>That solves one problem, but there’s another. It has to do with retrieving all the values of an enumeration. In the Java example we use:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java">Planet.<span class="fu">values</span>()</code></pre></div>
<p>How do we get all the values of an enumeration in Haskell?</p>
<p>You may have noticed the <code>deriving (Enum, Bounded ...)</code> syntax against the <code>Planet</code> data type. Using the <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#t:Enum">Enum</a> and <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#t:Bounded">Bounded</a> type classes we can retrieve all the values of the <code>Planet</code> sum type:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetValues ::</span> [<span class="dt">Planet</span>]
planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]</code></pre></div>
<p>The above code, grabs the first (<code>minBound</code>) and last (<code>maxBound</code>) values of the <code>Planet</code> sum type and the range syntax (<code>..</code>) makes it possible to enumerate all the values in between. Pretty nifty! The range syntax is made possible by having an <code>Enum</code> instance for a data type. See the <code>enumFrom</code>, <code>enumFromThen</code>, <code>enumFromThenTo</code> and <code>enumFromTo</code> functions on the <code>Enum</code> type class for more information.</p>
<p>It’s starting to look like we’ve got this solved pretty easily. Unfortunately we have another small problem. The <code>planetValues</code> function only gives us the <code>Planet</code> sum type - essentially the names of the planets. We also need to retrieve the mass and radius for each planet as per Java:</p>
<div class="sourceCode"><pre class="sourceCode java scrollx"><code class="sourceCode java"><span class="kw">public</span> <span class="kw">enum</span> Planet {
    <span class="fu">MERCURY</span> (<span class="fl">3.303e+23</span>, <span class="fl">2.4397e6</span>),
    <span class="fu">VENUS</span>   (<span class="fl">4.869e+24</span>, <span class="fl">6.0518e6</span>),
    <span class="fu">EARTH</span>   (<span class="fl">5.976e+24</span>, <span class="fl">6.37814e6</span>),
    <span class="fu">MARS</span>    (<span class="fl">6.421e+23</span>, <span class="fl">3.3972e6</span>),
    <span class="fu">JUPITER</span> (<span class="fl">1.9e+27</span>,   <span class="fl">7.1492e7</span>),
    <span class="fu">SATURN</span>  (<span class="fl">5.688e+26</span>, <span class="fl">6.0268e7</span>),
    <span class="fu">URANUS</span>  (<span class="fl">8.686e+25</span>, <span class="fl">2.5559e7</span>),
    <span class="fu">NEPTUNE</span> (<span class="fl">1.024e+26</span>, <span class="fl">2.4746e7</span>);
    ...</code></pre></div>
<p>How do we go about doing this?</p>
<p>We could create a <a href="https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html">Map</a> with <code>Planet</code> as the key and <code>PlanetStat</code> as the value. So far so good. But when we go to look up a value we have to use the <a href="https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#g:9">lookup</a> function:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">lookup<span class="ot"> ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Map</span> k a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</code></pre></div>
<p>The return type of the <code>lookup</code> function is a <a href="https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Maybe.html#t:Maybe">Maybe</a>. This means we have to deal with the possibility of not finding a particular <code>Planet</code> (the <code>Nothing</code> case):</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="co">-- planetMap :: Map Planet PlanetStat</span>

<span class="kw">case</span> (lookup somePlanet planetMap) <span class="kw">of</span>
  <span class="dt">Just</span> planet <span class="ot">-&gt;</span> <span class="co">-- cool planet-related stuff</span>
  <span class="dt">Nothing</span>     <span class="ot">-&gt;</span> <span class="co">-- this should never happen!</span></code></pre></div>
<p>We know this is impossible because we have a sum type for <code>Planet</code>, but because we are using a <code>Map</code> we need to deal with it.</p>
<p>Another way to encode this mapping is like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )</code></pre></div>
<p>This way we don’t have to deal with any optionality; this is a total function.</p>
<p>It’s interesting that Java gives us this mapping for “free” because it combines state and behaviour. In Haskell you need to bring state and behaviour together as required. A big thanks to my friend <a href="http://twitter.com/ajfitzpatrick">Adam</a> for pointing this out. In hindsight it seems obvious.</p>
<p>And that’s about it for surprises. Here’s the full solution:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Foldable</span> (traverse_)


<span class="kw">data</span> <span class="dt">Planet</span> <span class="fu">=</span> <span class="dt">MERCURY</span>
            <span class="fu">|</span> <span class="dt">VENUS</span>
            <span class="fu">|</span> <span class="dt">EARTH</span>
            <span class="fu">|</span> <span class="dt">MARS</span>
            <span class="fu">|</span> <span class="dt">JUPITER</span>
            <span class="fu">|</span> <span class="dt">SATURN</span>
            <span class="fu">|</span> <span class="dt">URANUS</span>
            <span class="fu">|</span> <span class="dt">NEPTUNE</span> <span class="kw">deriving</span> (<span class="dt">Enum</span>, <span class="dt">Bounded</span>, <span class="dt">Show</span>)


<span class="kw">newtype</span> <span class="dt">Mass</span> <span class="fu">=</span> <span class="dt">Mass</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">Radius</span> <span class="fu">=</span> <span class="dt">Radius</span> <span class="dt">Double</span>


<span class="kw">data</span> <span class="dt">PlanetStat</span> <span class="fu">=</span>
    <span class="dt">PlanetStat</span> {
<span class="ot">        mass   ::</span> <span class="dt">Mass</span>
    ,<span class="ot">   radius ::</span> <span class="dt">Radius</span>
    }


<span class="kw">newtype</span> <span class="dt">SurfaceGravity</span> <span class="fu">=</span> <span class="dt">SurfaceGravity</span> <span class="dt">Double</span>


<span class="kw">newtype</span> <span class="dt">SurfaceWeight</span> <span class="fu">=</span> <span class="dt">SurfaceWeight</span> <span class="dt">Double</span>

<span class="ot">gConstant ::</span> <span class="dt">Double</span>
gConstant <span class="fu">=</span> <span class="fl">6.67300E-11</span>

<span class="ot">planetStat ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">PlanetStat</span>
planetStat <span class="dt">MERCURY</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">3.303e+23</span>) (<span class="dt">Radius</span> <span class="fl">2.4397e6</span> )
planetStat <span class="dt">VENUS</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">4.869e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.0518e6</span> )
planetStat <span class="dt">EARTH</span>   <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.976e+24</span>) (<span class="dt">Radius</span> <span class="fl">6.37814e6</span>)
planetStat <span class="dt">MARS</span>    <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">6.421e+23</span>) (<span class="dt">Radius</span> <span class="fl">3.3972e6</span> )
planetStat <span class="dt">JUPITER</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.9e+27</span>  ) (<span class="dt">Radius</span> <span class="fl">7.1492e7</span> )
planetStat <span class="dt">SATURN</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">5.688e+26</span>) (<span class="dt">Radius</span> <span class="fl">6.0268e7</span> )
planetStat <span class="dt">URANUS</span>  <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">8.686e+25</span>) (<span class="dt">Radius</span> <span class="fl">2.5559e7</span> )
planetStat <span class="dt">NEPTUNE</span> <span class="fu">=</span> <span class="dt">PlanetStat</span> (<span class="dt">Mass</span> <span class="fl">1.024e+26</span>) (<span class="dt">Radius</span> <span class="fl">2.4746e7</span> )


<span class="ot">surfaceGravity ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceGravity</span>
surfaceGravity planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">PlanetStat</span> (<span class="dt">Mass</span> mass) (<span class="dt">Radius</span> radius)) <span class="fu">=</span> planetStat planet
    <span class="kw">in</span> <span class="dt">SurfaceGravity</span> <span class="fu">$</span> gConstant <span class="fu">*</span> mass <span class="fu">/</span> (radius <span class="fu">*</span> radius)


<span class="ot">surfaceWeight ::</span> <span class="dt">Mass</span> <span class="ot">-&gt;</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span>
surfaceWeight (<span class="dt">Mass</span> otherMass) planet <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> sg)<span class="fu">=</span> surfaceGravity planet
    <span class="kw">in</span> <span class="dt">SurfaceWeight</span> <span class="fu">$</span> otherMass <span class="fu">*</span> sg


<span class="ot">runPlanets ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
runPlanets earthWeight <span class="fu">=</span>
    <span class="kw">let</span> (<span class="dt">SurfaceGravity</span> earthSurfaceGravity) <span class="fu">=</span> surfaceGravity <span class="dt">EARTH</span>

<span class="ot">        massOnEarth ::</span> <span class="dt">Mass</span>
        massOnEarth <span class="fu">=</span> <span class="dt">Mass</span> <span class="fu">$</span> earthWeight <span class="fu">/</span> earthSurfaceGravity

<span class="ot">        planetValues ::</span> [<span class="dt">Planet</span>]
        planetValues <span class="fu">=</span> [(minBound<span class="ot"> ::</span> <span class="dt">Planet</span>) <span class="fu">..</span> (maxBound<span class="ot"> ::</span> <span class="dt">Planet</span>)]

<span class="ot">        printSurfaceWeight ::</span> <span class="dt">Planet</span> <span class="ot">-&gt;</span> <span class="dt">SurfaceWeight</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
        printSurfaceWeight planet (<span class="dt">SurfaceWeight</span> sw) <span class="fu">=</span> <span class="st">&quot;Your weight on &quot;</span> <span class="fu">&lt;&gt;</span> (show planet) <span class="fu">&lt;&gt;</span> <span class="st">&quot; is &quot;</span> <span class="fu">&lt;&gt;</span> (show sw)

<span class="ot">        planetStatsStrings ::</span> [<span class="dt">String</span>]
        planetStatsStrings <span class="fu">=</span> (\p <span class="ot">-&gt;</span> printSurfaceWeight p (surfaceWeight massOnEarth p)) <span class="fu">&lt;$&gt;</span> planetValues
    <span class="kw">in</span>
       traverse_ putStrLn planetStatsStrings</code></pre></div>
<p>The <a href="https://github.com/ssanj/java-plants-enum-in-haskell">source code</a> for the example can be found on Github.</p>
<p>If there are any easier/better ways to encode this example in Haskell, please free to drop in comment.</p>]]></description>
    <pubDate>Thu, 26 Aug 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-08-26-java-planet-enum-in-Haskell.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>If it's memorable it's reusable</title>
    <link>http://blog.ssanj.net/posts/2021-06-09-if-its-memorable-its-reusable.html</link>
    <description><![CDATA[<p>Memorable phrases are like a catchy tune; you can’t get them out of your head. Take this phrase for instance:</p>
<blockquote>
<p>Make the change easy, then make the easy change</p>
</blockquote>
<p>I heard it first on the <a href="https://elm-radio.com/episode/incremental-steps">Elm Radio</a> podcast. This was some very useful advice on how to introduce changes to a code base. First make it easy to introduce the change by refactoring your code, adding in tests etc. Then swoop in an add your change with minimal fuss. This is a nice reusable technique.</p>
<p><a href="https://twitter.com/KentBeck/status/250733358307500032?s=20">Kent Beck</a> originally said this back in 2012. I remember mentioning this pattern to a few colleagues at work and sure enough even months later they still keep referring to it.</p>
<p>If something is memorable, you are more likely to use it solve a given problem.</p>
<p>This got me thinking:</p>
<blockquote>
<p>Is memorable advice more useful than unmemorable advice?</p>
</blockquote>
<p>It seems obvious in hindsight. What good is advice if no one remembers it?</p>
<p>Another phrase I heard of recently was</p>
<blockquote>
<p>Teach me how to message</p>
</blockquote>
<p>a technique used by <a href="https://youtu.be/RN2_NchjrJQ">Richard Feldman</a> to identify functions of the following type in Elm:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">CustomType</span> <span class="ot">-&gt;</span> msg)</code></pre></div>
<p>Based on how you implement this function, you “teach” it how to create the appropriate message. Here’s an example from Richard’s presentation:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">Article.view <span class="fu">:</span>
  (<span class="dt">Article</span> a <span class="ot">-&gt;</span> msg) <span class="fu">//</span>teach this how to message
  <span class="ot">-&gt;</span> <span class="dt">Article</span> a
  <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</code></pre></div>
<p>Now everytime I see a function of the above shape I always think that it needs me to teach it how to message. Somehow that makes it easier to implement this function. I know what it “needs”.</p>
<p>There is something calming about seeing a problem in the code and knowing how to go about solving it. These catchy phrases become part of your swissarmy knife used to carve out solutions.</p>
<p>The next time you has stumbled on a great technique on how to solve a problem try and package it in memorable way.</p>]]></description>
    <pubDate>Wed, 09 Jun 2021 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2021-06-09-if-its-memorable-its-reusable.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Rerun a Failed Hedgehog Test Through Tasty with Stack</title>
    <link>http://blog.ssanj.net/posts/2020-12-15-how-to-rerun-a-failed-hedgehog-test-through-tasy.html</link>
    <description><![CDATA[<p>I recently had a failing <a href="https://hackage.haskell.org/package/hedgehog">Hedgehog</a> property while running some tests on a personal project. The output was something like:</p>
<pre class="terminal scrollx"><code>    versionRange failure: FAIL
        ✗ versionRange failure failed at test/DBPropSpec.hs:41:54
          after 1 test and 2 shrinks.

             ┏━━ test/DBPropSpec.hs ━━━
          25 ┃ hprop_versionRange_failure :: H.Property
          26 ┃ hprop_versionRange_failure =
          27 ┃   H.property $ do
          28 ┃     minR  &lt;- H.forAll $ Gen.int (Range.linear 0 99)
             ┃     │ 0
          29 ┃     maxR  &lt;- H.forAll $ Gen.int (Range.linear (minR + 1) 200)
             ┃     │ 1
          30 ┃     let upperG :: H.Gen Int =  Gen.int (Range.linear maxR (maxR + 100))
          31 ┃         lowerG :: H.Gen Int =  Gen.int (Range.linear (minR - 100) minR)
          32 ┃         minMax = (D.VersionRange minR maxR)
          33 ┃     versionE &lt;- H.forAll $ Gen.either lowerG upperG
             ┃     │ Left 0
          34 ┃     either (assertVersionRangeFailure minMax) (assertVersionRangeFailure minMax) versionE
          35 ┃       where
          36 ┃             assertVersionRangeFailure :: D.VersionRange -&gt; Int -&gt; H.PropertyT IO ()
          37 ┃             assertVersionRangeFailure maxMin version =
          38 ┃               let range = D.versionRange maxMin (D.mkNoteVersion version)
          39 ┃               in case range of
          40 ┃                   (D.InvalidNoteVersionRange v r) -&gt; (r H.=== maxMin) &gt;&gt; (v H.=== version)
          41 ┃                   (D.ValidNoteVersionRange _)     -&gt; H.failure
             ┃                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

          This failure can be reproduced by running:
          &gt; recheck (Size 99) (Seed 15737640735508047734 16943050916655939693) versionRange failure

      Use &#39;--hedgehog-replay &quot;Size 99 Seed 15737640735508047734 16943050916655939693&quot;&#39; to reproduce.</code></pre>
<p>While the output mentions that we can rerun the failed property with:</p>
<pre class="terminal scrollx"><code>Use &#39;--hedgehog-replay &quot;Size 99 Seed 15737640735508047734 16943050916655939693&quot;&#39; to reproduce.</code></pre>
<p>We can’t use this information directly if we are running the tests through <a href="https://hackage.haskell.org/package/tasty">Tasty</a> and <a href="https://github.com/commercialhaskell/stack">Stack</a>. I had previously blogged about <a href="https://sanj.ink/posts/2018-02-01-how-to-run-specific-tests-through-stack-with-tasy-in-haskell.html">How to run specific tests through Stack with Tasty in Haskell</a>. From that article we know about the <code>--ta</code> parameter which enables us to pass parameters to the underlying testing framework:</p>
<pre class="terminal scrollx"><code>--ta,--test-arguments TEST_ARGS Arguments passed in to the test suite program</code></pre>
<p>Using that information we can now rerun the Hedgehog property like so:</p>
<pre class="terminal scrollx"><code>stack test --ta &#39;--hedgehog-replay &quot;Size 100 Seed 15737640735508047734 16943050916655939693&quot;&#39;</code></pre>
<p>Unfortunately this will run all the tests including the ones that are not affected by the failing seed. From the post mentioned previously we know how to use the <code>-p</code> parameter to run specific tests:</p>
<pre class="terminal scrollx"><code>-p,--pattern ARG         Select only tests that match pattern</code></pre>
<p>Using that information we can now rerun just the affect Hedgehog test with the provided seed:</p>
<pre class="terminal scrollx"><code>stack test --ta &#39;--hedgehog-replay &quot;Size 100 Seed 15737640735508047734 16943050916655939693&quot; -p &quot;your_spec_name&quot;&#39;</code></pre>
<p>While this is quite cumbersome to use I hope this will help anyone else who was stumped by how to simply rerun a failed Hedgehog property through tasty and Stack.</p>]]></description>
    <pubDate>Tue, 15 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2020-12-15-how-to-rerun-a-failed-hedgehog-test-through-tasy.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Random Freezing of MacBook Pro</title>
    <link>http://blog.ssanj.net/posts/2020-10-23-random-freezing-of-macbook-pro.html</link>
    <description><![CDATA[<p>Quite recently my 2017 MacBook Pro would freeze up for anywhere between five to thirty seconds. And what I mean by “freeze up” is that it would not accept any keyboard commands at all. I checked to see if the keyboard was working by pressing the <code>Capslock</code> button and it was - I could see the <code>Capslock</code> light turning on and off. Surprisingly I could still move the mouse pointer around the screen but I couldn’t click on any of the UIs and make them do anything.</p>
<p>As you can imagine this was quite frustrating and I was wondering if I should upgrade my Macosx from <code>Mojave</code> to <code>Catalina</code>. I had been dreading this upgrade because Apple usually ends up breaking something and then I have to waste my time tending to those issues.</p>
<p>I also seemed to be able to quite regularly make the system freeze by switching between windows in <a href="https://www.sublimetext.com/">Sublime Text</a> or moving to another window or typing in the terminal. Almost anything really, but nothing conclusive.</p>
<p>I had also had a look in <code>Activity Monitor</code> after a freeze and didn’t find anything out of the ordinary using of a lot of CPU or RAM. I also had plenty of disc space.</p>
<h1 id="suspects">Suspects</h1>
<h2 id="com.apple.hiservices-xpcservice">com.apple.hiservices-xpcservice</h2>
<p>One of the services I did notice in <code>Activity Monitor</code> was <code>com.apple.hiservices-xpcservice</code> - which was <code>not responding</code>. I killed it manually but it didn’t make things better (or worse). It was not always <code>not responding</code> after a freeze.</p>
<p>Some people had <a href="https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac">different</a> results though.</p>
<h2 id="alfred">Alfred</h2>
<p>The freezes were getting progressively more frequent. Suddenly one day I couldn’t launch <a href="https://www.alfredapp.com/">Alfred</a> with my usual key combination. I could see that <code>Alfred</code> was working and I could manually launch it by clicking on its icon in the system tray but my key combinations no longer worked :(</p>
<h2 id="keyboard">Keyboard</h2>
<p>I had recently purchased a <a href="https://www.amazon.com.au/Durgod-Taurus-Mechanical-Gaming-Keyboard/dp/B07VZVY1NT">Durgod K320 Taurus</a> and I thought that maybe it was failing - after all, most of my freezes had happened when using the keyboard to do one thing or another.</p>
<p>After the next freeze, I noticed that my character set had changed and now when I typed I was seeing some weird characters. This seemed to confirm my suspicions of the <code>Durgod</code> and I unplugged and replugged it into my USB hub. The character set was back to normal. So I figured that the keyboard was faulty. I did some Google searches but didn’t find too many people complaining about this issue with the <code>Durgod</code>.</p>
<h2 id="sublime-text">Sublime Text</h2>
<p>After a while I came across a sure-fire way to cause my laptop to freeze - Switching between windows of by various Sublime Text windows.</p>
<p>So maybe the problem was with Sublime Text? Given that I did most of my development in Sublime Text it might be the culprit. I found a newer version of Sublime Text than I was using and installed it. I even considered installing an alpha version of <code>Sublime Text 4</code> to see if that was any better.</p>
<p>Unfortunately that did not solve the problem.</p>
<h2 id="hardware-failure">Hardware Failure</h2>
<p>At this point I launched into a full hardware <a href="https://support.apple.com/en-au/HT202731">diagnostic</a>:</p>
<blockquote>
<p>Restart your Mac and then hold the <code>D</code> key when it starts up</p>
</blockquote>
<p>It came back clean except for the battery which was not at a 100%. This was fine given its age.</p>
<p>The diagnostic recommended unplugging all peripherals before running it. So I unplugged my keyboard, mouse, 4K monitor and headphones before proceeding.</p>
<p>The interesting thing was that, when I used the laptop by itself, I couldn’t cause the freeze by switching between <code>Sublime Text</code> windows. Wow! At least my laptop was not dying and I probably didn’t have to reinstall or upgrade MacOS versions. Yay?</p>
<h2 id="monitor">Monitor</h2>
<p>At this point it looked like the output to the 4K monitor maybe causing the issue. I did some investigation and some people had <a href="https://discussions.apple.com/thread/7370642">issues</a> around using <a href="https://discussions.apple.com/thread/6777878">4K monitors</a> with the Mac.</p>
<h2 id="nvram">NVRam</h2>
<p>One of the <a href="https://support.apple.com/en-au/HT204063">remedies</a> recommended with hardware issues was to reset the <code>NVRAM</code> and <code>PRAM</code>:</p>
<blockquote>
<p>NVRAM (nonvolatile random-access memory) is a small amount of memory that your Mac uses to store certain settings and access them quickly. PRAM (Parameter RAM) stores similar information, and the steps for resetting NVRAM and PRAM are the same.</p>
</blockquote>
<p>I noticed that <code>display resolution</code> was among the settings that were stored in NVRAM:</p>
<blockquote>
<p>Settings that can be stored in NVRAM include sound volume, display resolution, startup disk selection, time zone and recent kernel panic information. The settings stored in NVRAM depend on your Mac and the devices that you’re using with your Mac</p>
</blockquote>
<p>I followed the recommended instructions to reset the NVRam:</p>
<ul>
<li>Shutdown mac</li>
<li>Press the power button</li>
<li>Press and hold <code>ALT</code> + <code>CMD</code> + <code>P</code> + <code>R</code> until you hear the second chime sound</li>
</ul>
<p>And voila! All my issues were fixed!! Hooray!!</p>
<p>So there you have it. If you have similar issues NVRAM might be the culprit! Also try just using the laptop without any peripherals plugged in to see if any of them are causing the issue.</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://apple.stackexchange.com/questions/348876/whats-causing-my-macbook-to-freeze-and-reset-keyboard-settings-when-i-bring-it">whats-causing-my-macbook-to-freeze-and-reset-keyboard-settings-when-i-bring-it</a></li>
<li><a href="https://support.apple.com/en-au/HT202731" class="uri">https://support.apple.com/en-au/HT202731</a></li>
<li><a href="https://www.ifixit.com/Answers/View/141693/Why+is+my+keyboard-trackpad+not+working" class="uri">https://www.ifixit.com/Answers/View/141693/Why+is+my+keyboard-trackpad+not+working</a></li>
<li><a href="https://discussions.apple.com/thread/251312151" class="uri">https://discussions.apple.com/thread/251312151</a></li>
<li><a href="https://support.apple.com/en-au/HT204063" class="uri">https://support.apple.com/en-au/HT204063</a></li>
<li><a href="https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac" class="uri">https://apple.stackexchange.com/questions/342706/com-apple-hiservices-xpcservice-results-in-frequent-hangs-and-freezes-in-my-mac</a></li>
<li><a href="https://discussions.apple.com/thread/7370642" class="uri">https://discussions.apple.com/thread/7370642</a></li>
<li><a href="https://discussions.apple.com/thread/6777878" class="uri">https://discussions.apple.com/thread/6777878</a></li>
</ul>]]></description>
    <pubDate>Fri, 23 Oct 2020 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2020-10-23-random-freezing-of-macbook-pro.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

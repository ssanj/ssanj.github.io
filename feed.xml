<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 16 Aug 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Sublime Text Package Loading</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</link>
    <description><![CDATA[<p>I recently submitted <a href="https://github.com/ssanj/Scoggle">Scoggle</a> to <a href="https://packagecontrol.io">package control</a> and had some <a href="https://github.com/wbond/package_control_channel/pull/4701">issues around package path and how classes are loaded</a>. Here is some feedback I received from one of the repository maintainers:</p>
<blockquote>
<p>Sublime Text adds the Packages path to sys.path (and a custom loader to sys.meta_path for that matter, which handles the loading of .sublime-package files), so every module in a package is accessible with PackageName.path.to.module. For your tests (or more specifically everything that is in a sub package, i.e. subdirectory) you need to use two dots with relative imports so that you go up a level, such as from .. import scoggle_types as stypes.</p>
</blockquote>
<blockquote>
<p>For the dynamic class loading, you can use ____package____ instead of “Scoggle.matchers” because the two are equivalent in the average situation and the first will still be correct if the package was saved under a different name. I’m not exactly sure about tests, but they should work as well. There are other methods available for doing what you intend to do (e.g. importing the classes into matcher.<strong>init</strong> and then using getattr), but yours should work “just fine”.</p>
</blockquote>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Loggers in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</link>
    <description><![CDATA[<p><a href="http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python">A great article</a> on how to correctly use loggers through Python.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Clone Only Creates Master Branch</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-master-branch.html</link>
    <description><![CDATA[<p>When you clone a repository in Git, it only downloads the master branch. What if you wanted a specific remote branch as well?</p>
<p>There are a couple of ways you can do this:</p>
<h2 id="use-checkout">Use checkout</h2>
<p>Git checkout will clone the remote branch and then change to it.</p>
<pre class="command scrollx"><code>git checkout -b remote/branchname</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>git checkout -b origin/new_config</code></pre>
<h2 id="use-branch">Use branch</h2>
<p>Git branch will only clone the remote branch.</p>
<pre class="command scrollx"><code>git branch local_branch_name remote/branchname</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>git branch new_config origin/new_config</code></pre>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-master-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Java Reflection-Style Class Loading in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</link>
    <description><![CDATA[<p>While working on <a href="https://github.com/ssanj/Scoggle">Scoggle</a> I wanted to be able to dynamically load matcher classes. This is very easy using Java with reflection. <a href="http://stackoverflow.com/questions/452969/does-python-have-an-equivalent-to-java-class-forname">I found this SO article on how to do just that in Python</a>. Given a package path to a class, this piece of code loads each module and returns the final class constructor:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_class( kls ):
    parts <span class="op">=</span> kls.split(<span class="st">&#39;.&#39;</span>)
    module <span class="op">=</span> <span class="st">&quot;.&quot;</span>.join(parts[:<span class="op">-</span><span class="dv">1</span>])
    m <span class="op">=</span> <span class="bu">__import__</span>( module )
    <span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
        m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)            
    <span class="cf">return</span> m</code></pre></div>
<p>The author explains how it works:</p>
<blockquote>
<p>We’re using <strong>import</strong> to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( module )</code></pre></div>
<blockquote>
<p>In this case, m will only refer to the top level module,</p>
</blockquote>
<blockquote>
<p>For example, if your class lives in foo.baz module, then m will be the module foo. We can easily obtain a reference to foo.baz using getattr( m, ‘baz’ ).</p>
</blockquote>
<blockquote>
<p>To get from the top level module to the class, have to recursively use gettatr on the parts of the class name</p>
</blockquote>
<blockquote>
<p>Say for example, if you class name is foo.baz.bar.Model then we do this:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( <span class="st">&quot;foo.baz.bar&quot;</span> ) <span class="co">#m is package foo</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;baz&quot;</span> ) <span class="co">#m is package baz</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;bar&quot;</span> ) <span class="co">#m is module bar</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;Model&quot;</span> ) <span class="co">#m is class Model</span></code></pre></div>
<blockquote>
<p>This is what’s happening in this loop:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
    m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)    </code></pre></div>
<blockquote>
<p>At the end of the loop, m will be a reference to the class. This means that m is actually the class itself, you can do for instance:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">  a <span class="op">=</span> m() <span class="co">#instantiate a new instance of the class    </span>
  b <span class="op">=</span> m( arg1, arg2 ) <span class="co"># pass arguments to the constructor</span></code></pre></div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Git Tags</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-tags.html</link>
    <description><![CDATA[<p>Here’s a summary on how to use Git tags.</p>
<p>List existing tags with:</p>
<pre class="command"><code>git tag -l</code></pre>
<p>Create a tag with:</p>
<pre class="command"><code>git tag -a &quot;your.tag.name&quot;</code></pre>
<p>Attach a tag to an existing commit with:</p>
<pre class="command"><code>git tag -a &quot;your.tag.name&quot; commitid</code></pre>
<p>Push your tags remotely with:</p>
<pre class="command"><code>git push --tags</code></pre>
<p>Delete a local tag with:</p>
<pre class="command"><code>git tag -d &quot;your.tag.name&quot;</code></pre>
<p><a href="https://nathanhoad.net/how-to-delete-a-remote-git-tag">Delete a remote tag with</a>:</p>
<pre class="command"><code>git push origin :refs/tags/your.tag.name</code></pre>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-tags.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Git Branches</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-branches.html</link>
    <description><![CDATA[<p>Create a branch from the current branch and change to it:</p>
<pre class="command"><code>git checkout -b new_branch_name</code></pre>
<p>Create a branch from a commit:</p>
<pre class="command"><code>git branch commitid</code></pre>
<p>Create a remote tracking branch on the <strong>origin</strong> remote for a local branch:</p>
<pre class="command"><code>git push -u origin branch_name</code></pre>
<p>Switch to another branch:</p>
<pre class="command"><code>git checkout new_branch_name</code></pre>
<p>Delete a local branch if it has synced up changes with the upstream branch or HEAD</p>
<pre class="command"><code>git branch -d branch_name</code></pre>
<p>Force delete a local branch even if it has not synced up changes with its upstream branches:</p>
<pre class="command"><code>git branch -D branch_name</code></pre>
<p>Delete a remote branch on the <strong>origin</strong> remote:</p>
<pre class="command"><code>git push origin :branch_name</code></pre>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-branches.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Log Incantations</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-git-log-incantations.html</link>
    <description><![CDATA[<p>Display a Git log with the status of each file of a commit along with an abbreviated commit hash:</p>
<pre class="command scrollx"><code>git log --stat --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-1.jpg" alt="git log example 1" />
<p class="caption">git log example 1</p>
</div>
<p>Display a graph of all changes along with merges and the location of HEAD and other branches:</p>
<pre class="command scrollx"><code>git log --color --graph --pretty=format:&#39;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#39; --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-2.jpg" alt="git log example 2" />
<p class="caption">git log example 2</p>
</div>
<p>Display commits with relative dates:</p>
<pre class="command scrollx"><code>git log --color --graph --pretty=format:&#39;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative</code></pre>
<div class="figure">
<img src="/images/git-log-3.jpg" alt="git log example 3" />
<p class="caption">git log example 3</p>
</div>
<p>Display the last ten commits with a one line summary:</p>
<pre class="command scrollx"><code>git log --pretty=oneline -n 10 --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-4.jpg" alt="git log example 4" />
<p class="caption">git log example 4</p>
</div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-git-log-incantations.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Functional Programming in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-functional-programming-in-python.html</link>
    <description><![CDATA[<p>While working on <a href="https://github.com/ssanj/Scoggle">Scoggle</a> I came across a number of Functional Programming concepts that I could use to implement it - much to my surprise. Here are the concepts I came across:</p>
<h2 id="map">Map</h2>
<div class="sourceCode"><pre class="sourceCode python scrollx"><code class="sourceCode python"><span class="cf">return</span> <span class="bu">list</span>(<span class="bu">map</span>(<span class="kw">lambda</span> x: <span class="va">self</span>.get_file_without_extension(x), files))</code></pre></div>
<h2 id="filter">Filter</h2>
<div class="sourceCode"><pre class="sourceCode python scrollx"><code class="sourceCode python">hits <span class="op">=</span> [os.path.join(root, f) <span class="cf">for</span> f <span class="op">in</span> filenames <span class="cf">if</span> f.endswith(<span class="st">&quot;.scala&quot;</span>) <span class="op">and</span> strategy(root, dirnames, f)]</code></pre></div>
<h2 id="higher-order-functions">Higher-Order Functions</h2>
<p>In this example the returned <strong>m</strong> is a reference to the constructor of a class.</p>
<div class="sourceCode"><pre class="sourceCode python scrollx"><code class="sourceCode python"><span class="kw">def</span> get_class(<span class="va">self</span>, kls):
    parts <span class="op">=</span> kls.split(<span class="st">&#39;.&#39;</span>)
    module <span class="op">=</span> <span class="st">&quot;.&quot;</span>.join(parts[:<span class="op">-</span><span class="dv">1</span>])
    m <span class="op">=</span> <span class="bu">__import__</span>( module )
    <span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
        m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)            
    <span class="cf">return</span> m</code></pre></div>
<h2 id="currying">Currying</h2>
<p>We get to curry a function with <a href="https://docs.python.org/3.2/library/functools.html">Pythons functools library</a>:</p>
<div class="sourceCode"><pre class="sourceCode python scrollx"><code class="sourceCode python">matches_file <span class="op">=</span> fp.partial(cut.match_test_file, <span class="va">None</span>, <span class="va">None</span>)</code></pre></div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-functional-programming-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>The Most Import Comparison</title>
    <link>http://blog.ssanj.net/posts/2015-08-12-the-most-important-comparison.html</link>
    <description><![CDATA[<div>
<div class="quote">
The most important comparison, in fact, is comparing your work to what you’re capable of.
</div>
<div class="attribution">
Seth Godin
</div>
</div>]]></description>
    <pubDate>Wed, 12 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-12-the-most-important-comparison.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Solve Hard Problems</title>
    <link>http://blog.ssanj.net/posts/2015-08-10-solve-hard-problems.html</link>
    <description><![CDATA[<p>Computers are good at many things that people are not good at. Complex calculations. Laboriously detailed tasks. Multitasking. Some decisions can only be made by people - for the moment at least. As <a href="http://sanj.ink/posts/2014-10-14-tim-brown-on-thinking-big.html">Tim Brown said</a> we need to make software that makes our lives easier and more enjoyable.</p>
<p>Now I’m not saying creating ToDo apps don’t make our lives easier. But we can simply skip the app all-together and use a pen and paper. It’s not really solving a problem we can’t solve without a computer.</p>
<p>What hard problems can Computers help us solve? What can we make possible that isn’t? Once we build it will it make our lives better?</p>]]></description>
    <pubDate>Mon, 10 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-10-solve-hard-problems.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

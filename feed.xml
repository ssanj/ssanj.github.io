<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 23 Oct 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>Shipping vs Quality</title>
    <link>http://blog.ssanj.net/posts/2014-10-23-shipping-vs-quality.html</link>
    <description><![CDATA[<p>Say you had two applications. One that is of high “quality”, but doesn’t ship. The other is of low “quality”, but ships. Which application do you reckon would bring you the most business benefit?</p>
<p>If you were funding a startup your choice would be very clear. You’d want something to bring in business value ASAP. The low quality application that shipped would be the winner.</p>
<p>We behave somewhat differently in an “enterprise” environment. We hardly run any “experiments” or <a href="http://theleanstartup.com/principles">MVPs</a>. Everything must have a hundred features even for a 0.0.1 release. We agonize about the “quality” of our software. We often prefer not to release something unless it is of “acceptable quality”. Sometimes these quality exercises take months. Often we are just shining a useless artifact that may never ship. This obviously doesn’t add any business value. So why do we do it?</p>]]></description>
    <pubDate>Thu, 23 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-23-shipping-vs-quality.html</guid>
</item>
<item>
    <title>Cabal Fails to Install PCRE-Light on Linux</title>
    <link>http://blog.ssanj.net/posts/2014-10-23-cabal-fails-to-install-pcre-light-linux.html</link>
    <description><![CDATA[<p>When trying to install <a href="http://hackage.haskell.org/package/mysql-simple-0.2.2.4">mysql-simple</a> on GHC 7.8.3 with cabal 1.18.1.3 on Ubuntu Linux 12.04, the <a href="https://hackage.haskell.org/package/pcre-light">pcre-light</a> dependency failed with the following error:</p>
<pre><code>mysql-simple-0.2.2.4 depends on pcre-light-0.4.0.3 which failed to install.
pcre-light-0.4.0.3 failed during the configure step. The exception was:
ExitFailure 1</code></pre>
<p>Thankfully since I had come across <a href="http://blog.ssanj.net/posts/2014-09-08-cabal-fails-to-install-pcre-light-macosx.html">the same problem before on my Mac</a>, the solution was an easy one.</p>
<p>Install the pcre-light package on linux with:</p>
<pre><code>sudo apt-get install libpcre3 libpcre3-dev</code></pre>
<p>Enjoy! :)</p>]]></description>
    <pubDate>Thu, 23 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-23-cabal-fails-to-install-pcre-light-linux.html</guid>
</item>
<item>
    <title>Cabal Fails to Install MySQL Linux Driver</title>
    <link>http://blog.ssanj.net/posts/2014-10-23-cabal-fails-to-install-mysql-driver-linux.html</link>
    <description><![CDATA[<p>When trying to install <a href="http://hackage.haskell.org/package/mysql-simple-0.2.2.4">mysql-simple</a> on GHC 7.8.3 with cabal 1.18.1.3 on Ubuntu Linux 12.04, the <a href="https://hackage.haskell.org/package/mysql">mysql</a> dependency failed with the following error:</p>
<pre><code>mysql-0.1.1.6 failed during the configure step. The exception was:
ExitFailure 1
mysql-simple-0.2.2.4 depends on mysql-0.1.1.6 which failed to install.</code></pre>
<p>A quick <a href="http://stackoverflow.com/questions/7475223/mysql-config-not-found-when-installing-mysqldb-python-interface">SO</a> lead me to the solution. I needed to install the mysql-client library on linux:</p>
<pre><code>sudo apt-get install libmysqlclient-dev</code></pre>
<p>Enjoy! :)</p>]]></description>
    <pubDate>Thu, 23 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-23-cabal-fails-to-install-mysql-driver-linux.html</guid>
</item>
<item>
    <title>Show columns of any table in MySQL</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-show-columns-of-any-table-in-mysql.html</link>
    <description><![CDATA[<p>Frequently I need to look up some information about the columns of a given database table. I usually resort to looking up the <a href="http://dev.mysql.com/doc/refman/5.0/en/show-columns.html">MySQL docs</a>. I thought I’d document it here for easy access.</p>
<p>The general syntax is:</p>
<p>show columns from <strong>table</strong> from <strong>db</strong></p>
<p>Here’s a simple example:</p>
<pre><code>mysql&gt; show columns from quote from quotedb;
+--------+---------------+------+-----+---------+----------------+
| Field  | Type          | Null | Key | Default | Extra          |
+--------+---------------+------+-----+---------+----------------+
| ID     | smallint(6)   | NO   | PRI | NULL    | auto_increment |
| QUOTE  | varchar(1000) | NO   |     | NULL    |                |
| ATTRIB | varchar(100)  | NO   |     | NULL    |                |
+--------+---------------+------+-----+---------+----------------+</code></pre>
<p>If you are already using the database in question you can simply use:</p>
<p>show columns from <strong>table</strong></p>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-show-columns-of-any-table-in-mysql.html</guid>
</item>
<item>
    <title>How to verify your downloads with MD5</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-md5-check-macosx.html</link>
    <description><![CDATA[<ol style="list-style-type: decimal">
<li>Download your artifact.</li>
<li>Download the SHA sums for your artifact.</li>
<li>Generate SHA sums for your downloaded artifact.</li>
<li>Verify the generated SHA of the download is found in the SHA sums file. If it is not found, your download is not to be trusted.</li>
</ol>
<p>Let’s take Vagrant 1.6.5 as an example.</p>
<ol style="list-style-type: decimal">
<li><p><a href="https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.5.dmg">Download Vagrant 1.6.5.dmg</a></p></li>
<li><p><a href="https://dl.bintray.com/mitchellh/vagrant/1.6.5_SHA256SUMS?direct">Download the SHA256 sum file for Vagrant</a>. The content of file is:</p></li>
</ol>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">a94a16b9ed...38f8d826c8</span>  vagrant_1.6.5.dmg
<span class="kw">d79b1408be...9ab3043e40</span>  vagrant_1.6.5.msi
<span class="kw">78cd956742...100aebb46c</span>  vagrant_1.6.5_i686.deb
<span class="kw">997f69514d...84b85b07ac</span>  vagrant_1.6.5_i686.rpm
<span class="kw">e2c7af6d03...c9fb96a122</span>  vagrant_1.6.5_x86_64.deb
<span class="kw">90730fd10c...f8399852df</span>  vagrant_1.6.5_x86_64.rpm</code></pre>
<ol start="3" style="list-style-type: decimal">
<li>Generate a SHA256 against Vagrant 1.6.5.dmg:</li>
</ol>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">openssl</span> dgst -sha256 vagrant_1.6.5.dmg</code></pre>
<p>The output will be something like:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">SHA256</span>(vagrant_1.6.5.dmg)= <span class="kw">a94a16b9ed...38f8d826c8</span></code></pre>
<ol start="4" style="list-style-type: decimal">
<li>Grep for your generated SHA256 within the SHA sums file:</li>
</ol>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">grep</span> <span class="st">&#39;a94a16b9ed...38f8d826c8&#39;</span> 1.6.5_SHA256SUMS</code></pre>
<p>The result:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">a94a16b9ed...38f8d826c8</span>  vagrant_1.6.5.dmg</code></pre>
<p>If a result is not found that would indicate that Vagrant download was malicious or corrupt.</p>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-md5-check-macosx.html</guid>
</item>
<item>
    <title>Import mysql data from an External File</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-import-mysql-data-from-an-external-file.html</link>
    <description><![CDATA[<pre><code>mysql -u username -p password database_name &lt; filename.sql</code></pre>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-import-mysql-data-from-an-external-file.html</guid>
</item>
<item>
    <title>Cabal Install cabal-install Fails on Linux</title>
    <link>http://blog.ssanj.net/posts/2014-10-16-cabal-install-fails-on-linux.html</link>
    <description><![CDATA[<p>While upgrading cabal with cabal-install on Ubuntu 12.04 I received the following error:</p>
<pre><code>Linking dist/build/cabal/cabal ...
/usr/bin/ld: cannot find -lz</code></pre>
<p>After that extremely helpful error message, I decided to trawl the Internet. I found information on a similar error on <a href="http://stackoverflow.com/questions/16952741/unable-to-install-yesod-bin">SO</a> that pointed to some possible libraries I needed to install on my OS.</p>
<p>The <strong>-l</strong> in <strong>-lz</strong> seemed to indicate <strong>libghc</strong> and the following characters the name of the library, in this case: <strong>z</strong>. So I searched for a list of libraries that were of the form: libghc-z* and came up with this list:</p>
<ul>
<li>libghc-zeromq-haskell-dev</li>
<li>libghc-zeromq-haskell-doc</li>
<li>libghc-zeromq-haskell-prof</li>
<li>libghc-zip-archive-dev</li>
<li>libghc-zip-archive-doc</li>
<li>libghc-zip-archive-prof</li>
<li>libghc-zlib-bindings-dev</li>
<li>libghc-zlib-bindings-doc</li>
<li>libghc-zlib-bindings-prof</li>
<li>libghc-zlib-conduit-dev</li>
<li>libghc-zlib-conduit-doc</li>
<li>libghc-zlib-conduit-prof</li>
<li>libghc-zlib-dev</li>
<li>libghc-zlib-doc</li>
<li>libghc-zlib-enum-dev</li>
<li>libghc-zlib-enum-doc</li>
<li>libghc-zlib-enum-prof</li>
<li>libghc-zlib-prof</li>
</ul>
<p>So I decided to filter the list to only <strong>libghc-zlib-</strong> variations. I also removed <strong>-doc</strong> and <strong>-prof</strong> variants. I further removed <strong>-conduit-</strong> variations because I was not using <strong>conduit</strong>.</p>
<p>The final list was:</p>
<ol style="list-style-type: decimal">
<li>libghc-zlib-dev</li>
<li>libghc-zlib-bindings-dev</li>
<li>libghc-zlib-enum-dev</li>
</ol>
<p>I decided to install each library in turn. After which I would install cabal-install to see if it worked.</p>
<p>After installing <strong>libghc-zlib-dev</strong> via: <code>sudo apt-get install libghc-zlib-dev</code> I found that cabal-install installed successfully. That turned out to be a very lucky guess.</p>
<p>Happy Days :)</p>]]></description>
    <pubDate>Thu, 16 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-16-cabal-install-fails-on-linux.html</guid>
</item>
<item>
    <title>Tim Brown on Thinking Big</title>
    <link>http://blog.ssanj.net/posts/2014-10-14-tim-brown-on-thinking-big.html</link>
    <description><![CDATA[<p>Some interesting ideas from Tim Brown’s Ted Talk: <a href="http://www.ted.com/talks/tim_brown_urges_designers_to_think_big">Designers - Think Big</a>:</p>
<ol style="list-style-type: decimal">
<li>Integrative thinking - Integrate opposing ideas and opposing constraints to create new solutions. Desirability (what humans need), technical feasibility and economic viability.</li>
<li>Design is human-centred. It might use technology and economics but it starts with what humans need or might need. What makes life easier and more enjoyable. What makes technology useful and usable.</li>
<li>You need to understand culture and context before you start having ideas.</li>
<li>Learning by making. Instead of thinking about what to build, build in order to think.</li>
<li>Prototypes speed up innovation. Because only once you get your ideas out into the real world do you understand its strengths and weaknesses.</li>
<li>The faster we prototype the faster our ideas evolve.</li>
<li>Prototype your ideas early.</li>
<li>Participatory systems - where the producers and consumers interact on a more direct basis.</li>
<li>Everyone should design. Not just designers.</li>
<li>In times of change we need new alternatives and new ideas.</li>
<li>Design Thinking encourages divergent approaches. New solutions, new ideas that have not existed before.</li>
<li>What kind of design questions should we ask ourselves today?</li>
</ol>]]></description>
    <pubDate>Tue, 14 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-14-tim-brown-on-thinking-big.html</guid>
</item>
<item>
    <title>How to read a YAML file from Haskell</title>
    <link>http://blog.ssanj.net/posts/2014-10-09-How-to-read-a-YAML-file-from-Haskell.html</link>
    <description><![CDATA[<p>While working on BrainCandy (My first Haskell web application), I needed a way to load in some database configuration. As I use YAML quite frequently in other languages such as Java, I thought it would be nice to use it through Haskell as well. After a bit of <a href="http://stackoverflow.com">SO</a> and Google I came across a few good examples that helped me get started. (See the references for more details.)</p>
<p>Given how easy it is to read YAML through Haskell, I thought I’d write a very short example to get people started.</p>
<p>The config.yml file:</p>
<pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">username:</span> <span class="st">&quot;John Smith&quot;</span>
<span class="fu">password:</span> <span class="st">&quot;Sm1thy@Jon0&quot;</span></code></pre>
<p>The Haskell code to read the config.yml file:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE DeriveGeneric #-}</span> <span class="co">-- (2)</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">BS</span>
<span class="kw">import qualified</span> <span class="dt">Data.Yaml</span> <span class="kw">as</span> <span class="dt">Y</span>
<span class="kw">import </span><span class="dt">GHC.Generics</span>
<span class="kw">import </span><span class="dt">Data.Aeson</span>


<span class="kw">data</span> <span class="dt">Cred</span> <span class="fu">=</span> <span class="dt">Cred</span> {<span class="ot"> username ::</span> <span class="dt">String</span>,<span class="ot"> password ::</span> <span class="dt">String</span> } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Generic</span>) <span class="co">-- (1,2)</span>
<span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Cred</span> <span class="co">-- (3)</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    content <span class="ot">&lt;-</span> BS.readFile <span class="st">&quot;config.yml&quot;</span> <span class="co">-- (4)</span>
    <span class="kw">let</span> parsedContent <span class="fu">=</span> Y.decode<span class="ot"> content ::</span> <span class="dt">Maybe</span> <span class="dt">Cred</span> <span class="co">-- (5)</span>
    <span class="kw">case</span> parsedContent <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;Could not parse config file.&quot;</span>
        (<span class="dt">Just</span> (<span class="dt">Cred</span> u p)) <span class="ot">-&gt;</span> putStrLn (<span class="st">&quot;username: &quot;</span> <span class="fu">++</span> u <span class="fu">++</span> <span class="st">&quot;, password: &quot;</span> <span class="fu">++</span> p)</code></pre>
<p>Here are the basic steps:</p>
<ol style="list-style-type: decimal">
<li>Create a datatype to match the YAML structure of your config file. <strong>Creds</strong> in this case.</li>
<li>Make sure your datastructure derives <strong>Show</strong> and <strong>Generic</strong>. You need to use {-# LANGUAGE DeriveGeneric #-} to derive Generic instances.</li>
<li>Create an <strong>Aeson.FromJSON</strong> instance of your datatype.</li>
<li>Read the content of your config file as <strong>ByteString</strong> .</li>
<li>Pass file contents to the <strong>Data.Yaml.decode</strong> function. The <strong>Data.YAML.decode</strong> function returns a <strong>Maybe Cred</strong> as it might not be able to parse the config file into the supplied data structure.</li>
</ol>
<p>The <a href="https://github.com/ssanj/HaskellYamlReaderExample">cabal project</a> for this example can be found on github.</p>
<p>Now go externalize those configurations!</p>
<p>References:</p>
<ul>
<li><a href="http://lenguyenthedat.blogspot.com.au/2014/01/parsing-config-file-in-haskell-with-yaml.html">Parsing config files in Haskell with Yaml</a></li>
<li><a href="http://stackoverflow.com/questions/21292428/reading-yaml-lists-of-objects-in-haskell">Reading YAML lists of objects in Haskell</a></li>
</ul>]]></description>
    <pubDate>Thu, 09 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-09-How-to-read-a-YAML-file-from-Haskell.html</guid>
</item>
<item>
    <title>The Tim Ferriss Show Interviews Peter Thiel</title>
    <link>http://blog.ssanj.net/posts/2014-10-06-the-tim-ferriss-show-peter-thiel.html</link>
    <description><![CDATA[<p>Some interesting ideas from <a href="http://fourhourworkweek.com/blog">The Tim Ferriss Show’s</a> interview with Peter Thiel:</p>
<ol style="list-style-type: decimal">
<li>Capitalism and Competition are not synonyms but antonyms. Eg. the Restaurant business in SFO is incredibly competitive but not capitalistic because no one makes any money from it.</li>
<li>You don’t have to wait to start something. If you have a 10 year plan to do something with your life you should ask yourself why you can’t do it in 6 months.</li>
<li>Failure is massively overrated. Most businesses fail for more than one reason. When a business fails you sometimes don’t learn anything at all because there were too many factors involved in that failure.</li>
<li>The death of every business is a tragedy.</li>
<li>Successful founders are relentless. Everyday they do more and get better at it.</li>
<li>Stay away from trends as you will have many competitors. Prefer missions. Work on unique problems people are not solving elsewhere.</li>
<li>Ask yourself why are you doing something. Make sure you like the answer.</li>
<li>What do people agree merely by convention and what is the truth?</li>
<li>We never want to use convention as a shortcut for truth. We need to always ask “is this true?”</li>
<li>“Tell me something that is true that very few people agree with you on.”</li>
<li>Always try to think for yourself and break through conventions.</li>
<li>I try to have conversations with smart people every day.</li>
</ol>]]></description>
    <pubDate>Mon, 06 Oct 2014 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2014-10-06-the-tim-ferriss-show-peter-thiel.html</guid>
</item>

    </channel> 
</rss>

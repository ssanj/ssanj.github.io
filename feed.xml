<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 16 Aug 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Sublime Text Package Loading</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</link>
    <description><![CDATA[<p>I recently submitted <a href="https://github.com/ssanj/Scoggle">Scoggle</a> to <a href="https://packagecontrol.io">package control</a> and had some <a href="https://github.com/wbond/package_control_channel/pull/4701">issues around package path and how classes are loaded</a>. Here is some feedback I received from one of the repository maintainers:</p>
<blockquote>
<p>Sublime Text adds the Packages path to sys.path (and a custom loader to sys.meta_path for that matter, which handles the loading of .sublime-package files), so every module in a package is accessible with PackageName.path.to.module. For your tests (or more specifically everything that is in a sub package, i.e. subdirectory) you need to use two dots with relative imports so that you go up a level, such as from .. import scoggle_types as stypes.</p>
</blockquote>
<blockquote>
<p>For the dynamic class loading, you can use ____package____ instead of “Scoggle.matchers” because the two are equivalent in the average situation and the first will still be correct if the package was saved under a different name. I’m not exactly sure about tests, but they should work as well. There are other methods available for doing what you intend to do (e.g. importing the classes into matcher.<strong>init</strong> and then using getattr), but yours should work “just fine”.</p>
</blockquote>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-sublime-text-package-loading.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Programming in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-programming-in-python.html</link>
    <description><![CDATA[<p><a href="http://sanj.ink/posts/2015-08-16-Scoggle.html">I needed to create a Sublime Text plugin</a>. Sublime Text plugins are written in Python. I had never written any Python code before. I thought I’d give it a crack anyway. <a href="https://packagecontrol.io/packages/Scoggle">The results were pretty nice</a>.</p>
<p>I usually work in Scala which is a strongly-type language. I had my reservations about working in Python which is a dynamically typed language. I had experience coding in other dynamically typed languages such as Javascript. It was not something I enjoyed thoroughly.</p>
<p>Python turned out to be a different beast. For one it was fast. This was a good thing. The repl was easy to use and returned a rich set of information. help(..) and dir(..) are actually useful. The api documentation is also reasonably good. Since it was dynamic it was very easy to get started with something.</p>
<p>Something that crash when you ran it. This is the balance between static typing and dynamic typing. You pay at compilation time in static typing but you are more sure about what your program will do. With dynamic typing you pay later but you pay in production.</p>
<p>One problem with paying in production is that any syntax errors, method name errors etc, will only occur when you run some code that actually uses that erroneous pathway through the code. There could very well be pathways through the code that would blow up one day if it were used. This is pretty scary and doesn’t inspire much confidence. If you are using dynamic languages your code coverage should be close to a hundred percent. A good IDE or linter would also help catch some of these errors early.</p>
<p><a href="http://sanj.ink/posts/2015-08-16-functional-programming-in-python/html">I found it fairly easy to use Functional Programming concepts</a> in Python which suited me very well. So that’s a plus.</p>
<p>Python is a easy language to get into. It’s also fun to use. I wouldn’t recommend it for production code though. But hey, being a static-typing fan, I’m probably biased.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-programming-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Loggers in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</link>
    <description><![CDATA[<p><a href="http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python">A great article</a> on how to correctly use loggers through Python.</p>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-how-to-use-loggers-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How are Sublime Text Settings Resolved?</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-how-are-sublime-text-settings-resolved.html</link>
    <description><![CDATA[<p>Sublime Text settings have a definite resolution order. <a href="http://www.sublimetext.com/forum/viewtopic.php?f=6&amp;t=9076">I stumbled across this forum post on the exact order</a>:</p>
<p>The user can override these globally (User/Base File), per-syntax, or per-project. The order that things would be searched would be (last match wins):</p>
<ol style="list-style-type: decimal">
<li>Packages/MyPlugin/Base File.sublime-settings</li>
<li>Packages/MyPlugin/Base File <platform>.sublime-settings</li>
<li>Packages/User/Base File.sublime-settings</li>
<li>Packages/User/Preferences.sublime-settings</li>
<li>Project Settings</li>
<li>Packages/MyPlugin/<syntax>.sublime-settings</li>
<li>Packages/MyPlugin/<syntax> <platform>.sublime-settings</li>
<li>Packages/User/<syntax>.sublime-settings</li>
<li>Packages/User/Distraction Free.sublime-settings</li>
</ol>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-how-are-sublime-text-settings-resolved.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Clone Only Creates Master Branch</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-master-branch.html</link>
    <description><![CDATA[<p>When you clone a repository in Git, it only downloads the master branch. What if you wanted a specific remote branch as well?</p>
<p>There are a couple of ways you can do this:</p>
<h2 id="use-checkout">Use checkout</h2>
<p>Git checkout will clone the remote branch and then change to it.</p>
<pre class="command scrollx"><code>git checkout -b remote/branchname</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>git checkout -b origin/new_config</code></pre>
<h2 id="use-branch">Use branch</h2>
<p>Git branch will only clone the remote branch.</p>
<pre class="command scrollx"><code>git branch local_branch_name remote/branchname</code></pre>
<p>Example:</p>
<pre class="command scrollx"><code>git branch new_config origin/new_config</code></pre>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-git-clone-only-creates-master-branch.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Scoggle</title>
    <link>http://blog.ssanj.net/posts/2015-08-16-Scoggle.html</link>
    <description><![CDATA[<p><a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">Since moving to Sublime Text from Intellij for Scala development</a>, I have been trying to find plugins to replace most of what I found useful in Intellij. Being able to easily switch between production and test code was one of those useful features.</p>
<p>I came across the <a href="https://packagecontrol.io/packages/ScalaTest">ScalaTest plugin</a> which supported switching between production and test code. It also allowed the execution of tests via JUnit. Junit is an undesirable option because Scala has at least two very popular testing frameworks supported out of the box through SBT: <a href="http://scalatest.org">ScalaTest</a> and <a href="http://etorreborre.github.io/specs2">Specs2</a>. It also interacted with the Scala compiler for which I had no possible use.</p>
<p>All I wanted was a way to switch between production and test code. So I decided to write my own plugin which did that one very specific thing.</p>
<p>Starting out my goals were:</p>
<ol style="list-style-type: decimal">
<li>Toggling from a production file will bring up a list of matching test files based on configured suffixes. Eg. Spec, Test, Suite, IntSpec etc.</li>
<li>Toggling from a test file will bring the matching source files. I was not sure whether to show a list of possibly matching source files.</li>
<li>Provide a way to match on package-path on either production or test source directories.</li>
<li>Provide a way to match on file name irrespective of package-path.</li>
<li>Maybe a have a nice way to create production or test sources if they don’t exist. Maybe run a file template.</li>
<li>Have a way to override configuration of source and test source directories on a per project basis.</li>
</ol>
<p>I am happy to say that I have completed most of the above list. The most notable exception being #5. I also figured out that I didn’t need #3 as my matchers handled all variations quite quickly. If needed I could write a matcher that did #3 quite easily.</p>
<p>Overriding configuration on a per project basis (#6), proved to be very useful. Many projects still follow non-standard setups and this feature allows the plugin to support them. A simple example is any <a href="https://www.playframework.com/documentation/2.0/Anatomy">Play</a> project.</p>
<p>Some of the other neat features provided by <a href="https://packagecontrol.io/packages/Scoggle">Scoggle</a> are:</p>
<ol style="list-style-type: decimal">
<li>Easily configurable production and test source directories as well as test suffixes.</li>
<li>Three built-in matchers that match increasingly fuzzier searches.</li>
<li>Error notifications can be turned down if they become too noisy. Currently supported techniques are through a dialog (default), through the status bar or not displayed at all.</li>
<li>Debug logging can be enabled which allows the user to easily follow how a match is done against a source file and the files that were consider but rejected when coming to a final result.</li>
<li>Support for the Context Menus and the Command Palette (CMD + SHIFT + P).</li>
<li>Installation through <a href="https://packagecontrol.io">Package Control</a>.</li>
<li>An easy framework to write your matchers which abstracts away the complexities and requires only two boolean functions.</li>
</ol>
<p>I found it very interesting writing this plugin. There is something cool about writing your own tools. Give it a whirl and let me know what you think.</p>
<div class="figure">
<img src="/images/scoggle_sublime_text_plugin_prefix_suffix_matcher.mov.gif" alt="Scoggle in action" />
<p class="caption">Scoggle in action</p>
</div>]]></description>
    <pubDate>Sun, 16 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-16-Scoggle.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Java Reflection-Style Class Loading in Python</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</link>
    <description><![CDATA[<p>While working on <a href="https://github.com/ssanj/Scoggle">Scoggle</a> I wanted to be able to dynamically load matcher classes. This is very easy using Java with reflection. <a href="http://stackoverflow.com/questions/452969/does-python-have-an-equivalent-to-java-class-forname">I found this SO article on how to do just that in Python</a>. Given a package path to a class, this piece of code loads each module and returns the final class constructor:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_class( kls ):
    parts <span class="op">=</span> kls.split(<span class="st">&#39;.&#39;</span>)
    module <span class="op">=</span> <span class="st">&quot;.&quot;</span>.join(parts[:<span class="op">-</span><span class="dv">1</span>])
    m <span class="op">=</span> <span class="bu">__import__</span>( module )
    <span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
        m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)            
    <span class="cf">return</span> m</code></pre></div>
<p>The author explains how it works:</p>
<blockquote>
<p>We’re using <strong>import</strong> to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( module )</code></pre></div>
<blockquote>
<p>In this case, m will only refer to the top level module,</p>
</blockquote>
<blockquote>
<p>For example, if your class lives in foo.baz module, then m will be the module foo. We can easily obtain a reference to foo.baz using getattr( m, ‘baz’ ).</p>
</blockquote>
<blockquote>
<p>To get from the top level module to the class, have to recursively use gettatr on the parts of the class name</p>
</blockquote>
<blockquote>
<p>Say for example, if you class name is foo.baz.bar.Model then we do this:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"> m <span class="op">=</span> <span class="bu">__import__</span>( <span class="st">&quot;foo.baz.bar&quot;</span> ) <span class="co">#m is package foo</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;baz&quot;</span> ) <span class="co">#m is package baz</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;bar&quot;</span> ) <span class="co">#m is module bar</span>
 m <span class="op">=</span> <span class="bu">getattr</span>( m, <span class="st">&quot;Model&quot;</span> ) <span class="co">#m is class Model</span></code></pre></div>
<blockquote>
<p>This is what’s happening in this loop:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="cf">for</span> comp <span class="op">in</span> parts[<span class="dv">1</span>:]:
    m <span class="op">=</span> <span class="bu">getattr</span>(m, comp)    </code></pre></div>
<blockquote>
<p>At the end of the loop, m will be a reference to the class. This means that m is actually the class itself, you can do for instance:</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">  a <span class="op">=</span> m() <span class="co">#instantiate a new instance of the class    </span>
  b <span class="op">=</span> m( arg1, arg2 ) <span class="co"># pass arguments to the constructor</span></code></pre></div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-java-reflection-style-class-loading-in-python.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Git Tags</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-tags.html</link>
    <description><![CDATA[<p>Here’s a summary on how to use Git tags.</p>
<p>List existing tags with:</p>
<pre class="command"><code>git tag -l</code></pre>
<p>Create a tag with:</p>
<pre class="command"><code>git tag -a &quot;your.tag.name&quot;</code></pre>
<p>Attach a tag to an existing commit with:</p>
<pre class="command"><code>git tag -a &quot;your.tag.name&quot; commitid</code></pre>
<p>Push your tags remotely with:</p>
<pre class="command"><code>git push --tags</code></pre>
<p>Delete a local tag with:</p>
<pre class="command"><code>git tag -d &quot;your.tag.name&quot;</code></pre>
<p><a href="https://nathanhoad.net/how-to-delete-a-remote-git-tag">Delete a remote tag with</a>:</p>
<pre class="command"><code>git push origin :refs/tags/your.tag.name</code></pre>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-tags.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to use Git Branches</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-branches.html</link>
    <description><![CDATA[<p>Create a branch from the current branch and change to it:</p>
<pre class="command"><code>git checkout -b new_branch_name</code></pre>
<p>Create a branch from a commit:</p>
<pre class="command"><code>git branch commitid</code></pre>
<p>Create a remote tracking branch on the <strong>origin</strong> remote for a local branch:</p>
<pre class="command"><code>git push -u origin branch_name</code></pre>
<p>Switch to another branch:</p>
<pre class="command"><code>git checkout new_branch_name</code></pre>
<p>Delete a local branch if it has synced up changes with the upstream branch or HEAD</p>
<pre class="command"><code>git branch -d branch_name</code></pre>
<p>Force delete a local branch even if it has not synced up changes with its upstream branches:</p>
<pre class="command"><code>git branch -D branch_name</code></pre>
<p>Delete a remote branch on the <strong>origin</strong> remote:</p>
<pre class="command"><code>git push origin :branch_name</code></pre>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-how-to-use-git-branches.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Git Log Incantations</title>
    <link>http://blog.ssanj.net/posts/2015-08-14-git-log-incantations.html</link>
    <description><![CDATA[<p>Display a Git log with the status of each file of a commit along with an abbreviated commit hash:</p>
<pre class="command scrollx"><code>git log --stat --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-1.jpg" alt="git log example 1" />
<p class="caption">git log example 1</p>
</div>
<p>Display a graph of all changes along with merges and the location of HEAD and other branches:</p>
<pre class="command scrollx"><code>git log --color --graph --pretty=format:&#39;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#39; --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-2.jpg" alt="git log example 2" />
<p class="caption">git log example 2</p>
</div>
<p>Display commits with relative dates:</p>
<pre class="command scrollx"><code>git log --color --graph --pretty=format:&#39;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative</code></pre>
<div class="figure">
<img src="/images/git-log-3.jpg" alt="git log example 3" />
<p class="caption">git log example 3</p>
</div>
<p>Display the last ten commits with a one line summary:</p>
<pre class="command scrollx"><code>git log --pretty=oneline -n 10 --abbrev-commit</code></pre>
<div class="figure">
<img src="/images/git-log-4.jpg" alt="git log example 4" />
<p class="caption">git log example 4</p>
</div>]]></description>
    <pubDate>Fri, 14 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-14-git-log-incantations.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

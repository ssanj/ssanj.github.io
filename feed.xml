<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 14 Jun 2019 00:00:00 UT</lastBuildDate>
        <item>
    <title>Scalac 2.13 Options and Flags</title>
    <link>http://blog.ssanj.net/posts/2019-06-14-scalac-2.13-options-and-flags.html</link>
    <description><![CDATA[<p>Given that Scala <a href="https://www.scala-lang.org/news/2.13.0">2.13</a> has just landed, there are a bunch of new flags and options available to the compiler. Below is a full list of options to choose from.</p>
<h1 id="standard-options">Standard Options</h1>
<ul>
<li><strong>-Dproperty=value</strong> Pass -Dproperty=value directly to the runtime system.</li>
<li><strong>-J</strong>&lt;flag&gt; Pass &lt;flag&gt; directly to the runtime system.</li>
<li><strong>-P</strong>:&lt;plugin&gt;:&lt;opt&gt; Pass an option to a plugin</li>
<li><strong>-V</strong> Print a synopsis of verbose options.</li>
<li><strong>-W</strong> Print a synopsis of warning options.</li>
<li><strong>-Werror</strong> Fail the compilation if there are any warnings.</li>
<li><strong>-X</strong> Print a synopsis of advanced options.</li>
<li><strong>-Y</strong> Print a synopsis of private options.</li>
<li><strong>-bootclasspath</strong> &lt;path&gt; Override location of bootstrap class files.</li>
<li><strong>-classpath</strong> &lt;path&gt; Specify where to find user class files.</li>
<li><strong>-d</strong> &lt;directory|jar&gt; destination for generated classfiles.</li>
<li><strong>-dependencyfile</strong> &lt;file&gt; Set dependency tracking file.</li>
<li><strong>-deprecation</strong> Emit warning and location for usages of deprecated APIs.</li>
<li><strong>-encoding</strong> &lt;encoding&gt; Specify character encoding used by source files.</li>
<li><strong>-explaintypes</strong> Explain type errors in more detail.</li>
<li><strong>-extdirs</strong> &lt;path&gt; Override location of installed extensions.</li>
<li><strong>-feature</strong> Emit warning and location for usages of features that should be imported explicitly.</li>
<li><strong>-g</strong>:&lt;level&gt; Set level of generated debugging info. (none,source,line,[vars],notailcalls)</li>
<li><strong>-help</strong> Print a synopsis of standard options</li>
<li><strong>-javabootclasspath</strong> &lt;path&gt; Override java boot classpath.</li>
<li><strong>-javaextdirs</strong> &lt;path&gt; Override java extdirs classpath.</li>
<li><strong>-language</strong>:&lt;features&gt; Enable or disable language features</li>
<li><strong>-no-specialization</strong> Ignore <span class="citation">@specialize</span> annotations.</li>
<li><strong>-nobootcp</strong> Do not use the boot classpath for the scala jars.</li>
<li><strong>-nowarn</strong> Generate no warnings.</li>
<li><strong>-opt</strong>:&lt;optimizations&gt; Enable optimizations</li>
<li><strong>-opt-inline-from</strong>:&lt;patterns&gt; Patterns for classfile names from which to allow inlining, <code>help</code> for details.</li>
<li><strong>-opt-warnings</strong>:&lt;warnings&gt; Enable optimizer warnings</li>
<li><strong>-print</strong> Print program with Scala-specific features removed.</li>
<li><strong>-release</strong> &lt;release&gt; Compile for a specific version of the Java platform. Supported targets: 6, 7, 8, 9</li>
<li><strong>-sourcepath</strong> &lt;path&gt; Specify location(s) of source files.</li>
<li><strong>-target</strong>:&lt;target&gt; Target platform for object files. All JVM 1.5 - 1.7 targets are deprecated. (jvm-1.5,jvm-1.6,jvm-1.7,[jvm-1.8])</li>
<li><strong>-toolcp</strong> &lt;path&gt; Add to the runner classpath.</li>
<li><strong>-unchecked</strong> Enable additional warnings where generated code depends on assumptions.</li>
<li><strong>-uniqid</strong> Uniquely tag all identifiers in debugging output.</li>
<li><strong>-usejavacp</strong> Utilize the java.class.path in classpath resolution.</li>
<li><strong>-usemanifestcp</strong> Utilize the manifest in classpath resolution.</li>
<li><strong>-verbose</strong> Output messages about what the compiler is doing.</li>
<li><strong>-version</strong> Print product version and exit.</li>
<li><strong>@</strong>&lt;file&gt; A text file containing compiler arguments (options and source files)</li>
</ul>
<h2 id="deprecated-settings">Deprecated settings:</h2>
<ul>
<li>-optimize Enables optimizations. deprecated: Since 2.12, enables -opt:l:inline -opt-inline-from:**. See -opt:help.</li>
</ul>
<h1 id="verbose-options--v">Verbose Options (-V)</h1>
<ul>
<li><strong>-Vbrowse</strong>:&lt;phases&gt; Browse the abstract syntax tree after &lt;phases&gt;</li>
<li><strong>-Vclasspath</strong> Output information about what classpath is being applied.</li>
<li><strong>-Vdebug</strong> Increase the quantity of debugging output.</li>
<li><strong>-Vdoc</strong> Trace scaladoc activity.</li>
<li><strong>-Vfree-terms</strong> Print a message when reification creates a free term.</li>
<li><strong>-Vfree-types</strong> Print a message when reification resorts to generating a free type.</li>
<li><strong>-Vhot-statistics</strong> Enable <strong>-Vstatistics</strong> to also print hot statistics.</li>
<li><strong>-Vide</strong> Generate, validate and output trees using the interactive compiler.</li>
<li><strong>-Vimplicit-conversions</strong> Print a message whenever an implicit conversion is inserted.</li>
<li><strong>-Vimplicits</strong> Show more detail on why some implicits are not applicable.</li>
<li><strong>-Vinline</strong> &lt;package/Class.method&gt; Print a summary of inliner activity; <code>_</code> to print all, prefix match to select.</li>
<li><strong>-Vissue</strong> Print stack traces when a context issues an error.</li>
<li><strong>-Vlog</strong>:&lt;phases&gt; Log operations during &lt;phases&gt;</li>
<li><strong>-Vmacro</strong> Trace macro activities: compilation, generation of synthetics, classloading, expansion, exceptions.</li>
<li><strong>-Vmacro-lite</strong> Trace macro activities with less output.</li>
<li><strong>-Vopt</strong> &lt;package/Class.method&gt; Trace the optimizer progress for methods; <code>_</code> to print all, prefix match to select.</li>
<li><strong>-Vpatmat</strong> Trace pattern matching translation.</li>
<li><strong>-Vphases</strong> Print a synopsis of compiler phases.</li>
<li><strong>-Vpos</strong> Trace position validation.</li>
<li><strong>-Vprint</strong>:&lt;phases&gt; Print out program after &lt;phases&gt;</li>
<li><strong>-Vprint-args</strong> &lt;file&gt; Print all compiler arguments to the specified location. Use - to echo to the reporter.</li>
<li><strong>-Vprint-pos</strong> Print tree positions, as offsets.</li>
<li><strong>-Vprint-types</strong> Print tree types (debugging option).</li>
<li><strong>-Vquasiquote</strong> Trace quasiquotations.</li>
<li><strong>-Vreflective-calls</strong> Print a message when a reflective method call is generated</li>
<li><strong>-Vreify</strong> Trace reification.</li>
<li><strong>-Vshow</strong>:&lt;phases&gt; (Requires -Xshow-class or -Xshow-object) Show after &lt;phases&gt;</li>
<li><strong>-Vshow-class</strong> &lt;class&gt; Show internal representation of class.</li>
<li><strong>-Vshow-member-pos</strong> &lt;output style&gt; Show start and end positions of members (implies -Yrangepos)</li>
<li><strong>-Vshow-object</strong> &lt;object&gt; Show internal representation of object.</li>
<li><strong>-Vshow-symkinds</strong> Print abbreviated symbol kinds next to symbol names.</li>
<li><strong>-Vshow-symowners</strong> Print owner identifiers next to symbol names.</li>
<li><strong>-Vstatistics</strong>[:phases] Print compiler statistics for specific phases &lt;phases&gt; (default: parser,typer,patmat,erasure,cleanup,jvm)</li>
<li><strong>-Vsymbols</strong> Print the AST symbol hierarchy after each phase.</li>
<li><strong>-Vtyper</strong> Trace type assignments.</li>
<li><strong>Note</strong>:
<ul>
<li>Boolean settings are false unless set: -Xdev -Xcheck-init:true -Xprompt:false</li>
<li>Multi-valued settings are comma-separated: -Xlint:infer-any,unused,-missing-interpolator</li>
<li>Phases are a list of names, ids, or ranges of ids: -Xprint:parser,typer,5-10 -Ylog:-4_</li>
<li>Use _ to enable all: -language:_ -Xprint:_</li>
</ul></li>
</ul>
<h1 id="advanced-options--x">Advanced Options (-X)</h1>
<ul>
<li><strong>-Xcheckinit</strong> Wrap field accessors to throw an exception on uninitialized access.</li>
<li><strong>-Xdev</strong> Indicates user is a developer - issue warnings about anything which seems amiss</li>
<li><strong>-Xdisable-assertions</strong> Generate no assertions or assumptions.</li>
<li><strong>-Xelide-below</strong> &lt;n&gt; Calls to <span class="citation">@elidable</span> methods are omitted if method priority is lower than argument</li>
<li><strong>-Xgenerate-phase-graph</strong> &lt;file&gt; Generate the phase graphs (outputs .dot files) to fileX.dot.</li>
<li><strong>-Xlint</strong>:&lt;warnings&gt; Enable recommended warnings</li>
<li><strong>-Xmacro-settings</strong>:&lt;option&gt; Custom settings for macros.</li>
<li><strong>-Xmain-class</strong> &lt;path&gt; Class for manifest’s Main-Class entry (only useful with -d &lt;jar&gt;)</li>
<li><strong>-Xmaxerrs</strong> &lt;n&gt; Maximum errors to print</li>
<li><strong>-Xmaxwarns</strong> &lt;n&gt; Maximum warnings to print</li>
<li><strong>-Xmigration</strong>:&lt;version&gt; Warn about constructs whose behavior may have changed since version.</li>
<li><strong>-Xmixin-force-forwarders</strong>:&lt;mode&gt; Generate forwarder methods in classes inhering concrete methods from traits. Default: <code>true</code>, <code>help</code> to list choices.</li>
<li><strong>-Xno-forwarders</strong> Do not generate static forwarders in mirror classes.</li>
<li><strong>-Xno-patmat-analysis</strong> Don’t perform exhaustivity/unreachability analysis. Also, ignore <span class="citation">@switch</span> annotation.</li>
<li><strong>-Xno-uescape</strong> Disable handling of nicode escapes.</li>
<li><strong>-Xnojline</strong> Do not use JLine for editing.</li>
<li><strong>-Xplugin</strong>:&lt;paths&gt; Load a plugin from each classpath.</li>
<li><strong>-Xplugin-disable</strong>:&lt;plugin&gt; Disable plugins by name.</li>
<li><strong>-Xplugin-list</strong> Print a synopsis of loaded plugins.</li>
<li><strong>-Xplugin-require</strong>:&lt;plugin&gt; Abort if a named plugin is not loaded.</li>
<li><strong>-Xpluginsdir</strong> &lt;path&gt; Path to search for plugin archives.</li>
<li><strong>-Xprompt</strong> Display a prompt after each error (debugging option).</li>
<li><strong>-Xreporter</strong> &lt;classname&gt; Specify a custom reporter for compiler messages.</li>
<li><strong>-Xresident</strong> Compiler stays resident: read source filenames from standard input.</li>
<li><strong>-Xscript</strong> &lt;object&gt; Treat the source file as a script and wrap it in a main method.</li>
<li><strong>-Xsource</strong>:&lt;version&gt; Treat compiler input as Scala source for the specified version, see <a href="https://github.com/scala/bug/issues/8126">scala/bug#8126</a>.</li>
<li><strong>-Xsource-reader</strong> &lt;classname&gt; Specify a custom method for reading source files.</li>
<li><strong>-Xverify</strong> Verify generic signatures in generated bytecode.</li>
<li><strong>-Xxml</strong>:&lt;propertys&gt; Configure XML parsing.</li>
</ul>
<h1 id="private-options--y">Private Options (-Y)</h1>
<ul>
<li><strong>-Ybackend-parallelism</strong> &lt;n&gt; maximum worker threads for backend</li>
<li><strong>-Ybackend-worker-queue</strong> &lt;n&gt; backend threads worker queue size</li>
<li><strong>-Ybreak-cycles</strong> Attempt to break cycles encountered during typing</li>
<li><strong>-Ycache-macro-class-loader</strong>:&lt;policy&gt; Policy for caching class loaders for macros that are dynamically loaded. Default: <code>none</code>, <code>help</code> to list choices.</li>
<li><strong>-Ycache-plugin-class-loader</strong>:&lt;policy&gt; Policy for caching class loaders for compiler plugins that are dynamically loaded. Default: <code>none</code>, <code>help</code> to list choices.</li>
<li><strong>-Ycheck</strong>:&lt;phases&gt; Check the tree at the end of &lt;phases&gt;</li>
<li><strong>-Ycompact-trees</strong> Use compact tree printer when displaying trees.</li>
<li><strong>-Ydelambdafy</strong>:&lt;strategy&gt; Strategy used for translating lambdas into JVM code. (inline,[method])</li>
<li><strong>-Ydump-classes</strong> &lt;dir&gt; Dump the generated bytecode to .class files (useful for reflective compilation that utilizes in-memory classloaders).</li>
<li><strong>-Ygen-asmp</strong> &lt;dir&gt; Generate a parallel output directory of .asmp files (ie ASM Textifier output).</li>
<li><strong>-Yimports</strong>:&lt;import&gt; Custom root imports, default is <code>java.lang,scala,scala.Predef</code>.</li>
<li><strong>-Yjar-compression-level</strong> &lt;n&gt; compression level to use when writing jar files</li>
<li><strong>-Ymacro-annotations</strong> Enable support for macro annotations, formerly in macro paradise.</li>
<li><strong>-Ymacro-classpath</strong> &lt;path&gt; The classpath used to reflectively load macro implementations, default is the compilation classpath.</li>
<li><strong>-Ymacro-expand</strong>:&lt;policy&gt; Control expansion of macros, useful for scaladoc and presentation compiler. ([normal],none,discard)</li>
<li><strong>-Ymacro-global-fresh-names</strong> Should fresh names in macros be unique across all compilation units</li>
<li><strong>-Yno-completion</strong> Disable tab-completion in the REPL.</li>
<li><strong>-Yno-flat-classpath-cache</strong> Do not cache flat classpath representation of classpath elements from jars across compiler instances.</li>
<li><strong>-Yno-generic-signatures</strong> Suppress generation of generic signatures for Java.</li>
<li><strong>-Yno-imports</strong> Compile without importing scala.<em>, java.lang.</em>, or Predef.</li>
<li><strong>-Yno-predef</strong> Compile without importing Predef.</li>
<li><strong>-Yopt-inline-heuristics</strong>:&lt;strategy&gt; Set the heuristics for inlining decisions. (at-inline-annotated,everything,[default])</li>
<li><strong>-Ypatmat-exhaust-depth</strong> &lt;n&gt; off</li>
<li><strong>-Ypresentation-any-thread</strong> Allow use of the presentation compiler from any thread</li>
<li><strong>-Ypresentation-debug</strong> Enable debugging output for the presentation compiler.</li>
<li><strong>-Ypresentation-delay</strong> &lt;n&gt; Wait number of ms after typing before starting typechecking</li>
<li><strong>-Ypresentation-log</strong> &lt;file&gt; Log presentation compiler events into file</li>
<li><strong>-Ypresentation-replay</strong> &lt;file&gt; Replay presentation compiler events from file</li>
<li><strong>-Ypresentation-strict</strong> Do not report type errors in sources with syntax errors.</li>
<li><strong>-Ypresentation-verbose</strong> Print information about presentation compiler tasks.</li>
<li><strong>-Yprint-trees</strong>:&lt;style&gt; How to print trees when -Xprint is enabled. ([text],compact,format,text+format)</li>
<li><strong>-Yprofile-destination</strong> &lt;file&gt; Profiling output - specify a file or <code>-</code> for console.</li>
<li><strong>-Yprofile-enabled</strong> Enable profiling.</li>
<li><strong>-Yprofile-external-tool</strong>[:phases] Enable profiling for a phase using an external tool hook. Generally only useful for a single phase &lt;phases&gt; (default: typer)</li>
<li><strong>-Yprofile-run-gc</strong>[:phases] Run a GC between phases - this allows heap size to be accurate at the expense of more time. Specify a list of phases, or all &lt;phases&gt; (default: _)</li>
<li><strong>-Yprofile-trace</strong> &lt;file&gt; Capture trace of compilation in Chrome Trace format</li>
<li><strong>-Yrangepos</strong> Use range positions for syntax trees.</li>
<li><strong>-Yrecursion</strong> &lt;n&gt; Set recursion depth used when locking symbols.</li>
<li><strong>-Yreify-copypaste</strong> Dump the reified trees in copypasteable representation.</li>
<li><strong>-Yrepl-class-based</strong> Use classes to wrap REPL snippets instead of objects</li>
<li><strong>-Yrepl-outdir</strong> &lt;path&gt; Write repl-generated classfiles to given output directory (use “” to generate a temporary dir)</li>
<li><strong>-Yresolve-term-conflict</strong>:&lt;strategy&gt; Resolve term conflicts. (package,object,[error])</li>
<li><strong>-Yscriptrunner</strong> &lt;classname&gt; Specify a scala.tools.nsc.ScriptRunner (default, resident, shutdown, or a class name).</li>
<li><strong>-Yskip</strong>:&lt;phases&gt; Skip &lt;phases&gt;</li>
<li><strong>-Ystop-after</strong>:&lt;phases&gt; Stop after &lt;phases&gt;</li>
<li><strong>-Ystop-before</strong>:&lt;phases&gt; Stop before &lt;phases&gt;</li>
<li><strong>-Yvalidate-pos</strong>:&lt;phases&gt; Validate positions after the given phases (implies -Yrangepos) &lt;phases&gt;</li>
<li><strong>Note</strong>:
<ul>
<li>Boolean settings are false unless set: -Xdev -Xcheck-init:true -Xprompt:false</li>
<li>Multi-valued settings are comma-separated: -Xlint:infer-any,unused,-missing-interpolator</li>
<li>Phases are a list of names, ids, or ranges of ids: -Xprint:parser,typer,5-10 -Ylog:-4</li>
<li>Use _ to enable all: -language:_ -Xprint:_</li>
</ul></li>
</ul>]]></description>
    <pubDate>Fri, 14 Jun 2019 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2019-06-14-scalac-2.13-options-and-flags.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Running Scala Metals With Sublime Text on MacOSX</title>
    <link>http://blog.ssanj.net/posts/2019-06-11-running-scala-metals-with-sublime-text-on-macosx.html</link>
    <description><![CDATA[<p>I’ve finally got <a href="https://scalameta.org/metals">Scala Metals</a> working through Sublime Text 3 on MacOSX Mojave and I’m pretty happy about it! There are some quirks to getting it to work though, so I thought I’d document them here for anyone else who might be struggling to set this up.</p>
<div class="figure">
<img src="/images/metals/metals-sample.gif" alt="Metal Works" />
<p class="caption">Metal Works</p>
</div>
<h2 id="installation">Installation</h2>
<ul>
<li>Use the package manager to install the <em>LSP</em> plugin from <a href="https://packagecontrol.io/packages/LSP">tomv564/LSP</a> or from <a href="https://github.com/tomv564/LSP">Github</a>.</li>
<li>Make sure you have a Java 8 JDK installed and that it is returned as the default JDK. You can find out what your default JDK is by running:</li>
</ul>
<pre class="terminal scrollx"><code>  /usr/libexec/java-home</code></pre>
<p>If you don’t see a JDK 1.8.x version listed, then have a look at <a href="#invalid-java-version-something-other-than-jdk-8">Invalid Java Version</a></p>
<ul>
<li>Make sure you have a supported Scala version (2.11 and 2.12):</li>
</ul>
<blockquote>
<p>Metals works only with Scala versions 2.12.8, 2.12.7, 2.11.12, 2.12.6, 2.12.5, 2.12.4, 2.11.11, 2.11.10 and 2.11.9. Note that 2.10.x and 2.13.x are not supported.</p>
</blockquote>
<ul>
<li>Install <a href="https://get-coursier.io/">coursier</a> through <em>Homebrew</em>:</li>
</ul>
<pre class="terminal scrollx"><code>  brew tap coursier/formulas
  brew install coursier</code></pre>
<p>Once installed verify that you have the latest version with:</p>
<pre class="terminal scrollx"><code>  coursier --help</code></pre>
<p>Which should return you a version after <code>1.1.0-M9</code>. The latest version as of writing this post is:</p>
<pre class="terminal scrollx"><code>  Coursier 2.0.0-RC1</code></pre>
<ul>
<li>Install <a href="https://scalameta.org/metals/">Scala Metals</a> for <a href="https://scalameta.org/metals/docs/editors/sublime.html">Sublime Text</a>:</li>
</ul>
<pre class="terminal scrollx"><code>  coursier bootstrap \
    --java-opt -Xss4m \
    --java-opt -Xms100m \
    --java-opt -Dmetals.client=sublime \
    org.scalameta:metals_2.12:0.6.1 \
    -r bintray:scalacenter/releases \
    -r sonatype:snapshots \
    -o /usr/local/bin/metals-sublime -f</code></pre>
<p><em>The incantation above installs Metals <code>0.6.1</code>. Check the Metals site for the latest version</em>.</p>
<p>Ensure the generated <strong>metals-sublime</strong> binary is available on your <em>$PATH</em>.</p>
<ul>
<li>Ensure you have <a href="https://www.scala-sbt.org/">SBT</a> version 0.13.17+ or 1.x installed.</li>
</ul>
<h2 id="configuration">Configuration</h2>
<ul>
<li>Update your <em>key bindings</em> for LSP (<strong>Preferences</strong> &gt; <strong>Package Settings</strong> &gt; <strong>LSP</strong> &gt; <strong>Key Bindings</strong>) as needed. The snippet below adds the <strong>F12</strong> binding for going to a definition of a symbol and the <strong>CMD</strong> + <strong>ALT</strong> + <strong>H</strong> binding for signature help and <strong>SHIFT</strong> + <strong>F10</strong> to import a project:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode json scrollx"><code class="sourceCode json">    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;f12&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_symbol_definition&quot;</span><span class="fu">}</span><span class="er">,</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;super+alt+h&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;noop&quot;</span><span class="fu">,</span> <span class="dt">&quot;context&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span> <span class="dt">&quot;key&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp.signature_help&quot;</span><span class="fu">,</span> <span class="dt">&quot;operator&quot;</span><span class="fu">:</span> <span class="st">&quot;equal&quot;</span><span class="fu">,</span> <span class="dt">&quot;operand&quot;</span><span class="fu">:</span> <span class="dv">0</span><span class="fu">}</span><span class="ot">]</span><span class="fu">,</span> <span class="fu">}</span><span class="er">,</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;shift+f10&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_execute&quot;</span><span class="fu">,</span> <span class="dt">&quot;args&quot;</span><span class="fu">:{</span><span class="dt">&quot;command_name&quot;</span><span class="fu">:</span> <span class="st">&quot;build-import&quot;</span><span class="fu">,</span> <span class="dt">&quot;command_args&quot;</span><span class="fu">:{}}}</span><span class="er">,</span></code></pre></div>
<ul>
<li>Update your <em>settings</em> for LSP (<strong>Preferences</strong> &gt; <strong>Package Settings</strong> &gt; <strong>LSP</strong> &gt; <strong>Settings</strong>) with the following:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode json scrollx"><code class="sourceCode json"><span class="fu">{</span>
  <span class="dt">&quot;log_payloads&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;log_debug&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;log_stderr&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;show_diagnostics_severity_level&quot;</span><span class="fu">:</span> <span class="dv">4</span><span class="fu">,</span>
  <span class="dt">&quot;show_code_actions_bulb&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;complete_all_chars&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;only_show_lsp_completions&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span>
  <span class="dt">&quot;prefer_label_over_filter_text&quot;</span><span class="fu">:</span> <span class="kw">true</span>
<span class="fu">}</span></code></pre></div>
<p>I’ve included a lot of diagnostic logging to ensure I can see when something goes wrong. If you are happy with your setup, feel free to remove this extra logging:</p>
<ul>
<li><strong>log_payloads</strong> - Log all payloads from the LSP server</li>
<li><strong>log_debug</strong> - Extra verbose logging</li>
<li><strong>log_stderr</strong> - Log server errors</li>
<li><strong>show_diagnostics_severity_level</strong> - Bumped to 4 which is INFO and below (everything). 3 is default.</li>
</ul>
<p>These are the non-diagnostic settings:</p>
<ul>
<li><strong>prefer_label_over_filter_text</strong> - Set to <strong>true</strong> to return full function definitions as suggestions. If set to <strong>false</strong> returns only the function name.</li>
<li><strong>show_code_actions_bulb</strong> - Show icon in the gutter when there is an action to take</li>
<li><strong>only_show_lsp_completions</strong> - When set to <strong>true</strong> Turns off all other suggestions for completions.</li>
<li><strong>complete_all_chars</strong> - Set to <strong>true</strong> to get completions for all characters</li>
</ul>
<p>You can find more detail on these settings in the <a href="https://lsp.readthedocs.io/en/latest/features/#configuring">docs</a>.</p>
<ul>
<li>Open a Scala project through Sublime Text.</li>
<li>Launch the Command Palette with <strong>CMD</strong> + <strong>SHIFT</strong> + <strong>P</strong> and choose <strong>LSP: Enable Language Server in Project</strong> &gt; <strong>metals</strong>. This will create a <em>.metals</em> directory in your root folder. It will contain a <em>metals.log</em> file which you can scan for any errors.</li>
<li>Open the console with <strong>CTRL</strong> + <strong>`</strong> to scan for any errors.</li>
<li>Browse to a Scala file and open it. This needs to be done to trigger the import process.</li>
<li><p>There should be a prompt asking you to import the project. Choose <strong>import</strong>. This will then proceed to download all your dependencies and create a <em>.bloop</em> directory in your root folder. You should see something like this in the console:</p>
<blockquote>
<p>server: running ‘sbt metalsEnable bloopInstall’</p>
</blockquote></li>
<li><p>Watch the console for any obvious errors such as:</p>
<blockquote>
<p>no functionality will work</p>
</blockquote></li>
<li><p>If everything worked you should see something like this in the logs:</p>
<blockquote>
<p>server: time: compiled project your_project_name in time_taken s</p>
</blockquote></li>
<li><p>If you didn’t see the import dialog, press <strong>SHIFT</strong> + <strong>F10</strong>. If you saw any errors in the log go to <a href="#workarounds">workarounds</a>.</p></li>
</ul>
<h2 id="workarounds">Workarounds</h2>
<h3 id="no-import-dialog">No Import Dialog</h3>
<ul>
<li>Try <strong>SHIFT</strong> + <strong>F10</strong>. If that does not work follow the steps below.</li>
<li>Launch the Command Palette with <strong>CMD</strong> + <strong>SHIFT</strong> + <strong>P</strong> and choose <strong>LSP: Disable Language Server in Project</strong> &gt; <strong>metals</strong>.</li>
<li>Delete the <em>.metals</em> directory. If you haven’t stopped the server, the <em>.metals</em> folder will keep reappearing.</li>
<li>Close the project window. You may see a message about the metals server crashing. Choose <strong>cancel</strong> not to restart it.</li>
<li><p>Open your project in Sublime Text again.</p></li>
<li>Launch the Command Palette with <strong>CMD</strong> + <strong>SHIFT</strong> + <strong>P</strong> and choose <strong>LSP: Enable Language Server in Project</strong> &gt; <strong>metals</strong>.</li>
<li>Open a Scala file.</li>
<li><p>You should now see the <strong>import</strong> dialog. Choose <strong>import</strong>.</p></li>
</ul>
<p><em>If you do not see the <em>import</em> dialog check the logs for one of the other errors listed below.</em></p>
<h3 id="invalid-sbt-version">Invalid SBT version</h3>
<p>You’ll see something like this in the Sublime Text console:</p>
<blockquote>
<p>Automatic build import is not supported for sbt 0.13.xyz. To fix this problem, upgrade to sbt v0.13.17+</p>
</blockquote>
<p>Bump your SBT version to at least <em>0.13.17</em> in your <em>project/properties</em> and then follow <a href="#no-import-dialog">No Import Dialog</a></p>
<h3 id="invalid-java-version-something-other-than-jdk-8">Invalid Java version (Something other than JDK 8)</h3>
<p>Metals only works with JDK 8 at the moment.</p>
<blockquote>
<p>OpenJDK or Oracle Java 8. Eclipse OpenJ9 and Java 11 are not supported, please make sure the JAVA_HOME environment variable points to valid Java 8 installation.</p>
</blockquote>
<p>Use <em>/usr/libexec/java-home</em> to verify your JDK version. When I initially ran it, I had a bunch of JDKs installed:</p>
<pre class="terminal scrollx"><code>jdk-10.0.2.jdk
jdk1.8.0_181.jdk
jdk1.8.0_131.jdk</code></pre>
<p>and <em>jdk-10.0.2</em> was chosen as the default - because it was the latest. And while the are a <a href="https://superuser.com/questions/682260/how-can-i-set-environment-variables-for-gui-apps-in-os-x-mavericks">number</a> of <a href="https://stackoverflow.com/questions/1348842/what-should-i-set-java-home-to-on-osx/16428639">workarounds</a> for <a href="https://www.ibm.com/support/knowledgecenter/en/SSPJLC_7.6.2/com.ibm.si.mpl.doc/tshoot/ts_java_home.html">this</a>, I chose to go the simple route and moved my <em>jdk-10.0.2</em> installation into an <em>other</em> folder since I didn’t really use it:</p>
<pre class="terminal scrollx"><code>other //my jdk-10.0.2.jdk installation is in here
jdk1.8.0_181.jdk
jdk1.8.0_131.jdk</code></pre>
<p>Consequently when I ran <em>/usr/libexec/java-home</em>, <em>jdk1.8.0_181</em> was the default JDK - which is what I wanted. You can also use something like <a href="https://github.com/jenv/jenv">Jenv</a> to manage your Java environments.</p>
<h3 id="no-build-target-using-presentation-compiler">no build target: using presentation compiler</h3>
<p>This means that <a href="https://github.com/scalacenter/bloop">bloop</a> has not run against your project, which means the project has not been imported. Follow <a href="#no-import-dialog">No Import Dialog</a> to fix.</p>
<h3 id="not-a-valid-command-metalsenable">Not a valid command: metalsEnable</h3>
<p>Sounds like this is some sort of corruption issue, documented <a href="https://github.com/scalameta/metals/issues/685">here</a> or <a href="https://github.com/scalameta/metals/issues/689">here</a>. The log file should reference a <em>sbt-launch.jar</em> in the <em>/tmp</em> directory:</p>
<blockquote>
<p>/tmp/metals-some-long-hash/sbt-launch.jar</p>
</blockquote>
<ul>
<li>Delete the above file</li>
<li>Delete <em>project/target</em> directory</li>
<li>Delete the <em>~/.sbt/1.0/plugins/target/</em> directory</li>
<li>Delete the <em>.bloop</em> directory in your project root</li>
</ul>
<p>Follow <a href="#no-import-dialog">No Import Dialog</a> to reimport the project.</p>
<h3 id="no-.metals-folder-created">No .metals folder created</h3>
<p>You launched the Command Palette with <strong>CMD</strong> + <strong>SHIFT</strong> + <strong>P</strong> and choose <strong>LSP: Enable Language Server in Project</strong> &gt; <strong>metals</strong>. Unfortunately no <em>.metals</em> folder appeared in your project root.</p>
<p>Launch the Command Palette and choose <strong>LSP: Disable Language Server in Project</strong> &gt; <strong>metals</strong>.</p>
<p>Give it a second and try enabling it again with <strong>LSP: Enable Language Server in Project</strong> &gt; <strong>metals</strong>. This should hopefully create the <em>.metals</em> folder. If not try closing the project window in Sublime and trying this workaround again.</p>
<h2 id="whats-not-working">What’s not working</h2>
<p>I couldn’t get imports working. It looks like this works in Visual Studio Code though. At the moment I use my <a href="https://github.com/ssanj/scuggest">Scuggest</a> plugin to fill this gap.</p>
<h2 id="glossary">Glossary</h2>
<h3 id="all-lsp-server-settings">All LSP Server Settings</h3>
<ul>
<li><strong>complete_all_chars</strong> true request completions for all characters, not just trigger characters</li>
<li><strong>only_show_lsp_completions</strong> false disable sublime word completion and snippets from autocomplete lists</li>
<li><strong>completion_hint_type</strong> “auto” override automatic completion hints with “detail”, “kind” or “none”</li>
<li><strong>prefer_label_over_filter_text</strong> false always use the “label” key instead of the “filterText” key in CompletionItems</li>
<li><strong>show_references_in_quick_panel</strong> false show symbol references in Sublime’s quick panel instead of the bottom panel</li>
<li><strong>quick_panel_monospace_font</strong> false use monospace font for the quick panel</li>
<li><strong>show_status_messages</strong> true show messages in the status bar for a few seconds</li>
<li><strong>show_view_status</strong> true show permanent language server status in the status bar</li>
<li><strong>auto_show_diagnostics_panel</strong> true open the diagnostics panel automatically if there are diagnostics</li>
<li><strong>show_diagnostics_phantoms</strong> false show diagnostics as phantoms while the file has no changes</li>
<li><strong>show_diagnostics_count_in_view_status</strong> false show errors and warnings count in the status bar</li>
<li><strong>show_diagnostics_in_view_status</strong> true when on a diagnostic with the cursor, show the text in the status bar</li>
<li><strong>diagnostics_highlight_style</strong> “underline” highlight style of code diagnostics, “underline” or “box”</li>
<li><strong>highlight_active_signature_parameter</strong>: highlight the active parameter of the currently active signature</li>
<li><strong>document_highlight_style</strong>: document highlight style: “underline”, “stippled”, “squiggly” or “”</li>
<li><strong>document_highlight_scopes</strong>: customize your sublime text scopes for document highlighting</li>
<li><strong>diagnostics_gutter_marker</strong> “dot” gutter marker for code diagnostics: “dot”, “circle”, “bookmark”, “cross” or “”</li>
<li><strong>show_code_actions_bulb</strong> false show a bulb in the gutter when code * -* <em>actions</em> are available log_debug false show debug logging in the sublime console</li>
<li><strong>log_server</strong> true show server/logMessage notifications from language - <em>servers</em> in the console</li>
<li><strong>log_stderr</strong> false show language server stderr output in the console log_payloads false show full JSON-RPC responses in the console</li>
</ul>
<h3 id="all-keybindings">All Keybindings</h3>
<div class="sourceCode"><pre class="sourceCode json scrollx"><code class="sourceCode json"><span class="ot">[</span>
    <span class="er">//</span> <span class="er">Show</span> <span class="er">Code</span> <span class="er">Actions</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;super+.&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_code_actions&quot;</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Show/Hide</span> <span class="er">Diagnostics</span> <span class="er">Panel</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;super+alt+m&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_show_diagnostics_panel&quot;</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Go</span> <span class="er">To</span> <span class="er">Next/Previous</span> <span class="er">Diagnostics</span> <span class="er">-</span> <span class="er">THIS</span> <span class="er">OVERRIDES</span> <span class="er">DEFAULT</span> <span class="er">SUBLIME</span> <span class="er">KEYBINDINGS</span>
    <span class="er">//</span> <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;f4&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;next_result&quot;</span> <span class="fu">}</span><span class="ot">,</span>
    <span class="er">//</span> <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;shift+f4&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;prev_result&quot;</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Trigger</span> <span class="er">Signature</span> <span class="er">Help</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;super+alt+space&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;noop&quot;</span><span class="fu">,</span> <span class="dt">&quot;context&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span> <span class="dt">&quot;key&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp.signature_help&quot;</span><span class="fu">,</span> <span class="dt">&quot;operator&quot;</span><span class="fu">:</span> <span class="st">&quot;equal&quot;</span><span class="fu">,</span> <span class="dt">&quot;operand&quot;</span><span class="fu">:</span> <span class="dv">0</span><span class="fu">}</span><span class="ot">]</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Move</span> <span class="er">Up/Down</span> <span class="er">in</span> <span class="er">Signature</span> <span class="er">Help</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;up&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;noop&quot;</span><span class="fu">,</span> <span class="dt">&quot;context&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span> <span class="dt">&quot;key&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp.signature_help&quot;</span><span class="fu">,</span> <span class="dt">&quot;operator&quot;</span><span class="fu">:</span> <span class="st">&quot;equal&quot;</span><span class="fu">,</span> <span class="dt">&quot;operand&quot;</span><span class="fu">:</span> <span class="dv">-1</span> <span class="fu">}</span><span class="ot">]</span> <span class="fu">}</span><span class="ot">,</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;down&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;noop&quot;</span><span class="fu">,</span> <span class="dt">&quot;context&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span> <span class="dt">&quot;key&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp.signature_help&quot;</span><span class="fu">,</span> <span class="dt">&quot;operator&quot;</span><span class="fu">:</span> <span class="st">&quot;equal&quot;</span><span class="fu">,</span> <span class="dt">&quot;operand&quot;</span><span class="fu">:</span> <span class="dv">1</span> <span class="fu">}</span><span class="ot">]</span> <span class="fu">}</span><span class="ot">,</span>

     <span class="er">//</span> <span class="er">Find</span> <span class="er">Symbol</span> <span class="er">References</span>
    <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;shift+f12&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_symbol_references&quot;</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Go</span> <span class="er">To</span> <span class="er">Definition</span>
    <span class="er">//</span> <span class="fu">{</span><span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_symbol_definition&quot;</span><span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Rename</span> <span class="er">Symbol</span>
    <span class="er">//</span> <span class="fu">{</span> <span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_symbol_rename&quot;</span> <span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Format</span> <span class="er">Document</span>
    <span class="er">//</span> <span class="fu">{</span><span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_format_document&quot;</span><span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Format</span> <span class="er">Selection</span>
    <span class="er">//</span> <span class="fu">{</span><span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_format_document_range&quot;</span><span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Document</span> <span class="er">Symbols</span>
    <span class="er">//</span> <span class="fu">{</span><span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_document_symbols&quot;</span><span class="fu">}</span><span class="ot">,</span>

    <span class="er">//</span> <span class="er">Symbol</span> <span class="er">Hover</span>
    <span class="er">//</span> <span class="fu">{</span><span class="dt">&quot;keys&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;UNBOUND&quot;</span><span class="ot">]</span><span class="fu">,</span> <span class="dt">&quot;command&quot;</span><span class="fu">:</span> <span class="st">&quot;lsp_hover&quot;</span><span class="fu">}</span><span class="ot">,</span>
<span class="ot">]</span></code></pre></div>]]></description>
    <pubDate>Tue, 11 Jun 2019 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2019-06-11-running-scala-metals-with-sublime-text-on-macosx.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Why are Default Parameter Values Considered Bad in Scala?</title>
    <link>http://blog.ssanj.net/posts/2019-05-01-why-are-default-parameter-values-considered-bad-in-scala.html</link>
    <description><![CDATA[<p>There is a very long issue under <a href="https://github.com/wartremover">Wartremover</a> titled: <a href="https://github.com/wartremover/wartremover/issues/116">“Default arguments are insane” needs explanation</a>. Wartremover is a Scala linter that I personally love using as it definitely increases the quality of any Scala code I write.</p>
<p>The issues around using Default Arguments or <a href="https://docs.scala-lang.org/tour/default-parameter-values.html">Default Parameter Values</a> (as Scala refers to them) are somewhat subtle. The Wartemover issue seems to go on forever, but there are lots of really great ideas in there and I though I could summarise some of them here.</p>
<h2 id="what-is-a-default-parameter-value">What is a Default Parameter Value?</h2>
<blockquote>
<p>Scala provides the ability to give parameters default values that can be used to allow a caller to omit those parameters.</p>
</blockquote>
<p>Here’s a quick example of Default Parameter Values (DPV):</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">log</span>(message: String, level: String = <span class="st">&quot;INFO&quot;</span>) = <span class="fu">println</span>(s<span class="st">&quot;$level: $message&quot;</span>)

<span class="fu">log</span>(<span class="st">&quot;System starting&quot;</span>)  <span class="co">//We didn&#39;t supply level which defaults to INFO; prints INFO: System starting</span>
<span class="fu">log</span>(<span class="st">&quot;User not found&quot;</span>, <span class="st">&quot;WARNING&quot;</span>)  <span class="co">// prints WARNING: User not found</span></code></pre></div>
<p>One of the main benefits of DPV is that you don’t need to supply all the parameters to a method - just the ones that are mandatory. This sounds like a really useful idea, so why are people recommending that we don’t use it?</p>
<h2 id="issues">Issues</h2>
<h3 id="unclear-code">1. Unclear Code</h3>
<p>Here’s an example of some code that uses DPV:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">val</span> streamName: String = ...
KinesisStream.<span class="fu">fromUrl</span>(streamName)</code></pre></div>
<p>Now if you just read the above method it looks like it might be doing the wrong thing. Why are we supplying a Stream name to a method that clearly states that it needs a Url?</p>
<p>The method is defined as:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> KinesisStream {
  <span class="kw">def</span> <span class="fu">fromUrl</span>(streamName: String, url: Option[String] = None): ...
}</code></pre></div>
<p>The default value for <code>url</code> hides the true nature of what this method needs. The <code>url</code> parameter has been made optional because under some circumstances it is not needed.</p>
<h3 id="breaks-currying-and-partial-application">2. <del>Breaks Currying and Partial Application</del></h3>
<p><a href="https://twitter.com/tpolecat">Rob Norris</a> has a nice article on <a href="https://tpolecat.github.io/2014/06/09/methods-functions.html">Methods are not Functions</a> which covers why currying and partial Application of Functions is broken with DPV. Here’s a simple example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">log</span>(message: String, level: String = <span class="st">&quot;INFO&quot;</span>) = <span class="fu">println</span>(s<span class="st">&quot;$level: $message&quot;</span>)

scala&gt; <span class="fu">log</span>(<span class="st">&quot;hello!&quot;</span>) <span class="co">//one param</span>
INFO: hello!

scala&gt; <span class="fu">log</span>(<span class="st">&quot;hello!&quot;</span>, <span class="st">&quot;WARN&quot;</span>) <span class="co">//both params</span>
WARN: hello!

<span class="co">//can we map over log?</span>
scala&gt; <span class="kw">val</span> messages = List(<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;world&quot;</span>)
messages: List[String] = List(hello, world)

 <span class="co">//does not work</span>
scala&gt; messages.<span class="fu">map</span>(log)
&lt;console&gt;:<span class="dv">14</span>: error: <span class="kw">type</span> mismatch;
 found   : (String, String) =&gt; Unit
 required: String =&gt; ?
       messages.<span class="fu">map</span>(log)
                    ^
 <span class="co">//does not work</span>
scala&gt; messages.<span class="fu">map</span>(log _)
&lt;console&gt;:<span class="dv">14</span>: error: <span class="kw">type</span> mismatch;
 found   : (String, String) =&gt; Unit
 required: String =&gt; ?
       messages.<span class="fu">map</span>(log _)

<span class="co">//works!</span>
scala&gt; messages.<span class="fu">map</span>(<span class="fu">log</span>(_))
INFO: hello
INFO: world
res6: List[Unit] = List((), ())

<span class="co">//also works</span>
scala&gt; messages.<span class="fu">map</span>(x =&gt; <span class="fu">log</span>(x))
INFO: hello
INFO: world
res7: List[Unit] = List((), ())</code></pre></div>
<p>Weird. So it seems like you can use Currying and Partial Application if you tweak the syntax a little.</p>
<p>Let’s have a go with Rob’s example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">def</span> <span class="fu">foo</span>(n: Int = <span class="dv">3</span>, s: String) = s * n
foo: (n: Int, s: String)String

<span class="co">//works</span>
scala&gt; <span class="fu">foo</span>(s = <span class="st">&quot;$$&quot;</span>)
res36: String = $$$$$$

<span class="co">//works</span>
scala&gt; <span class="kw">val</span> p1 = <span class="fu">foo</span>(<span class="dv">42</span>, _:String)
p1: String =&gt; String = $$Lambda$<span class="dv">1192</span>/<span class="dv">1172016038</span>@6c826924

scala&gt; <span class="fu">p1</span>(<span class="st">&quot;@&quot;</span>)
res38: String = @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

<span class="co">//can we get defaults for free after conversion to a function?</span>
scala&gt; <span class="kw">val</span> f1 = foo _
f1: (Int, String) =&gt; String = $$Lambda$<span class="dv">1193</span>/<span class="dv">1526085518</span>@205b3a1a

<span class="co">//does not work</span>
scala&gt; <span class="fu">f1</span>(<span class="dv">10</span>)
&lt;console&gt;:<span class="dv">13</span>: error: not enough arguments <span class="kw">for</span> method apply: (v1: Int, v2: String)String in <span class="kw">trait</span> Function2.
Unspecified value parameter v2.
       <span class="fu">f1</span>(<span class="dv">10</span>)

<span class="co">//works</span>
scala&gt; <span class="kw">val</span> p2 = <span class="fu">f1</span>(<span class="dv">10</span>, _: String)
p2: String =&gt; String = $$Lambda$<span class="dv">1408</span>/<span class="dv">1660635397</span>@7f8ac326

scala&gt; <span class="fu">p2</span>(<span class="st">&quot;*&quot;</span>)
res44: String = **********

scala&gt; <span class="kw">val</span> p3 = <span class="fu">f1</span>(_:Int, <span class="st">&quot;$&quot;</span>)
p3 =&gt; String = $$Lambda$<span class="dv">1409</span>/<span class="dv">1435397638</span>@4047789d

scala&gt; <span class="fu">p3</span>(<span class="dv">5</span>)
res48: String = $$$$$

<span class="co">//we can also supply all arguments</span>
scala&gt; <span class="fu">f1</span>(<span class="dv">10</span>, <span class="st">&quot;*&quot;</span>)
res50: String = **********

<span class="co">//use in higher-order functions</span>
scala&gt; messages.<span class="fu">map</span>(p1)
res51: List[String] = List(hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello, worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld)

scala&gt; messages.<span class="fu">map</span>(p2)
res52: List[String] = List(hellohellohellohellohellohellohellohellohellohello, worldworldworldworldworldworldworldworldworldworld)

scala&gt; List(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>).<span class="fu">map</span>(p3)
res53: List[String] = List($, $$, $$$)</code></pre></div>
<p>This seems to be a moot issue. While the syntax is more awkward than necessary, Currying and Partial Application is certainly possible with DPV. Once we η-expand the method <code>foo</code> to the value <code>f1</code>, we lose the defaulted values defined in <code>foo</code> though; which seems a little odd.</p>
<p>Another way to partially apply methods with default parameters is create a wrapper method with only the mandatory fields:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">def</span> <span class="fu">foo</span>(n: Int = <span class="dv">3</span>, s: String) = s * n
foo: (n: Int, s: String)String

<span class="co">//wrap foo with foo2</span>
scala&gt; <span class="kw">def</span> <span class="fu">foo2</span>(s: String) = <span class="fu">foo</span>(s = s)
foo2: (s: String)String

scala&gt; <span class="fu">foo2</span>(<span class="st">&quot;#&quot;</span>)
res29: String = ###

<span class="co">//now we can use foo2 in higher-order functions</span>
scala&gt; messages.<span class="fu">map</span>(foo2)
res30: List[String] = List(hellohellohello, worldworldworld)</code></pre></div>
<p>The above technique alludes that there should have been two separate methods all along.</p>
<h3 id="bugs-of-convenience">3. Bugs of Convenience</h3>
<p>In a project I worked on we had some asynchronous tasks that split a workload into chunks using a sliding window of ten elements. Here’s a simplified version of the code:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">val</span> elements = (<span class="dv">1</span> to <span class="dv">30</span>).<span class="fu">toList</span>
elements: List[Int] = List(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">11</span>, <span class="dv">12</span>, <span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">17</span>, <span class="dv">18</span>, <span class="dv">19</span>, <span class="dv">20</span>, <span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>)

scala&gt; <span class="kw">val</span> it = elements.<span class="fu">sliding</span>(<span class="dv">10</span>)
it: Iterator[List[Int]] = non-empty iterator

scala&gt; it.<span class="fu">next</span>
res22: List[Int] = List(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>)

it.<span class="fu">next</span> ??? <span class="co">//what does this print?</span>
it.<span class="fu">next</span> ??? <span class="co">//what does this print?</span></code></pre></div>
<p>We witnessed a subtle bug where performance of our processing pipeline was terrible. What was going on?</p>
<p>The actual definition of <code>sliding</code> is:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> sliding[B &gt;: A](size: Int, step: Int = <span class="dv">1</span>): GroupedIterator[B]</code></pre></div>
<p>Notice the default <strong>step</strong> of 1. When we used the <code>sliding</code> function we assumed that the <code>size</code> supplied would also be the step. Everything compiled and there were no warnings. Here is the output of the above example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; it.<span class="fu">next</span>
res22: List[Int] = List(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>)

scala&gt; it.<span class="fu">next</span>
res23: List[Int] = List(<span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">11</span>)

scala&gt; it.<span class="fu">next</span>
res24: List[Int] = List(<span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">11</span>, <span class="dv">12</span>)</code></pre></div>
<p>As you can see we were processing the same items multiple times. If the <code>step</code> parameter were explicit this would not have happened. Once the mistake was corrected:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">scala&gt; <span class="kw">val</span> it = elements.<span class="fu">sliding</span>(<span class="dv">10</span>, <span class="dv">10</span>)
it: Iterator[List[Int]] = non-empty iterator

scala&gt; it.<span class="fu">next</span>
res25: List[Int] = List(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>)

scala&gt; it.<span class="fu">next</span>
res26: List[Int] = List(<span class="dv">11</span>, <span class="dv">12</span>, <span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">17</span>, <span class="dv">18</span>, <span class="dv">19</span>, <span class="dv">20</span>)

scala&gt; it.<span class="fu">next</span>
res27: List[Int] = List(<span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>)</code></pre></div>
<p>We can see the code slides over ten elements at a time as expected. These kind of bugs are hard to find. We lean on the compiler a lot to point out our mistakes. With DPV while our lives are more convenient because we have less parameters to supply our functions, the compiler fails to see our errors and omissions and can’t help.</p>
<h3 id="bugs-due-to-refactoring">4. Bugs due to Refactoring</h3>
<p>Consider an API at version 1.x that has the following method:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> Database
  <span class="kw">def</span> <span class="fu">fromUrl</span>(url: String): ...
}</code></pre></div>
<p>A client of the library may use it like:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Database.<span class="fu">fromUrl</span>(<span class="st">&quot;someUrl&quot;</span>)</code></pre></div>
<p>The developer of the library decides to add a <code>tableName</code> parameter as the <code>url</code> is optional when run locally. Not wanting to introduce an additional method for this our developer then decides to make <code>url</code> a DPV.</p>
<p>As this is a breaking change, he bumps the version of the library to 2.x.</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> Database {
  <span class="kw">def</span> <span class="fu">fromUrl</span>(tableName: String, url: Option[String] = None): ...
}</code></pre></div>
<p>Now this all seems fine. The major version of the library has been bumped so it indicates potential for a breaking change.</p>
<p>Unfortunately, the client code still compiles after moving to version 2.x of the library:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">Database.<span class="fu">fromUrl</span>(<span class="st">&quot;someUrl&quot;</span>)</code></pre></div>
<p>But now we have problem. Since the location of the <code>url</code> parameter has changed, we are supplying a url as the <code>tableName</code> parameter, and the compiler can’t inform us that anything is broken. We have to find out at runtime that we have a problem.</p>
<h2 id="alternate-designs">Alternate Designs</h2>
<p>Here are some ways to get around using DPV.</p>
<h3 id="supply-all-parameters">Supply all Parameters</h3>
<p>Replace developer convenience for software correctness. Get the developer to supply all parameters. We can change the <code>log</code> function from:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">log</span>(message: String, level: String = <span class="st">&quot;INFO&quot;</span>) = <span class="fu">println</span>(s<span class="st">&quot;$level: $message&quot;</span>)</code></pre></div>
<p>to:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">log</span>(message: String, level: String) = <span class="fu">println</span>(s<span class="st">&quot;$level: $message&quot;</span>)</code></pre></div>
<p>Callers of the <code>log</code> method have to now supply both the <code>message</code> and the <code>level</code>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="fu">log</span>(<span class="st">&quot;System starting&quot;</span>, <span class="st">&quot;INFO&quot;</span>)</code></pre></div>
<p>Better yet, convert the <code>level</code> parameter to an ADT so that the callers can’t pass through invalid values.</p>
<p>However this technique can get tedious if you have a lot of parameters that you don’t really care about.</p>
<h3 id="breakout-separate-methods">Breakout Separate Methods</h3>
<p>If you don’t want to supply all the parameters each time, consider creating separate methods for the situations you care about.</p>
<p>In the case of the bug with the Database refactoring, we could have pulled out some extra methods:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">object</span> Database {
  <span class="kw">def</span> <span class="fu">remote</span>(url: DatabaseUrl): ...
  <span class="kw">def</span> <span class="fu">remoteWithTable</span>(tableName: String, url: DatabaseUrl): ...
  <span class="kw">def</span> <span class="fu">local</span>(tableName: String): ...
}</code></pre></div>
<p><a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51173792">Rob Norris on splitting out methods</a>:</p>
<blockquote>
<p>If you have a method with a single default arg you could reasonably suggest splitting it into two methods (as you might do with a single option or boolean arg)</p>
</blockquote>
<h3 id="have-a-default-object">Have a Default Object</h3>
<p>If you have a lot of parameters to your function (and this might be a problem by itself) you could use a default object.</p>
<p>Take <code>tcpConnect</code> as an example:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">tcpConnect</span>(host: String, port: Int = <span class="dv">80</span>, sslEncryption: Boolean = <span class="kw">false</span>, localAddress: Option[String] = None):  String = <span class="st">&quot;connected&quot;</span></code></pre></div>
<p>This could be re-written with a default object:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="co">//original method with defaults removed</span>
<span class="kw">def</span> <span class="fu">tcpConnect</span>(host: String, port: Int, sslEncryption: Boolean, localAddress: Option[String]):  String = <span class="st">&quot;connected&quot;</span>

<span class="co">//config class</span>
<span class="kw">case</span> <span class="kw">class</span> <span class="fu">TcpConnection</span>(host: String, port: Int, sslEncryption: Boolean, localAddress: Option[String])

<span class="co">//function that calls tcpConnect</span>
<span class="kw">def</span> <span class="fu">fromTcpConnection</span>(tcpConnection: TcpConnection): String =
  <span class="fu">tcpConnect</span>(tcpConnection.<span class="fu">host</span>, tcpConnection.<span class="fu">port</span>, tcpConnection.<span class="fu">sslEncryption</span>, tcpConnection.<span class="fu">localAddress</span>)

<span class="co">//default object</span>
<span class="kw">def</span> defaultTcpConnection: TcpConnection = <span class="fu">TcpConnction</span>(host: String = <span class="st">&quot;localhost&quot;</span>, port: Int = <span class="dv">80</span>, sslEncryption: Boolean = <span class="kw">false</span>, localAddress: Option[String] = None)

<span class="co">//usage for a specific URL</span>
<span class="fu">fromTcpConnection</span>(defaultTcpConnection.<span class="fu">copy</span>(host = <span class="st">&quot;http://....&quot;</span>))

<span class="co">//usage for a specific port</span>
<span class="fu">fromTcpConnection</span>(defaultTcpConnection.<span class="fu">copy</span>(port = <span class="dv">8080</span>))

<span class="co">//usage for a secure URL</span>
<span class="fu">fromTcpConnection</span>(defaultTcpConnection.<span class="fu">copy</span>(host = <span class="st">&quot;https://...&quot;</span>, port = <span class="dv">443</span>, sslEncryption = <span class="kw">true</span>))</code></pre></div>
<p><a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51173792">Rob Norris on using default config objects</a>:</p>
<blockquote>
<p>… right, but then you have the awful copy method to contend with, then you add lenses, then you add phantom types to ensure that options haven’t been set more than once, etc., etc., and I’m not convinced that the complexity is warranted, given the lack thus far of any convincing reason not to use default args</p>
</blockquote>
<p>As Rob mentions, depending on how far you want to take it, avoiding DPVs might lead to very complex solutions.</p>
<p>As <a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51172733">Maxwell Swadling points out</a> you could also break out separate methods for this:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">def</span> <span class="fu">connectHTTP</span>(host: String):  String <span class="co">//where port = 80, sslEncryption = false, localAddress = None</span>
<span class="kw">def</span> <span class="fu">connectHTTPPort</span>(host: String, port: Int):  String <span class="co">//where sslEncryption = false, localAddress = None</span>
<span class="kw">def</span> <span class="fu">connectHTTPS</span>(host: String):  String <span class="co">//where port = 443, sslEncryption = true, , localAddress = None</span>
<span class="kw">def</span> <span class="fu">tcpConnect</span>(host: String, port: Int, sslEncryption: Boolean, localAddress: Option[String]):  String <span class="co">//the normal connect with all the arguments.</span></code></pre></div>
<p>If none of these alternates seem attractive, go ahead and use DPV but think hard about how it may introduce bugs into your code base.</p>
<h2 id="parting-thoughts">Parting Thoughts</h2>
<p><a href="https://twitter.com/markhibberd">Mark Hibberd</a> recommends not using DPV for the <a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51326211">following</a>:</p>
<ol style="list-style-type: decimal">
<li><strong>Allocation of resources</strong> (there are even examples of this in scalaz) - which is utterly wrong. Anything that is allocated by a default argument has no reasonable lifecycle and is unlikely (or impossible) to be closed properly.</li>
<li><strong>Default configurations</strong> - these are a developer convenience that lead to operational bugs. There is no such thing as a “safe” default, where it could mean forgetting to set something in production leads to an incorrect value rather than an error (this is closely related to what Minsky says as mentioned by Eric above).</li>
<li><strong>Common arguments through delegating methods</strong> - these are representative of what <span class="citation">@maxpow4h</span> originally stated. That if you have multiple methods with optional arguments, it is extremely easy for incorrect code to compile by forgetting to delegate one of the arguments.</li>
<li><strong>Faux overloading</strong> - it is cool to hate on overloading so I will avoid it by using named arguments with defaults, ending up with the exact same situation. Code that is subtly wrong (such as forgetting to pass argument) still compiles. This is not an acceptable situation.</li>
</ol>
<p><a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51268242">Eric Torreborre on when to use DPV</a>:</p>
<blockquote>
<p>So my own conclusion is that default arguments (and overloading) still have some value (for non-critical DSLs) but you need to be very careful where you use them.</p>
</blockquote>
<p><a href="https://github.com/wartremover/wartremover/issues/116#issuecomment-51280344">Mark Hibberd on focussing on correct programs</a>:</p>
<blockquote>
<p>But the most troublesome part of this thread, is that almost all of the discussion is about what developers find “convenient” and aesthetically pleasing, when we should be asking how a language feature adds or removes from our ability to build robust, correct programs - and, as quickly as possible. When held in this light, default arguments do not hold up. They are a mere syntactic convenience - that does not help us with this goal. This might be ok, if they didn’t come with risk or issues, but even the gentler arguments in this thread should be enough to highlight their use in a linting tool - especially given their inherent lack of motivation to begin with.</p>
</blockquote>
<blockquote>
<p>But yeh. Everyone gets to live in their own teams codebases. I just prefer mine without these undue risks.</p>
</blockquote>
<p>So in summary:</p>
<ol style="list-style-type: decimal">
<li>Don’t use DPV in production code. This could lead to bugs that are hard to find</li>
<li>Possibly use DPV in non-production code like such as test DSLs</li>
<li>If DPV helps to reduce the number of methods or the complexity of your solution, consider using it but be aware of the consequences. Alternatively redesign your code so it does not require DPV.</li>
</ol>]]></description>
    <pubDate>Wed, 01 May 2019 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2019-05-01-why-are-default-parameter-values-considered-bad-in-scala.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>What is SBT Doing?</title>
    <link>http://blog.ssanj.net/posts/2019-04-10-what-is-sbt-doing.html</link>
    <description><![CDATA[<p>Sometimes when you start up SBT and run a command, it sits there doing nothing for a long while. Wouldn’t it be nice to see what’s going or where it’s spending all its time?</p>
<p>It turns out you can. Simply start SBT in debug mode:</p>
<pre class="command scrollx"><code>sbt --debug</code></pre>
<p>Then rerun your command and watch all the information fly by about what SBT is up to.</p>]]></description>
    <pubDate>Wed, 10 Apr 2019 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2019-04-10-what-is-sbt-doing.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Xiaomi Mi A1 Hotspot Fix on Telstra</title>
    <link>http://blog.ssanj.net/posts/2018-10-30-xiaomi-mi-a1-hotspot-fix.html</link>
    <description><![CDATA[<div class="figure">
<img src="https://i01.appmifile.com/webfile/globalimg/zh/goods/mi_a1/kind-red.jpg" alt="xma" />
<p class="caption">xma</p>
</div>
<p>I’m really enjoying having moved to the <a href="https://www.mi.com/in/mi-a1">Xiaomi Mi A1</a> from my iPhone 6. For $A250 that’s an absolute steal. One issue that has plague this phone is that the hotspot does not work as advertised. This has been an issue until recently when I stumbled across a fix that worked for me:</p>
<ol style="list-style-type: decimal">
<li><p>Got to <em>Settings</em> &gt; <em>Network &amp; Internet</em> &gt; <em>Mobile Network</em> &gt; <em>Advanced</em> &gt; <em>Access Point Names</em> &gt; <em>Telstra Internet</em></p></li>
<li><p>Change <strong>APN</strong> Type from:</p></li>
</ol>
<pre class="terminal scrollx"><code>default, supl</code></pre>
<p>to</p>
<pre class="terminal scrollx"><code>default,supl,dun</code></pre>
<p>And that should be about it. Happy hotspotting! :)</p>]]></description>
    <pubDate>Tue, 30 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-10-30-xiaomi-mi-a1-hotspot-fix.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Rebasing with Git Pull by Default</title>
    <link>http://blog.ssanj.net/posts/2018-10-30-rebasing-with-git-pull-by-default.html</link>
    <description><![CDATA[<p>Sometimes when pulling changes from a remote repository you are left with a somewhat ugly merge. This leaves you wishing you had rebased instead. Wouldn’t it be nice if you could rebase everytime you <code>git pull</code> automatically? And now you can with another simple configuration option:</p>
<pre class="command scrollx"><code>git config --global --bool pull.rebase true</code></pre>]]></description>
    <pubDate>Tue, 30 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-10-30-rebasing-with-git-pull-by-default.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Push Git Tags with Commit</title>
    <link>http://blog.ssanj.net/posts/2018-10-30-how-to-push-git-tags-with-commit.html</link>
    <description><![CDATA[<p>When pushing code that has some tags to a remote repository, you need to first push the commits with:</p>
<pre class="command scrollx"><code>git push</code></pre>
<p>and then follow with:</p>
<pre class="command scrollx"><code>git push --tags</code></pre>
<p>Wouldn’t it be nice if you could push the commits and tags in one go? Well now you can by setting one simple config option:</p>
<pre class="command scrollx"><code>git config --global push.followTags true</code></pre>
<p>From the git documentation:</p>
<blockquote>
<p>push.followTags If set to true enable –follow-tags option by default. You may override this configuration at time of push by specifying –no-follow-tags.</p>
</blockquote>
<blockquote>
<p>–follow-tags Push all the refs that would be pushed without this option, and also push annotated tags in refs/tags that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed.</p>
</blockquote>
<p>References:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3745135/push-git-commits-tags-simultaneously">Push git commits &amp; tags simultaneously</a>,</li>
<li><a href="https://git-scm.com/docs/git-config/2.4.1">git-conig</a></li>
</ul>]]></description>
    <pubDate>Tue, 30 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-10-30-how-to-push-git-tags-with-commit.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Show Git Commit Hash for Tags</title>
    <link>http://blog.ssanj.net/posts/2018-10-17-how-to-show-git-commit-hash-for-tags.html</link>
    <description><![CDATA[<p>To list the commit hash for every tag in a repo use:</p>
<pre class="command scrollx"><code>git show-ref --tags</code></pre>
<p>which yields something like:</p>
<pre class="terminal scrollx"><code>ee02aa7363f9988af700ab136a219c455cab4b5f refs/tags/v.0.4.0
2d5befba5bc80a69c6308d2a5da965488e6bf9d7 refs/tags/v.0.4.1
0099c11405a3ace8ee14b0881f9677bfc1e30f5e refs/tags/v0.4.1</code></pre>
<p>To only list the commit hash for a particular tag use:</p>
<pre class="command scrollx"><code>git show-ref tag_name</code></pre>
<p>for example, to list the commit hash for v0.4.1 use:</p>
<pre class="command scrollx"><code>git show-ref v0.4.1</code></pre>
<p>which gives you a single hash:</p>
<pre class="terminal scrollx"><code>0099c11405a3ace8ee14b0881f9677bfc1e30f5e refs/tags/v0.4.1</code></pre>
<p>To display the contents of a hash use:</p>
<pre class="command scrollx"><code>git show hash</code></pre>]]></description>
    <pubDate>Wed, 17 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-10-17-how-to-show-git-commit-hash-for-tags.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Defining a multiline function in Haskell using Ghci</title>
    <link>http://blog.ssanj.net/posts/2018-08-09-defining-a-multiline-function-in-haskell-using-ghci.html</link>
    <description><![CDATA[<p>I’ve always found it difficult to remember the exact syntax for setting Ghci into multiline mode and defining a function therein. Below are the steps for easy access.</p>
<p>Start by setting Ghci into multiline mode with:</p>
<pre class="command scrollx"><code>:set +m</code></pre>
<p>You can start a multiline block with <code>:{</code> and end it with <code>:}</code>.</p>
<p>Function definitions must be preceded with <code>let</code>. This has tripped me up many times.</p>
<p>For example, to define a function that pauses for a given delay before printing out “done”:</p>
<div class="sourceCode"><pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="fu">:</span>{
  <span class="kw">let</span><span class="ot"> printAfter ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
      printAfter delay <span class="fu">=</span>
        <span class="kw">do</span> putStrLn <span class="fu">$</span> (\d <span class="ot">-&gt;</span> <span class="st">&quot;waiting for &quot;</span> <span class="fu">++</span> d <span class="fu">++</span> <span class="st">&quot; microseconds&quot;</span>) <span class="fu">$</span> show delay
           threadDelay delay
           putStrLn <span class="st">&quot;done&quot;</span>
<span class="fu">:</span>}</code></pre></div>
<p>To unset multiline mode use:</p>
<pre class="command scrollx"><code>:unset +m</code></pre>
<p>References: <a href="https://stackoverflow.com/questions/8443035/multi-line-commands-in-ghci">Multi-line commands in GHCi</a>, <a href="https://stackoverflow.com/questions/2846050/how-to-define-a-function-in-ghci-across-multiple-lines">How to define a function in ghci across multiple lines?</a></p>]]></description>
    <pubDate>Thu, 09 Aug 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-08-09-defining-a-multiline-function-in-haskell-using-ghci.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Loading a Package into GHCi through Stack</title>
    <link>http://blog.ssanj.net/posts/2018-04-10-loading-a-package-into-ghci-through-stack.html</link>
    <description><![CDATA[<p>Ever wanted to play around with a particular set of packages in GHCi but didn’t want to setup a project? You’re in luck. With Stack you can now selectively load named packages and launch directly into GHCi. The incantation you need is:</p>
<pre class="terminal scrollx"><code>stack ghci --package [package-name1] --package [package-name2]</code></pre>
<p>For example to load the transformers package:</p>
<pre class="terminal scrollx"><code>stack ghci --package transformers</code></pre>
<p>And now we have transformers loaded in GHCi:</p>
<pre class="command scrollx"><code>*Main Lib&gt; import Control.Monad.
Control.Monad.Fail                 Control.Monad.Trans.Except
Control.Monad.Fix                  Control.Monad.Trans.Identity
Control.Monad.IO.Class             Control.Monad.Trans.List
Control.Monad.Instances            Control.Monad.Trans.Maybe
Control.Monad.ST                   Control.Monad.Trans.RWS
Control.Monad.ST.Lazy              Control.Monad.Trans.RWS.Lazy
Control.Monad.ST.Lazy.Safe         Control.Monad.Trans.RWS.Strict
Control.Monad.ST.Lazy.Unsafe       Control.Monad.Trans.Reader
Control.Monad.ST.Safe              Control.Monad.Trans.State
Control.Monad.ST.Strict            Control.Monad.Trans.State.Lazy
Control.Monad.ST.Unsafe            Control.Monad.Trans.State.Strict
Control.Monad.Signatures           Control.Monad.Trans.Writer
Control.Monad.Trans.Class          Control.Monad.Trans.Writer.Lazy
Control.Monad.Trans.Cont           Control.Monad.Trans.Writer.Strict
Control.Monad.Trans.Error          Control.Monad.Zip
*Main Lib&gt; import Control.Monad.Trans.Writer.Lazy</code></pre>
<p><a href="https://stackoverflow.com/questions/39848576/load-a-new-package-in-ghci-using-stack#39848577">Reference</a></p>]]></description>
    <pubDate>Tue, 10 Apr 2018 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2018-04-10-loading-a-package-into-ghci-through-stack.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>BabylonCandle</title>
        <link>http://sanjivsahayam.com</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://sanjivsahayam.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 18 Sep 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>Spend your Time Better</title>
    <link>http://sanjivsahayam.com/posts/2014-09-18-spend-your-time-better.html</link>
    <description><![CDATA[<p>Sometimes as developers, when we see a problem, we immediately think up a technical solution. We get all excited. We are eager to start coding. We dream about how marvelous it will be. I’ll use “this” technology or “that” methodology we think. It’s going to be great!</p>
<p>But most of the time there are easier and simpler ways to solve the problem.</p>
<p>Before you begin your task ask yourself “Is this the most valuable use of my time?”. If the answer is “No”, then go do something more valuable.</p>
<p>Some other good questions to ask yourself before starting any work:</p>
<p>“Why am I implementing this?”</p>
<p>“Is it necessary?”</p>
<p>“Is there an easier way to solve this?”</p>
<p>“How can I get the same results by not building this?”</p>
<p>In the end these questions might prevent you from building anything at all. This is a good thing as it gives you more time to work on things that are valuable.</p>]]></description>
    <pubDate>Thu, 18 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-18-spend-your-time-better.html</guid>
</item>
<item>
    <title>Define your Success Criteria First</title>
    <link>http://sanjivsahayam.com/posts/2014-09-18-define-your-success-criteria-first.html</link>
    <description><![CDATA[<p>Sometimes when we are developing something, we have a hazy idea of what “done” is. “It has to do this” or “It has to do that”. Once we complete our work it looks like “success”. But there’s no way to know for sure unless we defined our success criteria before we started work. It’s easy to get lost in <a href="http://techcrunch.com/2011/07/30/vanity-metrics/">vanity metrics</a>.</p>
<p>Once you know what your real goals are, they are much easier to hit.</p>]]></description>
    <pubDate>Thu, 18 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-18-define-your-success-criteria-first.html</guid>
</item>
<item>
    <title>The Simplest thing that Works</title>
    <link>http://sanjivsahayam.com/posts/2014-09-14-the-simplest-thing-that-works.html</link>
    <description><![CDATA[<p>When faced with a complex task it can be easy to get overwhelmed. This can lead to “analysis-paralysis” where your mind is constantly trying to figure out every possible outcome or variation. It can often be easier to focus on one detail and get that working as simply as possible. Maybe you only implement the “happy path”. Maybe you only implement the path that fails. Either way pick the easiest solution to implement first. Get that working. Then build on your success and tackle the next part.</p>]]></description>
    <pubDate>Sun, 14 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-14-the-simplest-thing-that-works.html</guid>
</item>
<item>
    <title>Join a Support Group</title>
    <link>http://sanjivsahayam.com/posts/2014-09-14-join-a-support-group.html</link>
    <description><![CDATA[<p>Are you struggling at learning something hard? Have you thought about joining or creating a support group?</p>
<p>Being around other beginners is a great way to learn by osmosis.</p>
<p>Meetup is a great place to find a group for almost anything you can think of. But your workplace, mailing lists etc are also some other places to look for groups. If you can’t find a group consider starting one of your own.</p>]]></description>
    <pubDate>Sun, 14 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-14-join-a-support-group.html</guid>
</item>
<item>
    <title>Escaping Cabal Hell</title>
    <link>http://sanjivsahayam.com/posts/2014-09-14-escaping-cabal-hell.html</link>
    <description><![CDATA[<p>Cabal. What a nightmare. Right? That was the view I had on it until recently. I had just upgraded to GCH 7.8.3 and almost none of my projects built with Cabal anymore. Hell. So I decided it was time to learn to use Cabal properly. In my research I came across the extremely useful <a href="http://www.haskell.org/haskellwiki/Cabal/Survival">Cabal Survival Guide</a> which had many great pointers. So have a read of it if your Cabal project fails to build.</p>
<p><a href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html">Cabal Sandboxes</a> are also a great way to isolate your project’s dependencies from the rest of your system and drastically reduce the number of dependency issues you will have with Cabal.</p>
<p>And if you havn’t read it, have a read of the <a href="http://www.haskell.org/cabal/users-guide/">Cabal User Guide</a> to understand how things work. Read the User Manual? Are you crazy?</p>
<p>Some other unusual errors have missing header files (.h). I came across one of these <a href="http://blog.ssanj.net/posts/2014-09-08-cabal-fails-to-install-pcre-light.html">errors</a> and the solution was to install the necessary library on the OS. So basically any Haskell wrappers around OS libraries would (obviously) need the correct versions of the library installed.</p>
<p>Hopefully a basic understanding of Cabal usage plus some solutions to common problems will lead you to Cabal heaven. Too soon? ;)</p>]]></description>
    <pubDate>Sun, 14 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-14-escaping-cabal-hell.html</guid>
</item>
<item>
    <title>Do less. Achieve More.</title>
    <link>http://sanjivsahayam.com/posts/2014-09-14-do-less-achieve-more.html</link>
    <description><![CDATA[<p>We are constantly bombarded with messages from multiple sources in our daily lives. Social media is the main culprit these days. I used to spend a lot of time on Facebook. I gave that up about 6 years ago and headed for Twitter. I never looked back and never missed it. More recently after 6 years on Twitter, I’ve decided to give abstaining from it a go.</p>
<p>After only a few weeks, the results have been surprising. I have not missed writing or reading tweets at all! My mind feels much clearer as it is not jam-packed full of the latest news, trends and what other people are up to. This gives me much more free time to actually work on the things I love. I am more mindful of the present moment. This also opens the door for you to spend time with people you want to in real life as opposed online.</p>
<p>If you feel that your life is overly busy, try giving up social media for a limited time and see what effect it has on your life.</p>]]></description>
    <pubDate>Sun, 14 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-14-do-less-achieve-more.html</guid>
</item>
<item>
    <title>Cabal Fails to Install PCRE-Light on Macosx</title>
    <link>http://sanjivsahayam.com/posts/2014-09-08-cabal-fails-to-install-pcre-light.html</link>
    <description><![CDATA[<p>When trying to install <a href="http://hackage.haskell.org/package/mysql-simple-0.2.1.1">mysql-simple</a> on GHC 7.8.3 with cabal 1.18.1.4 on Mac OSX 10.9.4, the <a href="https://hackage.haskell.org/package/pcre-light">pcre-light</a> dependency failed with the following error:</p>
<pre><code>Base.hsc:103:10: fatal error: &#39;pcre.h&#39; file not found</code></pre>
<p>After googling around for a bit I came across this thread on <a href="https://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory/22559967">Stackoverflow</a> which had the same missing header file error, but which had nothing to do with Haskell. So from the sounds of things I just needed to install the PCRE library on my Mac.</p>
<p>I installed PCRE on MacOSX with:</p>
<pre><code>brew install pcre</code></pre>
<p>After which <code>cabal install --only-dependencies</code> completed successfully. Yay! :)</p>]]></description>
    <pubDate>Mon, 08 Sep 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-09-08-cabal-fails-to-install-pcre-light.html</guid>
</item>
<item>
    <title>Boosting liftA2</title>
    <link>http://sanjivsahayam.com/posts/2014-08-10-boosting-liftA2.html</link>
    <description><![CDATA[<p>While reading <a href="https://github.com/kqr/gists/blob/master/articles/gentle-introduction-monad-transformers.md"><em>The Gentle Introduction to Monad Transformers</em></a> I came across an interesting use of <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Control-Applicative.html#v:liftA2"><strong>liftA2</strong></a>. To refresh our memories, <strong>liftA2</strong> is defined as:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">liftA2 ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f c </code></pre>
<p>It basically lifts a binary function, let’s call it <strong>g</strong>, across two Applicative Functors (<strong>f a</strong> and <strong>f b</strong>) that each have one of the parameters <strong>g</strong> requires (<strong>a</strong> and <strong>b</strong> respectively). It then produces the result of applying <strong>g</strong>(<em>a</em> <em>b</em>) in a third Applicative Functor (<strong>f c</strong>).</p>
<p>So a simple example would be something like:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">liftA2 (<span class="fu">+</span>) (<span class="dt">Just</span> <span class="dv">5</span>) (<span class="dt">Just</span> <span class="dv">6</span>) <span class="fu">=</span> <span class="dt">Just</span> <span class="dv">11</span> </code></pre>
<p>All very easy so far.</p>
<p>What does liftA2 (&lt;*&gt;) do?</p>
<p>Before we answer that question, let’s explore the <a href="http://hackage.haskell.org/package/base-4.7.0.1/docs/Control-Applicative.html#v:-60--42--62-">&lt;*&gt;</a> operator.</p>
<p>The starship operator (as I like to call it) from Applicative is defined like this:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="fu">&lt;*&gt;</span><span class="ot"> ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> f (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b </code></pre>
<p>The starship operator takes a unary function, let’s call it <strong>h</strong>, that’s within a Applicative Functor (<strong>f (</strong> <em>a -&gt; b</em> <strong>)</strong>) and applies it to a value (<strong>a</strong>) also in an Applicative Functor (<strong>f a</strong>). It then returns the result of function application (<strong>h</strong> <em>a</em>) in another Applicative Functor (<strong>f b</strong>).</p>
<p>A simple example of its use would be something like:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">(<span class="dt">Just</span> (<span class="fu">+</span><span class="dv">5</span>)) <span class="fu">&lt;*&gt;</span> (<span class="dt">Just</span> <span class="dv">6</span>) <span class="fu">=</span> <span class="dt">Just</span> <span class="dv">11</span> </code></pre>
<p>Again very simple.</p>
<p>So <strong>liftA2</strong> <em>lifts</em> a binary function into two Applicative Functors to get its result. The <strong>starship</strong> operator applies a function that requires one value within an Applicative Functor into another Applicative context that has the value it needs.</p>
<p>So back to our question: What does liftA2 (&lt;*&gt;) do?</p>
<p>We can see from the above that <strong>liftA2</strong> works on Applicative Functors and the <strong>starship</strong> operator also works on Applicative Functors. It might be useful when we have nested Applicative Functors.</p>
<p>Wait … what?</p>
<p>Continuing with our example, say we had this:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="kw">let</span> v1 <span class="fu">=</span> <span class="dt">IO</span> (<span class="dt">Just</span> (<span class="fu">+</span><span class="dv">5</span>))
<span class="kw">let</span> v2 <span class="fu">=</span> <span class="dt">IO</span> (<span class="dt">Just</span> <span class="dv">6</span>)</code></pre>
<p>How could we apply the nested +5 function to the nested 6 value to retrieve our result of 11?</p>
<p>With the power of <strong>listA2</strong> boosted with <strong>starship</strong> power we could do:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell">liftA2 (<span class="fu">&lt;*&gt;</span>) v1 v2 <span class="fu">=</span> <span class="dt">IO</span> (<span class="dt">Just</span> <span class="dv">11</span>)</code></pre>
<p>That seemed really easy. :)</p>
<p>And now for a <strong>boxes and circles</strong> diagram:</p>
<div class="figure">
<img src="/images/liftA2_with_starship.png" title="liftA2 with starship" alt="diagram" /><p class="caption">diagram</p>
</div>
<p>Using liftA2 (&lt;*&gt;) we can simply apply functions within nested Applicatives to values also within nested Applicatives.</p>]]></description>
    <pubDate>Sun, 10 Aug 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-08-10-boosting-liftA2.html</guid>
</item>
<item>
    <title>Pretotype it</title>
    <link>http://sanjivsahayam.com/posts/2014-08-03-pretotype-it.html</link>
    <description><![CDATA[<p>A <a href="https://twitter.com/danofhisword">coworker</a> introduced me to the idea of <a href="http://www.pretotyping.org">Pretotyping</a>. Although Pretotyping sounds like “Prototyping” it’s quite different. Pretotyping is where you test out your ideas and theories for a product or service in the cheapest and quickest way possible. As the name of one of the pretotyping book’s state:</p>
<blockquote>
<p>“Building the right <strong>it</strong> before you build <strong>it</strong> right”.</p>
</blockquote>
<p>The Pretotyping manifesto brings together some simple, yet powerful ideas which encourage pretotyping and innovation in general. I found the manifesto to be a little muddled and and I found it easier to separate it into these two groups:</p>
<h1 id="preferred-ideas">Preferred Ideas</h1>
<p><strong>Innovators</strong> beat ideas</p>
<p><strong>Pretotypes</strong> beat productypes</p>
<p><strong>Building</strong> beats talking</p>
<p><strong>Simplicity</strong> beats features</p>
<p><strong>Now</strong> beats later</p>
<p><strong>Commitment</strong> beats committees</p>
<p><strong>Data</strong> beats opinions</p>
<h1 id="uncommon-sense">Uncommon Sense</h1>
<p><em>Don’t finish what you started</em></p>
<p><em>Failure is an option</em></p>
<p><em>Scarcity brings clarity</em></p>
<p><em>The more the messier</em></p>
<p><em>Reinvent the wheel</em></p>
<p><em>Play with fire</em></p>
<p>Here are some free books to you get started:</p>
<ol style="list-style-type: decimal">
<li><a href="http://www.pretotyping.org/uploads/1/4/0/9/14099067/pretotype_it_2nd_pretotype_edition-2.pdf">Pretotype It</a></li>
<li><a href="https://docs.google.com/file/d/0B0QztbuDlKs_bHdnQ2h5dnNvcE0/edit">Pretotyping @ Work</a></li>
</ol>
<p>Some of these ideas can help you to innovate. Others can help you think differently about what you build, whether you need to build it and if so, how to build it right.</p>]]></description>
    <pubDate>Sun, 03 Aug 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-08-03-pretotype-it.html</guid>
</item>
<item>
    <title>Trying to Wrap a Function with a Datatype</title>
    <link>http://sanjivsahayam.com/posts/2014-06-07-trying-to-wrap-a-function-with-a-datatype.html</link>
    <description><![CDATA[<p>While using the <a href="http://jaspervdj.be/hakyll">Hakyll</a> framework, I came across a function with the following definition:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">renderTagCloudWith ::</span> (<span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span>
                       <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span>)
                       <span class="co">-- ^ Render a single tag link</span>
                       <span class="ot">-&gt;</span> ([<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">String</span>)
                       <span class="co">-- ^ Concatenate links</span>
                       <span class="ot">-&gt;</span> <span class="dt">Double</span>
                       <span class="co">-- ^ Smallest font size, in percent</span>
                       <span class="ot">-&gt;</span> <span class="dt">Double</span>
                       <span class="co">-- ^ Biggest font size, in percent</span>
                       <span class="ot">-&gt;</span> <span class="dt">Tags</span>
                       <span class="co">-- ^ Input tags</span>
                       <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span>
                       <span class="co">-- ^ Rendered cloud</span></code></pre>
<p>The first function, which I will refer to as <strong>renderSingleLink</strong>, had 7 types:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span>)</code></pre>
<p>I wasn’t sure what each input value represented. After some trial and error I figured out what each of the values where. The input values and output are explained below:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span><span class="fu">.</span> <span class="dt">Double</span>  <span class="ot">-&gt;</span> <span class="co">-- Minimum font size as a %</span>
<span class="dv">2</span><span class="fu">.</span> <span class="dt">Double</span>  <span class="ot">-&gt;</span> <span class="co">-- Maximum font size as a %</span>
<span class="dv">3</span><span class="fu">.</span> <span class="dt">String</span>  <span class="ot">-&gt;</span> <span class="co">-- The tag label</span>
<span class="dv">4</span><span class="fu">.</span> <span class="dt">String</span>  <span class="ot">-&gt;</span> <span class="co">-- The tag url</span>
<span class="dv">5</span><span class="fu">.</span> <span class="dt">Int</span>     <span class="ot">-&gt;</span> <span class="co">-- The maximum use of the current tag</span>
<span class="dv">6</span><span class="fu">.</span> <span class="dt">Int</span>     <span class="ot">-&gt;</span> <span class="co">-- The minimum use of the current tag</span>
<span class="dv">7</span><span class="fu">.</span> <span class="dt">Int</span>     <span class="ot">-&gt;</span> <span class="co">-- The maximum use of any tag in the system</span>
<span class="dv">8</span><span class="fu">.</span> <span class="dt">String</span>  <span class="ot">-&gt;</span> <span class="co">-- The html representation of the tag (output)</span></code></pre>
<p>I would have preferred a datatype to encapsulate these values instead of a function with 7 parameters. I was fairly sure I wouldn’t remember what each value meant were I to revisit this code a month from now. Also the first two parameters (Double, Double), were in min-max order. The fifth and sixth parameters (Int, Int), were in max-min order. I felt this lead to unnecessary confusion. As I was using Haskell I assumed this would be quite easy to encapsulate in a datatype.</p>
<p>My first attempt was to create a simple datatype called <strong>TagInfo</strong> :</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">TagInfo</span> <span class="fu">=</span> <span class="dt">TagInfo</span> {
<span class="ot">                    fontMin ::</span> <span class="dt">Double</span>,
<span class="ot">                    fontMax ::</span> <span class="dt">Double</span>,
<span class="ot">                    tagName ::</span> <span class="dt">String</span>,
<span class="ot">                    tagUrl  ::</span> <span class="dt">String</span>,
<span class="ot">                    tagMax  ::</span> <span class="dt">Int</span>,
<span class="ot">                    tagMin  ::</span> <span class="dt">Int</span>,                    
<span class="ot">                    maxUseCount ::</span> <span class="dt">Int</span>
               }</code></pre>
<p>I ordered the parameters to match the order of the <strong>renderSingleLink</strong>. I thought that I could easily compose the data constructor of <strong>TagInfo</strong> with a function that provided a String-representation of <strong>TagInfo</strong> to derive a function that could be supplied to <strong>renderTagCloudWith</strong> :</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">showTag ::</span> <span class="dt">TagInfo</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre>
<p>So basically I wanted to do something like this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">showTag <span class="fu">.</span> <span class="dt">TagInfo</span></code></pre>
<p>and pass that composed function to <strong>renderTagCloudWith</strong>. Unfortunately that does not work. Composing a function that requires one parameter with a function that returns 6 paramaters makes the compiler unhappy!</p>
<p>To clarify, compose (.) is defined as:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</code></pre>
<p>The constructor of <strong>TagInfo</strong> is defined as:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="dt">TagInfo</span><span class="ot"> ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">TagInfo</span></code></pre>
<p>the type of <strong>showTag</strong> is:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">showTag ::</span> <span class="dt">TagInfo</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre>
<p>So composing <strong>showTag</strong> with <strong>TagInfo</strong> gives us:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"> showTag   <span class="fu">.</span>  <span class="dt">TagInfo</span>

<span class="dt">Couldn&#39;t</span> match <span class="kw">type</span> <span class="ot">`Double</span>
<span class="ot">                     -&gt; String -&gt; String -&gt; Int -&gt; Int -&gt; Int -&gt; TagInfo&#39;</span>
<span class="ot">              with `</span><span class="dt">TagInfo&#39;</span>
<span class="dt">Expected</span> <span class="kw">type</span><span class="fu">:</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">TagInfo</span>
  <span class="dt">Actual</span> <span class="kw">type</span><span class="fu">:</span> <span class="dt">Double</span>
               <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">TagInfo</span>
<span class="dt">In</span> the second argument <span class="kw">of</span> <span class="ot">`(.)&#39;, namely `</span><span class="dt">TagInfo&#39;</span>
<span class="dt">In</span> the expression<span class="fu">:</span> showTag <span class="fu">.</span> <span class="dt">TagInfo</span></code></pre>
<p>Unfortunately that didn’t work. It seemed so neat to be able to use the <strong>TagInfo</strong> constructor with <strong>showTag</strong> to give back the <strong>renderSingleLink</strong> definition to <strong>renderTagCloudWith</strong>.</p>
<p>This got me thinking about Scala’s <a href="https://github.com/scala/scala/blob/v2.11.1/src/library/scala/Function1.scala">andThen</a> function which is the opposite of compose:</p>
<pre class="sourceCode scala"><code class="sourceCode scala"><span class="kw">trait</span> Function1[-T1, +R] <span class="kw">extends</span> AnyRef { self =&gt;
  ...
  <span class="kw">def</span> andThen[A](g: R =&gt; A): T1 =&gt; A = { x =&gt; <span class="fu">g</span>(<span class="fu">apply</span>(x)) }
}  </code></pre>
<p>In Haskell that would be something like:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">andThen ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c
andThen f g x <span class="fu">=</span> g <span class="fu">$</span> f x</code></pre>
<p>What I needed was something that could recreate the 7 input parameters needed for the <strong>TagInfo</strong> constructor. As a first attempt I created <strong>andThen7</strong>:</p>
<pre class="sourceCode haskell scrollx"><code class="sourceCode haskell"><span class="ot">andThen7 ::</span> (a1 <span class="ot">-&gt;</span> a2 <span class="ot">-&gt;</span> a3 <span class="ot">-&gt;</span> a4 <span class="ot">-&gt;</span> a5 <span class="ot">-&gt;</span> a6 <span class="ot">-&gt;</span> a7 <span class="ot">-&gt;</span> a8) <span class="ot">-&gt;</span> (a8 <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a1 <span class="ot">-&gt;</span> a2 <span class="ot">-&gt;</span> a3 <span class="ot">-&gt;</span> a4 <span class="ot">-&gt;</span> a5 <span class="ot">-&gt;</span> a6 <span class="ot">-&gt;</span> a7 <span class="ot">-&gt;</span> b
andThen7 f g <span class="fu">=</span> \x1 x2 x3 x4 x5 x6 x7 <span class="ot">-&gt;</span> g <span class="fu">$</span> f x1 x2 x3 x4 x5 x6 x7</code></pre>
<p>Now I could do this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">:</span>t (<span class="dt">TagInfo</span> <span class="ot">`andThen7`</span> showTag)
(<span class="dt">TagInfo</span> <span class="ot">`andThen7`</span> showTag)
<span class="ot">  ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre>
<p>Now the type signature produced in the above matches that required by the <strong>renderSingleLink</strong> function to <strong>renderTagCloudWith</strong>.</p>
<p>This is obviously a pretty bad solution. I asked around for a better solution from guys in the <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group">BFPG</a> and <a href="https://twitter.com/markhibberd">Mark Hibberd</a> came up with <em>a nested compose</em> as a possible solution (1):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">((((((showTag <span class="fu">.</span>) <span class="fu">.</span>) <span class="fu">.</span> ) <span class="fu">.</span> ) <span class="fu">.</span> ) <span class="fu">.</span> ) <span class="fu">.</span> <span class="dt">TagInfo</span></code></pre>
<p>Another solution proposed by <a href="https://twitter.com/nkpart">Nick Patridge</a> was to use fmap (2):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap) showTag <span class="dt">TagInfo</span></code></pre>
<p>Solution (2) seems like a very nice solution. The type signature of composing <strong>fmap</strong> is pretty cool and seems to be built for mapping a function into a nested structure:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">:</span>t (fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap)
(fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap <span class="fu">.</span> fmap)
<span class="ot">  ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> f1, <span class="dt">Functor</span> f2, <span class="dt">Functor</span> f3, <span class="dt">Functor</span> f4,
      <span class="dt">Functor</span> f5, <span class="dt">Functor</span> f6) <span class="ot">=&gt;</span>
     (a <span class="ot">-&gt;</span> b)
     <span class="ot">-&gt;</span> f (f1 (f2 (f3 (f4 (f5 (f6 a))))))
     <span class="ot">-&gt;</span> f (f1 (f2 (f3 (f4 (f5 (f6 b))))))</code></pre>
<p>I wonder if there is still a better solution? Any thoughts or comments are welcome.</p>]]></description>
    <pubDate>Sat, 07 Jun 2014 00:00:00 UT</pubDate>
    <guid>http://sanjivsahayam.com/posts/2014-06-07-trying-to-wrap-a-function-with-a-datatype.html</guid>
</item>

    </channel> 
</rss>

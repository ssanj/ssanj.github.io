<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 06 Sep 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Seth Godin on The One Thing that will Change Everything.</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-the-one-thing-that-will-change-everything.html</link>
    <description><![CDATA[<p>Another great article sent to me by my friend <a href="http://ryandrake.com">Ryan</a> was this one by <a href="http://sethgodin.typepad.com/seths_blog/2015/08/the-one-thing-that-will-change-everything.html">Seth Godin on waiting for the one thing that will change everything</a>. In it Seth talks about that one thing:</p>
<blockquote>
<p>That introduction you need.</p>
</blockquote>
<blockquote>
<p>The capital that your organization is trying to raise.</p>
</blockquote>
<blockquote>
<p>The breakthrough in what you’re building…</p>
</blockquote>
<p>And the real effect that one thing has once you get it:</p>
<blockquote>
<p>Have you noticed that as soon as you get that one thing, everything doesn’t change? In fact, the only thing that changes is that you realize that you don’t need that one thing as much as you thought you did.</p>
</blockquote>
<p>He advises to stop waiting for a silver bullet:</p>
<blockquote>
<p>It turns out that nothing will change everything for the better. It works better to focus on each step instead of being distracted by a promised secret exit.</p>
</blockquote>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-the-one-thing-that-will-change-everything.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Seth Godin on Creating Something Remarkable</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-creating-something-remarkable.html</link>
    <description><![CDATA[<p>Seth Godin in his <a href="http://sethgodin.typepad.com/seths_blog/2015/06/pulling-a-hat-out-of-a-rabbit.html">article on pulling a hat out of a rabbit</a> says that:</p>
<blockquote>
<p>It’s tempting to do what’s been done before, certain in the belief that if you do it, it’ll be a little better and a little more popular, merely because you’re the one doing it.</p>
</blockquote>
<blockquote>
<p>In fact, though, that’s unlikely. You’ll care more, but it’s unlikely the market will.</p>
</blockquote>
<p>Consider doing it differently:</p>
<blockquote>
<p>Consider the alternative, which is choosing to turn the question upside down, to do it backwards, sideways, or in a significantly more generous or risky way.</p>
</blockquote>
<blockquote>
<p>Remarkable often starts with the problem you set out to solve and the way you choose to solve it.</p>
</blockquote>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-creating-something-remarkable.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Seth Godin on Averages</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-averages.html</link>
    <description><![CDATA[<p>My friend <a href="http://ryandrake.com">Ryan</a> sent me an <a href="http://sethgodin.typepad.com/seths_blog/2015/08/the-average.html">interesting post by Seth Godin</a> which states:</p>
<blockquote>
<p>Everything you do is either going to raise your average or lower it.</p>
</blockquote>
<p>Every choice makes you better or worse:</p>
<blockquote>
<p>Progress is almost always a series of choices, an inexorable move toward mediocrity, or its opposite.</p>
</blockquote>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-seth-godin-on-averages.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Robin Sharma on The Methods for Superhuman Productivity</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-robin-sharma-on-the-methods-for-superhuman-productivity.html</link>
    <description><![CDATA[<p>My friend <a href="http://ryandrake.com">Ryan</a> can’t stop sending me cool articles to read! Thanks Ryan! :) In this one <a href="https://blog.growth.supply/the-methods-for-superhuman-productivity-de4452af7cfb">Robin Sharma talks about how to achived Superhuman productivity</a>. Robin says that:</p>
<blockquote>
<p>We live in The Age of Dramatic Distraction. Many shiny toys to chase every waking moment yet so few of those pursuits create real value and grow a life brilliantly lived.</p>
</blockquote>
<blockquote>
<p>Too many of us are overscheduled, overconnected and overstimulated by all the noise, interruptions and complexity of current society.</p>
</blockquote>
<blockquote>
<p>The cost of this way of operating? You’ll arrive at the last hour of your final day and realize you spent your highest potential on your lowest leverage activities.</p>
</blockquote>
<p>The 20/20/20 formula:</p>
<blockquote>
<p>The way you start your day powerfully shapes how productively you live it. Reserve the first 60 minutes for personal preparation.</p>
</blockquote>
<p>Start your day with some exercise:</p>
<blockquote>
<p>As the Spartan warriors said: “Sweat more in training and you’ll bleed less at war.” Spend your first 20 minutes in intense exercise. Sweating releases BDNF, a brain chemical that actually grows neural connections. Working out also releases dopamine (the neurotransmitter of motivation) and serotonin, which makes you feel happy.</p>
</blockquote>
<p>Next review your annual plan:</p>
<blockquote>
<p>For the next “20 minute pocket”, review your annual plan and reflect deeply on your quarterly goals. Clarity precedes mastery and this practice will deepen your focus through the day.</p>
</blockquote>
<p>Next inspire yourself:</p>
<blockquote>
<p>Invest the final 20 minutes of this morning routine on learning (i.e., read autobiographies of great humans or listen to a leadership podcast or download the lessons of yesterday into &gt; your journal).</p>
</blockquote>
<p>Learn how to recover effectively:</p>
<blockquote>
<p>Good research confirms that what makes the best athletes the best in the world was not what they did in their sport but how effectively they recovered. For example, it was the rituals that star tennis players did in between points that made them stars. What made the Russian weightlifters so undefeatable was their “work-rest ratios”</p>
</blockquote>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-robin-sharma-on-the-methods-for-superhuman-productivity.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Not finished or Full of Bugs?</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-not-finished-or-full-of-bugs.html</link>
    <description><![CDATA[<p>I was recently asked:</p>
<blockquote>
<p>Is it “not finished” or “full of bugs”?</p>
</blockquote>
<p>Not finishing something implies that the system does not do what you want it to - yet. It’s part way there.</p>
<p>Having lots of bugs implies there is a mismatch between what a system should do and what it does.</p>
<p>They sound about the same to me.</p>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-not-finished-or-full-of-bugs.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Context Switching is Costly</title>
    <link>http://blog.ssanj.net/posts/2015-09-06-context-switching-is-costly.html</link>
    <description><![CDATA[<p>Multitasking. It’s almost an expected way to work these days. There have been many <a href="http://www.petrikainulainen.net/software-development/processes/the-cost-of-context-switching">articles</a> <a href="http://blog.codinghorror.com/the-multi-tasking-myth">written</a> on this subject and its <a href="http://sirupsen.com/multitasking-makes-you-dumb">fallacies</a>. There’s also some interesting <a href="https://signalvnoise.com/posts/3401-multitasking?24#comments">commentary</a> on it. <a href="http://www.multitaskingtest.net.au/the-science/impacts-of-multi-tasking">A scientific study found some interesting results on multitasking</a>:</p>
<blockquote>
<p>His study found the average worker’s functioning IQ, a temporary qualitative state, drops 10 points when multitasking. That is more than double the four-point drop that occurs when someone smokes marijuana.</p>
</blockquote>
<p>Context switching is the process by which you leave an existing train of thought when working on task and take on a completely different train of thought when you start a different task. Multitasking begets context switching. The more tasks you do at once the more context switching you will have.</p>
<p><a href="http://www.joelonsoftware.com/articles/fog0000000022.html">Joel Spolsky writes</a>:</p>
<blockquote>
<p>As it turns out, if you give somebody two things to work on, you should be grateful if they “starve” one task and only work on one, because they’re going to get more stuff done and finish the average task sooner.</p>
</blockquote>
<p>He talks about good management being:</p>
<blockquote>
<p>Good managers see their responsibility as removing obstacles so that people can focus on one thing and really get it done. When emergencies come up, think about whether you can handle it yourself before you delegate it to a programmer who is deeply submersed in a project.</p>
</blockquote>
<p>So why is this important? What’s so bad about asking programmers to multitask and switch contexts frequently?</p>
<blockquote>
<p>The trick here is that when you manage programmers, specifically, task switches take a really, really, really long time. That’s because programming is the kind of task where you have to keep a lot of things in your head at once. The more things you remember at once, the more productive you are at programming. A programmer coding at full throttle is keeping zillions of things in their head at once: everything from names of variables, data structures, important APIs, the names of utility functions that they wrote and call a lot, even the name of the subdirectory where they store their source code. If you send that programmer to Crete for a three week vacation, they will forget it all. The human brain seems to move it out of short-term RAM and swaps it out onto a backup tape where it takes forever to retrieve.</p>
</blockquote>
<p>I can definitely identify with the “zillions of things in their head” statement. When we as programmers are solving an intricate problem we have a lot of “state” to maintain. When we context switch we loose all this state and have to start afresh on something. When we come back to our previous task we need to spend a while figuring out where we were up to. We have to remember all the important nuances of what we were working on. All the gotchas. All the things “we need to remember to do”.</p>
<p>Even with CPUs task switching has a cost:</p>
<blockquote>
<p>Actually, on real CPUs, a task switch takes a little bit of time… basically enough time to save out the state of the CPU registers and load the CPU registers for the other task.</p>
</blockquote>
<p>So here’s an idea: what if we “saved our state” on task before moving to our next interruption? We could do that by simply writing it down or adding it to <a href="https://www.atlassian.com/software/jira">Jira</a> or <a href="https://www.jetbrains.com/youtrack/">Youtrack</a> or simply having a list in <a href="http://www.sublimetext.com/">Sublime</a>.</p>
<p>In this way, just like a CPU, we would have a small context switching overhead, where we save our state. The benefit of this is that when we do come back to our task after completing our interruption, we have a cheatsheet on where we were up to and what was important to the problem at hand.</p>
<p>So when the next interruption comes your way, don’t just drop everything that you’re working on. Take the time to save your state. Make sure your manager/team leaders are aware of your new way of working. No matter how many times you are asked to switch priorities and work on different tasks, you can continue to work in a consistent and systematic way that benefits everyone.</p>]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-06-context-switching-is-costly.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Reveal the Current File in the Sidebar in Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-09-02-how-to-reveal-the-current-file-in-the-sidebar-in-sublime.html</link>
    <description><![CDATA[<p>A feature I often need when coding in Sublime is to reveal the current file in the sidebar.</p>
<div class="figure">
<img src="/images/sublime-reveal-in-sidebar.jpg" alt="Reveal in Sidebar" />
<p class="caption">Reveal in Sidebar</p>
</div>
<p>You can do this by right-clicking and choosing <strong>Reveal in Sidebar</strong> from the context menu.</p>
<div class="figure">
<img src="/images/sublime-reveal-in-sidebar-context-menu.jpg" alt="Context Menu" />
<p class="caption">Context Menu</p>
</div>
<p>What would be nicer would be to have a keyboard shortcut to do this very same thing.</p>
<p>Choose <strong>Sublime Text</strong> &gt; <strong>Preferences</strong> &gt; <strong>Key Bindings - User</strong> and add the following to map (SHIFT + F4) to reveal the current file in the sidebar:</p>
<pre class="command"><code>{ &quot;keys&quot;: [&quot;shift+f4&quot;], &quot;command&quot;: &quot;reveal_in_side_bar&quot; }</code></pre>]]></description>
    <pubDate>Wed, 02 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-02-how-to-reveal-the-current-file-in-the-sidebar-in-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Exclude Ctag Files from File Searches in Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-09-02-how-to-exclude-ctag-files-from-file-searches-in-sublime.html</link>
    <description><![CDATA[<p>If you’ve started using <a href="http://sanj.ink/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html">ctags to browse your scala sources</a>, one thing that you might find annoying is that when you do a file search, it also searches through your <strong>.ctags_srcs</strong> directory and your <strong>.tags</strong> files. Most of the time this is not what you want. So how do you go about excluding these directories and files from your search?</p>
<div class="figure">
<img src="/images/sublime-find-without-excludes.jpg" alt="Find without exclude" />
<p class="caption">Find without exclude</p>
</div>
<p>When doing a <strong>Find in Files…</strong> (CMD + SHIFT + F), you can exclude directories and files you don’t want with a minus sign in front of them in the <strong>Where</strong> box. Multiple clause are separated by commas.</p>
<p>To exclude a directory and all the files there in you need to also use a wildcard (*) following the directory.</p>
<p>For example to exclude all files in the .ctags_srcs directory use:</p>
<pre class="command"><code>-.ctags_srcs/*</code></pre>
<p>To exclude single files simply use its name. For example to exclude the .tags file use:</p>
<pre class="command"><code>-.tags</code></pre>
<p>Here’s a full list of excludes to exclude all ctag directories and files along with the target directory, the sublime-workplace file and any xml files:</p>
<pre class="command"><code>&lt;project&gt;, -.ctags_srcs/*, -.tags, -target/*, -*.sublime-workspace, -*.xml</code></pre>
<div class="figure">
<img src="/images/sublime-find-with-excludes.jpg" alt="Find with exclude" />
<p class="caption">Find with exclude</p>
</div>
<p>And that’s all there is to it.</p>]]></description>
    <pubDate>Wed, 02 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-09-02-how-to-exclude-ctag-files-from-file-searches-in-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Shortcut to Close All Open Windows in Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-08-23-shortcut-to-close-all-open-windows-in-sublime.html</link>
    <description><![CDATA[<p>Sublime has many options to close tabs such as closing the current tab or closing all tabs to the right or closing other tabs. What would be nice is to have an option to close all tabs.</p>
<p>This functionality already exists under <strong>File</strong> &gt; <strong>Close All Files</strong> but there is no shortcut for it.</p>
<p>Here’s how you add a shortcut to close all open files:</p>
<pre class="command"><code>{ &quot;keys&quot;: [&quot;shift+super+ctrl+w&quot;], &quot;command&quot;: &quot;close_all&quot; }</code></pre>
<p>Now you can close all open files with “shift+super+ctrl+w”.</p>]]></description>
    <pubDate>Sun, 23 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-23-shortcut-to-close-all-open-windows-in-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to Browse Scala Sources of your Dependencies from Sublime</title>
    <link>http://blog.ssanj.net/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html</link>
    <description><![CDATA[<p>A feature I desperately needed in Sublime <a href="http://sanj.ink/posts/2015-07-15-using-sublime-for-scala-development.html">since my migration from Intellij</a> was the ability to browse the sources of my project’s dependencies. Without this ability I was basically relegated to using the Scaladocs and Google/SO for all my information. Not good.</p>
<p>There is a way for you to do this in Sublime using <a href="http://ctags.sourceforge.net">Ctags</a>.</p>
<iframe id="movie1" src="https://player.vimeo.com/video/137045055" width="800" height="501" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>
<p>
<a href="https://vimeo.com/137045055">Browsing Scala dependency sources through Sublime and Ctags</a> from <a href="https://vimeo.com/user4351020">ssanj</a> on <a href="https://vimeo.com">Vimeo</a>.
</p>
<p>So what are Ctags?</p>
<blockquote>
<p>Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility.</p>
</blockquote>
<p>Cool. That sounds promising! Unfortunately <a href="http://ctags.sourceforge.net/languages.html">Scala is not one of the supported languages</a>.</p>
<p><a href="https://github.com/ceedubs/sbt-ctags">The sbt-ctags plugin</a> gives you this Scala support for Ctags through sbt.</p>
<blockquote>
<p>SBT ctags is an SBT plugin that will generate ctags for your Scala project.</p>
</blockquote>
<blockquote>
<p>It unzips the source jars for your project dependencies and generates ctags for these dependency sources in addition to the Scala/Java source of your project itself.</p>
</blockquote>
<blockquote>
<p>By default, the plugin assumes you have a ctags executable on your path that is syntax-compatible with Exuberant Ctags.</p>
</blockquote>
<p>In addition to downloading all the sources for your dependencies the sbt-ctags plugin also creates the .tags file that can be used by any Ctags-aware editor.</p>
<p>Fortunately Sublime has Ctags support through the <a href="https://packagecontrol.io/packages/CTags">Sublime Ctags plugin</a>.</p>
<p>Now we have all the pieces we need to get Ctags working with Scala and Sublime. Yay!</p>
<h1 id="installation">Installation</h1>
<ol style="list-style-type: decimal">
<li>Install Exuberant tags.</li>
</ol>
<p>On a Mac you can do it with brew:</p>
<pre class="command scrollx"><code>brew install ctags</code></pre>
<p>For additional OS installation options checkout the <a href="https://packagecontrol.io/packages/CTags">Sublime Ctags page</a> or the <a href="http://ctags.sourceforge.net">Exuberant Tags page</a>.</p>
<ol start="2" style="list-style-type: decimal">
<li>Install the SBT Ctags plugin globally.</li>
</ol>
<p>Ctags support is something we will need on every project. To do this we need to add it to the global plugins configurations so that it will be available across all our projects.</p>
<p>Add the <a href="https://github.com/ceedubs/sbt-ctags">sbt-ctags plugin</a> dependency to <strong>plugins.sbt</strong> located at <strong>~/.sbt/0.13/plugins</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala"><code class="sourceCode scala"><span class="fu">addSbtPlugin</span>(<span class="st">&quot;net.ceedubs&quot;</span> %% <span class="st">&quot;sbt-ctags&quot;</span> % <span class="st">&quot;0.1.0&quot;</span>)</code></pre></div>
<p>note: <em>you may need to create the above file if it doesn’t exist.</em></p>
<p>The sbt-ctags plugin downloads the sources for your project dependencies into <strong>target/sbt-ctags-dep-srcs</strong> by default. One problem with this is that every time you run an <code>sbt clean</code> your dependency source files are deleted. Not very useful.</p>
<p>Let’s fix it so that the dependency source files are not downloaded to the target directory. We want to do this globally so we have to create a global plugin.</p>
<p>Create the global plugin under <strong>~/.sbt/0.13/plugins</strong> in a file named <strong>CustomCtagsSrcDir.scala</strong> with the following contents:</p>
<div class="sourceCode"><pre class="sourceCode scala"><code class="sourceCode scala"><span class="kw">import</span> sbt.<span class="fu">_</span>
<span class="kw">import</span> Keys.<span class="fu">_</span>
<span class="kw">import</span> net.<span class="fu">ceedubs</span>.<span class="fu">sbtctags</span>.<span class="fu">CtagsKeys</span>.<span class="fu">_</span>

<span class="kw">object</span> CustomCtagsSrcDir <span class="kw">extends</span> Plugin {
  <span class="kw">override</span> <span class="kw">def</span> settings = Seq(
    dependencySrcUnzipDir := baseDirectory.<span class="fu">value</span> / <span class="st">&quot;.ctags_srcs&quot;</span>
  )
}</code></pre></div>
<p>In the above plugin the dependency sources are written to a directory named <strong>.ctags_srcs</strong> under your project’s root directory.</p>
<p>Now in any sbt project you can run the following to generate your ctags:</p>
<pre class="command scrollx"><code>sbt genCtags</code></pre>
<p>The above incantation will download all your project dependency sources to the <strong>.ctags_srcs</strong> directory and create a <strong>.tags</strong> file in the project root directory.</p>
<ol start="3" style="list-style-type: decimal">
<li>Create a Scala .tags configuration file to enable Ctags for Scala</li>
</ol>
<p><a href="https://github.com/ceedubs/sbt-ctags#user-content-configuring-ctags">Create a ~/.tags file</a> to configure Ctags to index Scala files:</p>
<pre class="command scrollx"><code>--langdef=scala
--langmap=scala:.scala
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\4/c,classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*object[ \t]+([a-zA-Z0-9_]+)/\4/c,objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case class[ \t]+([a-zA-Z0-9_]+)/\4/c,case classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case object[ \t]+([a-zA-Z0-9_]+)/\4/c,case objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*trait[ \t]+([a-zA-Z0-9_]+)/\4/t,traits/
--regex-scala=/^[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*def[ \t]+([a-zA-Z0-9_]+)/\3/m,methods/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*val[ \t]+([a-zA-Z0-9_]+)/\3/l,constants/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*var[ \t]+([a-zA-Z0-9_]+)/\3/l,variables/
--regex-scala=/^[ \t]*package[ \t]+([a-zA-Z0-9_.]+)/\1/p,packages/</code></pre>
<ol start="4" style="list-style-type: decimal">
<li>Install the Sublime Ctags Plugin</li>
</ol>
<p>You can install the Sublime Ctags plugin from <a href="https://packagecontrol.io/packages/CTags">Package Control</a> or manually from the <a href="https://github.com/SublimeText/CTags">repository</a>.</p>
<p>The Sublime Ctags plugin will use the <strong>.tags</strong> index file generated in your project root directory to lookup the symbols you need.</p>
<h1 id="usage">Usage</h1>
<ol style="list-style-type: decimal">
<li>On any new project or when you add a new dependency, run:</li>
</ol>
<pre class="command scrollx"><code>sbt genCtags</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>Within Sublime put your cursor on a method or member and choose “Goto Definition” from the context menu.</li>
</ol>
<div class="figure">
<img src="/images/sublime_go_to_definition_ctags.jpg" alt="Goto Definition" />
<p class="caption">Goto Definition</p>
</div>
<h1 id="customisation">Customisation</h1>
<p>To define a shortcut for the “Goto Definition” command add a binding to your user key bindings file.</p>
<p>Edit your user key bindings file by clicking on <strong>Sublime Text</strong> &gt; <strong>Preferences</strong> &gt; <strong>Key Bindings - User</strong> and add the following binding:</p>
<pre class="command scrollx"><code>{ &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;goto_definition&quot; }</code></pre>
<p>The above binding maps <strong>F4</strong> as the key to browse your sources. You can change this mapping to whatever you like.</p>]]></description>
    <pubDate>Sat, 22 Aug 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-08-22-how-to-browse-scala-sources-of-your-dependencies-from-sublime.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>

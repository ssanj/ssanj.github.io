<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>BabylonCandle</title>
        <link>http://blog.ssanj.net</link>
        <description><![CDATA[The blog of Sanjiv Sahayam]]></description>
        <atom:link href="http://blog.ssanj.net/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 27 Dec 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>2 Devs Podcast</title>
    <link>http://blog.ssanj.net/posts/2015-12-27-2-devs-podcast.html</link>
    <description><![CDATA[<p>My friend <a href="https://twitter.com/nippysaurus">Michael</a> and I recorded a few episodes of our podcast “2 Devs” a while back. We have yet to release any of the episodes but I thought I’d share one here. Enjoy.</p>
<iframe class="movie" width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/239284458&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true">
</iframe>]]></description>
    <pubDate>Sun, 27 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-27-2-devs-podcast.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Using Flyway with Play 2.4.x and Slick 3.x</title>
    <link>http://blog.ssanj.net/posts/2015-12-18-using-flyway-with-play-2_4-and-slick.html</link>
    <description><![CDATA[<p>Recently I wanted to use <a href="http://flywaydb.org">Flyway</a> to manage my database migrations for a Play 2.4 application using slick 3.x. Unfortunately as this stack is quite new, the <a href="https://github.com/tototoshi/play-flyway">play-flyway</a> plugin no longer works with Play 2.4.</p>
<p>Fortunately there is a module called <a href="https://github.com/flyway/flyway-play">flyway-play</a> which integrates Flyway into Play 2.4. Unfortunately there is no Slick 3.x support at present. But the good news is that there is a <a href="https://github.com/flyway/flyway-play/pull/18">PR that adds support for Slick 3.x</a>. The bad news is that this PR has been languishing unmerged since September 15 2015. So if you are desperately in need of this support, you might want to go ahead and patch it yourself locally and be done with it until it is merged.</p>
<p>Another alternative is to use the <a href="http://flywaydb.org/documentation/sbt">Flyway sbt plugin</a> to manage your migrations. It needs a few tweaks to get it to work with Slick 3.x so that you can reuse configurations from your <strong>application.conf</strong> file.</p>
<p><em>These steps are for sbt version 0.13.8. You may need to tweak them if you are using another version of SBT</em></p>
<p>Here are the steps required to get this working.</p>
<ol style="list-style-type: decimal">
<li>Add the Flyway resolver and plugin to your project/plugins.sbt file:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">resolvers += <span class="st">&quot;Flyway&quot;</span> at <span class="st">&quot;http://flywaydb.org/repo&quot;</span>

<span class="fu">addSbtPlugin</span>(<span class="st">&quot;org.flywaydb&quot;</span> % <span class="st">&quot;flyway-sbt&quot;</span> % <span class="st">&quot;3.2.1&quot;</span>)</code></pre></div>
<ol start="2" style="list-style-type: decimal">
<li>Create a flyway.sbt file in your project root to link up your application.conf database settings with Flyway:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> sbt.<span class="fu">_</span>
<span class="kw">import</span> com.<span class="fu">typesafe</span>.<span class="fu">config</span>.<span class="fu">ConfigFactory</span>

<span class="kw">lazy</span> <span class="kw">val</span> flywayDBName = <span class="st">&quot;YOUR_DB_NAME&quot;</span>

<span class="kw">lazy</span> <span class="kw">val</span> flywayDbConf = settingKey[(String, String, String)](<span class="st">&quot;Typesafe config file with slick settings&quot;</span>)

flywayDbConf := {
    <span class="kw">val</span> cfg = ConfigFactory.<span class="fu">parseFile</span>((resourceDirectory in Compile).<span class="fu">value</span> / <span class="st">&quot;application.conf&quot;</span>)
    <span class="kw">val</span> prefix = s<span class="st">&quot;slick.dbs.${flywayDBName}.db&quot;</span>
    (cfg.<span class="fu">getString</span>(s<span class="st">&quot;$prefix.url&quot;</span>), cfg.<span class="fu">getString</span>(s<span class="st">&quot;$prefix.user&quot;</span>), cfg.<span class="fu">getString</span>(s<span class="st">&quot;$prefix.password&quot;</span>))
}

flywaySettings

flywayUrl := flywayDbConf.<span class="fu">value</span>.<span class="fu">_1</span>
flywayUser := flywayDbConf.<span class="fu">value</span>.<span class="fu">_2</span>
flywayPassword := flywayDbConf.<span class="fu">value</span>.<span class="fu">_3</span></code></pre></div>
<p>And basically you are done! :) You should be able to run flywayMigrate in SBT and have it use all the Slick settings you’ve defined in your conf/application.conf file:</p>
<pre class="terminal scrollx"><code>flywayMigrate</code></pre>
<p>What about if you want to automatically run migrations when you run up your Play application?</p>
<ol start="3" style="list-style-type: decimal">
<li>I’ve create a task that displays the existing Flyway migration status and prompts you whether to run a migration. If you choose ‘y’ it then runs any pending migrations and starts the Play application. To do this update your build.sbt file with:</li>
</ol>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">lazy</span> <span class="kw">val</span> migrate = taskKey[Unit](<span class="st">&quot;Migrate DB with Flyway&quot;</span>)
migrate := Def.<span class="fu">taskDyn</span> {
  flywayInfo.<span class="fu">value</span>
  <span class="fu">println</span>(<span class="st">&quot;do you want to migrate the schema? y/n&quot;</span>)
  <span class="kw">val</span> confirm = <span class="fu">readLine</span>()
  <span class="kw">if</span> (confirm == <span class="st">&quot;y&quot;</span>) {
    Def.<span class="fu">task</span> {
      flywayMigrate.<span class="fu">value</span>
      flywayInfo.<span class="fu">value</span>
    }
  } <span class="kw">else</span> {
    Def.<span class="fu">task</span> { <span class="fu">println</span>(<span class="st">&quot;-- skipping migration --&quot;</span>) }
  }
}.<span class="fu">value</span>

<span class="fu">addCommandAlias</span>(<span class="st">&quot;runM&quot;</span>, <span class="st">&quot;;migrate;run&quot;</span>)</code></pre></div>
<p>Now you can run migrations and then start your Play application through SBT with:</p>
<pre class="terminal scrollx"><code>runM</code></pre>
<h3 id="running-migrations">Running migrations</h3>
<iframe class="movie" src="https://player.vimeo.com/video/149355602" width="800" height="681" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>
<h3 id="skipping-migrations">Skipping migrations</h3>
<iframe class="movie" src="https://player.vimeo.com/video/149355601" width="800" height="681" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>]]></description>
    <pubDate>Fri, 18 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-18-using-flyway-with-play-2_4-and-slick.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>left and right implicit conversion to Either in Scalaz</title>
    <link>http://blog.ssanj.net/posts/2015-12-17-left-and-right-implicit-conversions-to-either-in-scalaz.html</link>
    <description><![CDATA[<p>One way to convert any value to a <a href="https://github.com/scalaz/scalaz">scalaz</a> <a href="https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Either.scala">Either or \/</a> is via the <strong>left</strong> and <strong>right</strong> implicit conversions:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">_</span>
<span class="kw">import</span> Scalaz.<span class="fu">_</span>

<span class="fl">5.</span>right[String]
String \/ Int = \/-(<span class="dv">5</span>)

<span class="st">&quot;This is an error&quot;</span>.<span class="fu">left</span>[Int]
String \/ Int = -\/(This is an error)</code></pre></div>
<p>The basic format is:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala">right_instance.<span class="fu">right</span>[left_type]
left_instance.<span class="fu">left</span>[right_type]</code></pre></div>
<p>Importing <a href="https://github.com/scalaz/scalaz/blob/series/7.1.x/core/src/main/scala/scalaz/Scalaz.scala">Scalaz._</a> brings a lot of unnecessary implicit conversions and types into scope. What if you wanted something a little more light weight?</p>
<h2 id="scalaz-7.0.x">scalaz 7.0.x</h2>
<p>After hunting around I found that the <strong>left</strong> and <strong>right</strong> methods are defined in the <a href="https://github.com/scalaz/scalaz/blob/series/7.1.x/core/src/main/scala/scalaz/syntax/IdOps.scala">scalaz.syntax.IdOps</a> trait and are implemented in the <a href="https://github.com/scalaz/scalaz/blob/series/7.1.x/core/src/main/scala/scalaz/syntax/Syntax.scala">scalaz.syntax.id</a> object. With that information we can now use cheaper imports for <strong>left</strong> and <strong>right</strong>:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">_</span>
<span class="kw">import</span> syntax.<span class="fu">id</span>.<span class="fu">_</span>

<span class="fl">5.</span>right[String]
String \/ Int = \/-(<span class="dv">5</span>)

<span class="st">&quot;This is an error&quot;</span>.<span class="fu">left</span>[Int]
String \/ Int = -\/(This is an error)</code></pre></div>
<h2 id="scalaz-7.1.x-onwards">scalaz 7.1.x onwards</h2>
<p>In scalaz 7.1.x and onwards, the <strong>left</strong> and <strong>right</strong> methods are defined in the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/syntax/EitherOps.scala">scalaz.syntax.EitherOps</a> trait and implemented in the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/syntax/Syntax.scala">scalaz.syntax.either</a> object. Your imports would have to change to:</p>
<div class="sourceCode"><pre class="sourceCode scala scrollx"><code class="sourceCode scala"><span class="kw">import</span> scalaz.<span class="fu">_</span>
<span class="kw">import</span> syntax.<span class="fu">either</span>.<span class="fu">_</span>

<span class="fl">5.</span>right[String]
String \/ Int = \/-(<span class="dv">5</span>)

<span class="st">&quot;This is an error&quot;</span>.<span class="fu">left</span>[Int]
String \/ Int = -\/(This is an error)</code></pre></div>]]></description>
    <pubDate>Thu, 17 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-17-left-and-right-implicit-conversions-to-either-in-scalaz.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Set SBT log level to Debug</title>
    <link>http://blog.ssanj.net/posts/2015-12-06-set-sbt-log-level-to-debug.html</link>
    <description><![CDATA[<p>If you need to set the log level for <a href="http://www.scala-sbt.org">SBT</a> in the console you can do:</p>
<pre class="terminal scrollx"><code>set logLevel := Level.Debug</code></pre>
<p>Alternatively within an .sbt file you can:</p>
<pre class="terminal scrollx"><code>logLevel := Level.Debug</code></pre>
<p>The <a href="http://www.scala-sbt.org/release/api/index.html#sbt.Level$">available levels</a> are:</p>
<pre class="terminal scrollx"><code>Debug
Info
Warn
Error</code></pre>]]></description>
    <pubDate>Sun, 06 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-06-set-sbt-log-level-to-debug.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Port Forwarding with a Docker Machine</title>
    <link>http://blog.ssanj.net/posts/2015-12-06-port-forwarding-with-a-docker-machine.html</link>
    <description><![CDATA[<p>Something a little annoying about setting up a server on Docker Machine is that to use the service you need to know the ip of the machine:</p>
<pre class="terminal scrollx"><code>docker-machine ip machine_name</code></pre>
<p>This can get tedious, specially if you are using GUI tools. In the last post <a href="http://sanj.ink/2015-12-06-how-to-ssh-into-a-docker-machine.html">I described a way to ssh into a Docker machine</a>. Because we have the power of ssh, we can now port forward:</p>
<pre class="terminal scrollx"><code>machine=machine_name; ssh -i ~/.docker/machine/machines/$machine/id_rsa docker@$(docker-machine ip $machine) -N -L local_port:localhost:machine_port</code></pre>
<p>Now we never have to remember the ip address of the Docker machine. We can simply connect to our local port on localhost.</p>]]></description>
    <pubDate>Sun, 06 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-06-port-forwarding-with-a-docker-machine.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>How to SSH into a Docker Machine</title>
    <link>http://blog.ssanj.net/posts/2015-12-06-how-to-ssh-into-a-docker-machine.html</link>
    <description><![CDATA[<p>While you can use</p>
<pre class="terminal scrollx"><code>docker-machine ssh &lt;machine_name&gt;</code></pre>
<p>to ssh into a machine, I was wondering how to use vanilla ssh to achieve the same. I stumbled across a <a href="https://github.com/docker/machine/issues/1758">Docker Github issue</a> that had a very useful snippet by <a href="https://github.com/emilingerslev">emilingerslev</a>:</p>
<pre class="terminal scrollx"><code>machine=machine_name; ssh -i ~/.docker/machine/machines/$machine/id_rsa docker@$(docker-machine ip $machine)</code></pre>
<p>That’s all there is to it!</p>]]></description>
    <pubDate>Sun, 06 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-12-06-how-to-ssh-into-a-docker-machine.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Docker Cheat Sheet</title>
    <link>http://blog.ssanj.net/posts/2015-11-29-docker-cheat-sheet.html</link>
    <description><![CDATA[<p>Here are some common <a href="http://www.docker.com">Docker</a> and <a href="https://docs.docker.com/machine">Docker-Machine</a> commands. You only need Docker Machine if you are on OSX.</p>
<h2 id="docker-machine">Docker Machine</h2>
<p>Create the default machine:</p>
<pre class="terminal scrollx"><code>docker-machine create --driver virtualbox default</code></pre>
<p>The default machine is created at:</p>
<pre class="terminal scrollx"><code>~/.docker/machine/machines/default</code></pre>
<p>List machines:</p>
<pre class="terminal scrollx"><code>docker-machine ls</code></pre>
<p>Show environment properties of machine:</p>
<pre class="terminal scrollx"><code>docker-machine env machine_name</code></pre>
<p>Shows ip of machine:</p>
<pre class="terminal scrollx"><code>docker machine ip machine_name</code></pre>
<p>Start a machine:</p>
<pre class="terminal scrollx"><code>docker-machine start machine_name</code></pre>
<p>SSH into a machine:</p>
<pre class="terminal scrollx"><code>docker-machine ssh machine_name</code></pre>
<p>Show detailed information about a machine:</p>
<pre class="terminal scrollx"><code>docker-machine inspect machine_name</code></pre>
<h2 id="docker">Docker</h2>
<p>Create a terminal bound to machine. <em>You have to do this before you run any docker commands</em>:</p>
<pre class="terminal scrollx"><code>eval &quot;$(docker-machine env machine_name)&quot;</code></pre>
<p>Run a container as a daemon:</p>
<pre class="terminal scrollx"><code>docker run -d ...</code></pre>
<p>Run a container exposing ports:</p>
<pre class="terminal scrollx"><code>docker run -p external_port:internal_port ...</code></pre>
<p>Run a contain exposing random ports:</p>
<pre class="terminal scrollx"><code>docker run -P (maps internal port to random external port) ...</code></pre>
<p>Run a container with a mapped volume:</p>
<pre class="terminal scrollx"><code>docker run -v host_path:container_path ...</code></pre>
<p>Run a container with environment arguments:</p>
<pre class="terminal scrollx"><code>docker run -e ENV_NAME_1=value1 -e ENV_NAME_2=value2 ...</code></pre>
<p>Run a container with mapped ports, volumns and an enviroment variable:</p>
<pre class="terminal scrollx"><code>docker run --name some-mysql \
           -p 3306:3306 \
           -v /mydata:/var/lib/mysql \
           -e MYSQL_ROOT_PASSWORD=some_secret \
           -d mysql</code></pre>
<p>Connect to a running container:</p>
<pre class="terminal scrollx"><code>docker exec -it container_name bash</code></pre>
<p>List Docker processes:</p>
<pre class="terminal scrollx"><code>docker ps</code></pre>
<p>List last run container:</p>
<pre class="terminal scrollx"><code>docker ps -l</code></pre>
<p>List all containers running or otherwise:</p>
<pre class="terminal scrollx"><code>docker ps -a</code></pre>
<p>List Docker images:</p>
<pre class="terminal scrollx"><code>docker images</code></pre>
<p>Start a Docker container:</p>
<pre class="terminal scrollx"><code>docker start container</code></pre>
<p>Stop a Docker container:</p>
<pre class="terminal scrollx"><code>docker stop container</code></pre>
<p>Remove a Docker container:</p>
<pre class="terminal scrollx"><code>docker rm container</code></pre>
<p>Show logs of a container:</p>
<pre class="terminal scrollx"><code>docker logs -f container</code></pre>
<p>Show port mappings for a container:</p>
<pre class="terminal scrollx"><code>docker port container</code></pre>]]></description>
    <pubDate>Sun, 29 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-11-29-docker-cheat-sheet.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Your Solution Wasn&apos;t up to Speed</title>
    <link>http://blog.ssanj.net/posts/2015-11-11-not-up-to-speed.html</link>
    <description><![CDATA[<p>As I’m looking for my next awesome workplace, I’ve been applying for quite a few jobs. Most need some form of assignment completed. If you don’t end up getting these jobs, as I didn’t, you might feel like you got gypped and wasted a bunch of your time. What can make this so much better for the unsuccessful candidate is some proper feedback as to what could be improved on or what was lacking. This is crucial for anyone trying to improve how they develop software or trying to get better at anything.</p>
<p>Lots of times as a candidate you get something vague like:</p>
<blockquote>
<p>you were not successful.</p>
</blockquote>
<p>One company I asked feedback from said:</p>
<blockquote>
<p>The feedback from the technical team was that your solution wasn’t up to speed for what we’d expect from an experienced developer.</p>
</blockquote>
<p>Ouch! Talk about unnecessarily harsh and vague. Not really the feedback I expected from “experienced” developers.</p>
<p>We are all busy. If you ask potential candidates to complete a take-home assignment then you should be prepared to spend a little time reviewing the assignments. I spent roughly five hours in the assignment where my solution was not what they expected. They gave me exactly zero minutes in return. Just a glib reply and they are off to the next candidate. This type of one-sided interview processes are totally broken.</p>
<p>Don’t expect everyone to fall into some cookie-cutter box with the exact same solution. There are always many ways to solve any problem. Ideally this feedback should be somewhat like a code review where you try to understand what was done and give some feedback. Maybe this is asking for too much from the IT industry.</p>
<p>If a company has a mature interviewing process, they know what they are looking for and can articulate it fairly clearly. In addition how a company behaves after you are unsuccessful says a lot about their culture and how they treat their employees. People are constantly interviewing and are being interviewed for jobs so it pays to have some empathy on both sides of the fence.</p>
<p>I feel like companies never seem to understand that having a candidate spend hours of unpaid work on an assignment is a huge ask. With that in mind some human decency when a candidate doesn’t meet the company’s expectations, would go a long way.</p>]]></description>
    <pubDate>Wed, 11 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-11-11-not-up-to-speed.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>Short Tech Books</title>
    <link>http://blog.ssanj.net/posts/2015-11-08-short-tech-books.html</link>
    <description><![CDATA[<p>Technical books are always so long. But recently I’ve come across two very short books:</p>
<ol style="list-style-type: decimal">
<li><a href="http://www.amazon.com/Effective-Akka-Jamie-Allen/dp/1449360076">Effective Akka</a> by <a href="https://twitter.com/jamie_allen">Jamie Allen</a> (74 pages)</li>
<li><a href="http://www.artima.com/shop/scalacheck">ScalaCheck</a> by Rickard Nilsson (137 - 148 pages depending on whether you get the ebook or print)</li>
</ol>
<p>These books are awesome and cover one topic very well. A short book gives the reader the motivation to completely read it, instead of giving up around page 300. I hope this catches on.</p>]]></description>
    <pubDate>Sun, 08 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-11-08-short-tech-books.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>
<item>
    <title>On the Outside</title>
    <link>http://blog.ssanj.net/posts/2015-11-08-on-the-outside.html</link>
    <description><![CDATA[<p>Leaving a workplace is a solo mission. It’s personal. You leave mentally way before you physically hand in your resignation. You struggle with “trying to make the best of it” for a while. When that fails, you start looking around for other jobs. All the while you may have many “allies” who feel the same way about your workplace. You spur each other on. “We are all going to get out of here” you think, like you’re escaping some kind of prison.</p>
<p>Once you do hand in your resignation, you become a pariah. An outcast. No matter how valid your reasons for leaving or what issues exist, you have chosen to leave. Your future now diverges from the future of every other person that chooses to stay. Your former allies now form new alliances. You are excluded from plans and discussions of the future. It’s not a one-way exclusion other. You also remove yourself from discussions and from “caring” too much about anything. Writing crappy code? Go for it. Hiring stupid people? Champion! It’s like watching the makings of a train wreck which you won’t be there to witness.</p>
<p>As the person who’s leaving for either a new opportunity (or just a change as is my case), you start to live your life with more hope of a brighter and different future. It’s still sad to leave the people you’ve worked with for so many months, behind.</p>
<p>One of the worst things is having to wait out your resignation period before heading off. It would be wonderful if you could just hand in your resignation and be done with it. Have some instant closure. But that’s not the case usually. For me, it’s a six week period of total agony and boredom. All the while witnessing continual reinforcement of the reasons that lead to this decision.</p>]]></description>
    <pubDate>Sun, 08 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.ssanj.net/posts/2015-11-08-on-the-outside.html</guid>
    <dc:creator>sanjiv sahayam</dc:creator>
</item>

    </channel>
</rss>
